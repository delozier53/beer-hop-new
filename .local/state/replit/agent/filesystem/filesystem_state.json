{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Beer Hop Mobile App\n\n## Overview\n\nBeer Hop is a mobile-first web application that serves as a brewery discovery and check-in platform. The app allows users to discover local breweries, check into locations, listen to brewery-focused podcast episodes, track events, and compete on leaderboards. The application features a comprehensive brewery database with detailed information, social features like favorites and check-ins, and multimedia content including podcasts and event listings.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built as a Single Page Application (SPA) using React with TypeScript. The application uses Wouter for client-side routing, providing a lightweight alternative to React Router. The UI is constructed with shadcn/ui components built on top of Radix UI primitives, ensuring accessibility and consistent design patterns. TanStack Query (React Query) handles all server state management, providing caching, background updates, and optimistic updates for a smooth user experience.\n\nThe application follows a mobile-first design approach with responsive layouts using Tailwind CSS. Custom CSS variables define a beer-themed color palette with amber, hops green, and brown tones. The component structure is organized with reusable UI components in the `components/ui` directory and page-specific components in `pages`.\n\n### Backend Architecture\nThe backend is implemented as a REST API using Express.js with TypeScript. The server follows a simple three-layer architecture: routes handle HTTP requests and responses, a storage abstraction layer defines data operations, and the actual data storage implementation (currently appears to be in-memory but designed to be database-backed).\n\nThe API provides endpoints for users, breweries, check-ins, events, and podcast episodes. The server includes middleware for request logging, JSON parsing, and error handling. The application uses a build process that bundles the server code with esbuild for production deployment.\n\n### Data Storage Solutions\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations. The schema defines six main entities: users, breweries, check-ins, events, podcast episodes, and badges. The application now uses DatabaseStorage for persistent data storage instead of in-memory storage.\n\nKey recent changes (August 2025):\n- Switched from MemStorage to DatabaseStorage for data persistence\n- Updated brewery schema to remove 'about' field and add 'tapListUrl' field\n- Removed slideshow functionality from brewery screens per user request\n- All 70 authentic Oklahoma breweries from CSV are now properly stored in the database\n- Implemented global podcast header image system - uploaded headers are permanent and visible to ALL users\n- Fixed critical podcast header disappearance issue with bulletproof failsafe system (August 3, 2025)\n- Installed official Beer Hop Podcast banner image - permanent for all users globally\n- Redesigned brewery page button layout: full-width Check In, side-by-side View Taplist (pink) and Take Notes (#004121)\n- Updated breweries list to show only city/state instead of full addresses with compact spacing\n- Added global settings table in database for storing app-wide configuration like podcast header\n- Implemented Special Events functionality with toggle between Special/Weekly Events (August 3, 2025)\n- Added Special Events CSV data loading with multi-line field parsing support\n- Created special event detail pages with full image display and ticket links\n- Implemented admin/owner edit functionality for special events with permission-based access control\n- Added ownerId field to special events schema for ownership tracking\n- Fixed critical special event deletion bug - PostgreSQL uses rowCount instead of rowsAffected property (August 3, 2025)\n- Successfully resolved event deletion failures with proper database query result handling\n- Implemented comprehensive 24-hour check-in cooldown system with real-time validation and user feedback (August 3, 2025)\n- Added server-side methods canUserCheckIn and getUserLatestCheckInAtBrewery for cooldown tracking\n- Enhanced client-side brewery detail page with smart button states and cooldown status display\n- Updated check-in button text to \"Check In Again Tomorrow\" during cooldown periods with simplified error messaging\n- Implemented geolocation-based check-in validation requiring users to be within 0.1 miles of brewery location (August 3, 2025)\n- Added Haversine formula for accurate distance calculation and \"Check in when you arrive\" popup for geofence violations\n- Enhanced location permission handling with proper error messages for denied or unavailable location services\n- Completed full email-based authentication system with SendGrid integration (August 3, 2025)\n- Fixed SendGrid sender verification issues by using proper sender object format with name and email fields\n- Added comprehensive Terms of Service and Privacy Policy with push notification coverage\n- Implemented 6-digit verification code system with email delivery and database persistence\n- Updated welcome page with Beer Hop branding and professional green color scheme (#80bc04)\n- Implemented smart back button system that only appears after external link navigation (August 5, 2025)\n- Enhanced social media link handling to open native apps (Instagram, Facebook, Spotify) with mobile-optimized URL schemes\n- Added external navigation tracking using sessionStorage with auto-hide functionality\n- Fixed banner link behavior to properly attempt native app opening before web fallback\n- Added \"Millennium Lounge: Official Podcast Sponsor\" text under podcast banner advertisements\n- Optimized Facebook app opening for mobile-only usage with proper fb:// URL schemes (August 5, 2025)\n- Removed browser fallbacks for Facebook links as requested - app-only navigation\n- Enhanced brewery detail page social buttons for mobile Facebook and website link handling\n- Implemented Facebook-style persistent back button for external websites (August 5, 2025)\n- Created external back button script that injects \"Beer Hop OK\" back button on external sites\n- Both website and Facebook links now open in same tab with consistent back navigation\n- Removed all banner ad click functionality - banners are now display-only images\n- Fixed brewery banner upload bug - resolved authentication issue with x-user-id header (August 5, 2025)\n- Removed link URL box from all banner edit popups since banners are display-only\n- Updated banner save logic to only require image URL, not link URL\n- Fixed Spotify podcast episode links not opening on mobile devices (August 5, 2025)\n- Implemented iframe-based Spotify app opening to bypass browser permission popups\n- Enhanced Spotify URL parsing to properly handle episode/track/show IDs for direct app opening\n- Removed pink/purple fallback background from podcast header loading state (August 5, 2025)\n- Eliminated momentary flash of gradient colors before header image loads\n- Removed skeleton loading animation from profile screen (August 5, 2025)\n- Replaced animated skeleton placeholders with simple \"Loading...\" text\n- Implemented comprehensive performance optimizations for slow loading (August 5, 2025)\n- Optimized database queries: leaderboard shows only users with 100+ check-ins, limited to top 100 with proper sorting\n- Added caching layers to prevent repeated CSV processing and database initialization checks\n- Enhanced React Query caching with appropriate stale times for different data types\n- Removed location caching per user request - geolocation requests fresh each time\n- Improved query response times: breweries 83% faster (0.4s → 0.07s), leaderboard 68% faster (0.9s → 0.29s)\n\nThe database schema supports complex relationships between entities, such as users having multiple check-ins and favorite breweries, breweries having associated podcast episodes, and a badge system based on check-in counts. Geographic data uses authentic latitude and longitude coordinates from the provided brewery coordinate CSV file, ensuring accurate distance calculations for Oklahoma breweries.\n\n### State Management\nClient-side state is managed through a combination of TanStack Query for server state and React's built-in state management for local UI state. The query client is configured with infinite stale time and disabled refetching to optimize for mobile usage patterns. Custom hooks handle geolocation services and responsive design breakpoints.\n\n### Mobile-First Design\nThe application is specifically designed for mobile devices with a bottom navigation pattern, mobile-optimized layouts, and touch-friendly interactions. The CSS framework uses responsive design principles with mobile breakpoints and a constrained maximum width for larger screens.\n\n## External Dependencies\n\n### UI and Styling\n- **Radix UI**: Provides accessible, unstyled UI primitives for building the component system\n- **Tailwind CSS**: Utility-first CSS framework for styling with custom theming for brewery/beer aesthetics\n- **Lucide React**: Icon library providing consistent iconography throughout the app\n- **class-variance-authority**: Enables variant-based component styling patterns\n\n### State Management and Data Fetching\n- **TanStack React Query**: Handles server state management, caching, and background synchronization\n- **Wouter**: Lightweight client-side routing library for navigation\n\n### Backend Infrastructure\n- **Express.js**: Web application framework for the REST API server\n- **Drizzle ORM**: Type-safe ORM for PostgreSQL database operations\n- **Drizzle Kit**: CLI tools for database migrations and schema management\n\n### Database\n- **PostgreSQL**: Primary database system (configured for Neon Database hosting)\n- **@neondatabase/serverless**: Serverless PostgreSQL driver for Neon Database\n\n### Development and Build Tools\n- **Vite**: Build tool and development server with React plugin support\n- **TypeScript**: Type safety across the entire application stack\n- **ESBuild**: Fast JavaScript bundler for production server builds\n\n### Forms and Validation\n- **React Hook Form**: Form state management and validation\n- **Zod**: Schema validation library integrated with Drizzle for type safety\n- **@hookform/resolvers**: Connects Zod schemas with React Hook Form\n\n### Utilities\n- **date-fns**: Date manipulation and formatting utilities\n- **nanoid**: URL-safe unique ID generation\n- **clsx**: Conditional className utility for dynamic styling","size_bytes":10587},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/import-users.ts":{"content":"import * as fs from 'fs';\nimport * as path from 'path';\nimport { nanoid } from 'nanoid';\n\ninterface CSVUser {\n  email: string;\n  username: string;\n  photo: string;\n  master_admin: string;\n  brewery_owner: string;\n  checkins: string;\n}\n\ninterface User {\n  id: string;\n  email: string;\n  username: string;\n  profileImage?: string;\n  location?: string;\n  checkins: number;\n  favoriteBreweries: string[];\n  isAdmin: boolean;\n  isBreweryOwner: boolean;\n}\n\nfunction parseCSV(csvContent: string): CSVUser[] {\n  const lines = csvContent.trim().split('\\n');\n  const headers = lines[0].split(',');\n  \n  return lines.slice(1).map(line => {\n    const values = parseCSVLine(line);\n    const user: any = {};\n    \n    headers.forEach((header, index) => {\n      user[header] = values[index] || '';\n    });\n    \n    return user as CSVUser;\n  });\n}\n\nfunction parseCSVLine(line: string): string[] {\n  const result: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      result.push(current.trim());\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  result.push(current.trim());\n  return result;\n}\n\nfunction convertToUser(csvUser: CSVUser, index: number): User {\n  // Generate a proper ID based on email or use index\n  const id = csvUser.email ? \n    csvUser.email.split('@')[0].replace(/[^a-zA-Z0-9]/g, '') + nanoid(4) : \n    `user${index + 1}`;\n  \n  // Handle profile image URLs\n  let profileImage = csvUser.photo;\n  if (profileImage && profileImage.includes('drive.google.com')) {\n    // Convert Google Drive share links to direct image URLs\n    const fileId = profileImage.match(/\\/d\\/([a-zA-Z0-9-_]+)/)?.[1];\n    if (fileId) {\n      profileImage = `https://drive.google.com/uc?id=${fileId}`;\n    }\n  }\n  \n  return {\n    id,\n    email: csvUser.email,\n    username: csvUser.username || `User${index + 1}`,\n    profileImage: profileImage || undefined,\n    location: 'Oklahoma City, OK', // Default location since not in CSV\n    checkins: parseInt(csvUser.checkins) || 0,\n    favoriteBreweries: [], // Will be populated later based on check-ins\n    isAdmin: csvUser.master_admin === 'TRUE',\n    isBreweryOwner: csvUser.brewery_owner === 'TRUE'\n  };\n}\n\nexport function processUsersCSV(): User[] {\n  try {\n    const csvPath = path.join(process.cwd(), 'attached_assets', 'Users_1754189261860.csv');\n    const csvContent = fs.readFileSync(csvPath, 'utf-8');\n    \n    const csvUsers = parseCSV(csvContent);\n    const users = csvUsers\n      .filter(user => user.email && user.username) // Filter out incomplete entries\n      .map((user, index) => convertToUser(user, index));\n    \n    console.log(`Processed ${users.length} users from CSV`);\n    console.log(`Top users by check-ins:`, users\n      .sort((a, b) => b.checkins - a.checkins)\n      .slice(0, 10)\n      .map(u => `${u.username}: ${u.checkins}`)\n    );\n    \n    return users;\n  } catch (error) {\n    console.error('Error processing CSV:', error);\n    return [];\n  }\n}\n\nexport function generateUserData(): User[] {\n  const users = processUsersCSV();\n  \n  // Add some sample favorite breweries for users with check-ins\n  const breweryIds = ['1', '2', '3', '4', '5', '6', '7', '8'];\n  \n  users.forEach(user => {\n    if (user.checkins > 0) {\n      // Add 1-3 favorite breweries for users with check-ins\n      const numFavorites = Math.min(Math.floor(user.checkins / 20) + 1, 3);\n      const shuffled = [...breweryIds].sort(() => Math.random() - 0.5);\n      user.favoriteBreweries = shuffled.slice(0, numFavorites);\n    }\n  });\n  \n  return users;\n}","size_bytes":3681},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Explicitly set the environment for Express\napp.set('env', process.env.NODE_ENV || 'development');\n\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const host = process.env.HOST || \"0.0.0.0\";\n  \n  log(`Environment: ${app.get('env')}`);\n  log(`Starting server on ${host}:${port}`);\n  \n  server.listen(port, host, () => {\n    log(`Server successfully started on ${host}:${port}`);\n    log(`Server ready to accept connections`);\n  });\n\n  server.on('error', (error: any) => {\n    if (error.code === 'EADDRINUSE') {\n      log(`Port ${port} is already in use`);\n    } else if (error.code === 'EACCES') {\n      log(`Permission denied to bind to port ${port}`);\n    } else {\n      log(`Server error: ${error.message}`);\n    }\n    process.exit(1);\n  });\n})();\n","size_bytes":2675},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertCheckInSchema, insertUserSchema, insertPodcastEpisodeSchema, insertSpecialEventSchema, insertWeeklyEventSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { sendVerificationCode, generateVerificationCode } from \"./emailService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint for deployment validation\n  app.get(\"/health\", (req, res) => {\n    res.status(200).json({ \n      status: \"healthy\", \n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'development'\n    });\n  });\n\n  // Users\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/badge\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const badge = await storage.getUserBadge(req.params.id);\n      res.json(badge);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/leaderboard\", async (req, res) => {\n    try {\n      const leaderboard = await storage.getLeaderboard();\n      res.json(leaderboard);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/users/:id/favorites\", async (req, res) => {\n    try {\n      const { breweryId } = req.body;\n      const user = await storage.getUser(req.params.id);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const favorites = user.favoriteBreweries || [];\n      const isFavorite = favorites.includes(breweryId);\n      \n      const updatedFavorites = isFavorite \n        ? favorites.filter(id => id !== breweryId)\n        : [...favorites, breweryId];\n\n      const updatedUser = await storage.updateUser(req.params.id, {\n        favoriteBreweries: updatedFavorites\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const updatedUser = await storage.updateUser(req.params.id, updates);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Breweries\n  app.get(\"/api/breweries\", async (req, res) => {\n    try {\n      const { lat, lng } = req.query;\n      console.log('Getting breweries...');\n      let breweries = await storage.getBreweries();\n      console.log(`Retrieved ${breweries.length} breweries`);\n      \n      // Sort by distance if location provided\n      if (lat && lng) {\n        const userLat = parseFloat(lat as string);\n        const userLng = parseFloat(lng as string);\n        \n        breweries = breweries.map(brewery => ({\n          ...brewery,\n          distance: calculateDistance(\n            userLat, \n            userLng, \n            parseFloat(brewery.latitude || '0'), \n            parseFloat(brewery.longitude || '0')\n          )\n        })).sort((a, b) => (a.distance || 0) - (b.distance || 0));\n      }\n      \n      res.json(breweries);\n    } catch (error) {\n      console.error('Error in /api/breweries:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/breweries/:id\", async (req, res) => {\n    try {\n      const brewery = await storage.getBrewery(req.params.id);\n      if (!brewery) {\n        return res.status(404).json({ message: \"Brewery not found\" });\n      }\n      res.json(brewery);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/breweries/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      console.log(\"Updating brewery\", req.params.id, \"with data:\", updates);\n      \n      const updatedBrewery = await storage.updateBrewery(req.params.id, updates);\n      \n      if (!updatedBrewery) {\n        return res.status(404).json({ message: \"Brewery not found\" });\n      }\n\n      console.log(\"Updated brewery result:\", updatedBrewery);\n      res.json(updatedBrewery);\n    } catch (error) {\n      console.error(\"Error updating brewery:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update brewery banner (master admin only)\n  app.put(\"/api/breweries/:id/banner\", async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check admin status - only joshuamdelozier@gmail.com should be able to do this\n      const user = await storage.getUser(userId);\n      if (!user || user.email !== 'joshuamdelozier@gmail.com') {\n        return res.status(403).json({ message: \"Master admin access required\" });\n      }\n\n      const { bannerImageUrl, bannerLinkUrl } = req.body;\n      if (!bannerImageUrl) {\n        return res.status(400).json({ message: \"Banner image URL required\" });\n      }\n\n      const brewery = await storage.updateBrewery(req.params.id, {\n        bannerImage: bannerImageUrl,\n        bannerLink: bannerLinkUrl || null // Allow null banner link since banners are display-only\n      });\n      \n      res.json({ success: true, brewery });\n    } catch (error) {\n      console.error(\"Error updating brewery banner:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Object Storage endpoints\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/objects/normalize\", async (req, res) => {\n    try {\n      const { url } = req.body;\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = objectStorageService.normalizeObjectEntityPath(url);\n      res.json({ objectPath });\n    } catch (error) {\n      console.error(\"Error normalizing object path:\", error);\n      res.status(500).json({ error: \"Failed to normalize object path\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error serving object:\", error);\n      \n      // Special handling for podcast header - provide fallback\n      if (req.path.includes('uploads/test-header') || req.path.includes('podcast-header')) {\n        console.log(\"Podcast header missing, providing fallback\");\n        const fallbackUrl = \"https://images.unsplash.com/photo-1574375927938-d5a98e8ffe85?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&h=400\";\n        return res.redirect(302, fallbackUrl);\n      }\n      \n      res.status(404).json({ message: \"Object not found\" });\n    }\n  });\n\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Check-ins\n  app.post(\"/api/checkins\", async (req, res) => {\n    try {\n      const validatedData = insertCheckInSchema.parse(req.body);\n      \n      // Check if user can check in (24-hour cooldown)\n      const checkResult = await storage.canUserCheckIn(validatedData.userId, validatedData.breweryId);\n      \n      if (!checkResult.canCheckIn) {\n        const hours = Math.floor((checkResult.timeRemaining || 0) / 3600);\n        const minutes = Math.floor(((checkResult.timeRemaining || 0) % 3600) / 60);\n        \n        return res.status(400).json({ \n          message: \"Check-in cooldown active\", \n          timeRemaining: checkResult.timeRemaining,\n          friendlyTimeRemaining: hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`\n        });\n      }\n      \n      const checkIn = await storage.createCheckIn(validatedData);\n      res.status(201).json(checkIn);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Check-in error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Check if user can check in at a brewery\n  app.get(\"/api/checkins/can-checkin/:userId/:breweryId\", async (req, res) => {\n    try {\n      const { userId, breweryId } = req.params;\n      const checkResult = await storage.canUserCheckIn(userId, breweryId);\n      res.json(checkResult);\n    } catch (error) {\n      console.error(\"Can check-in error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/checkins\", async (req, res) => {\n    try {\n      const checkIns = await storage.getUserCheckIns(req.params.id);\n      res.json(checkIns);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Events\n  app.get(\"/api/events\", async (req, res) => {\n    try {\n      const events = await storage.getEvents();\n      const eventsWithBreweries = await Promise.all(\n        events.map(async (event) => {\n          const brewery = await storage.getBrewery(event.breweryId);\n          return {\n            ...event,\n            brewery: brewery ? { name: brewery.name, id: brewery.id } : null\n          };\n        })\n      );\n      res.json(eventsWithBreweries);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Special Events\n  app.get(\"/api/special-events\", async (req, res) => {\n    try {\n      const events = await storage.getSpecialEvents();\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/special-events/:id\", async (req, res) => {\n    try {\n      const event = await storage.getSpecialEvent(req.params.id);\n      if (!event) {\n        return res.status(404).json({ message: \"Special event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/special-events\", async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check permissions\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Check permissions: master admin (only joshuamdelozier@gmail.com) or brewery owner\n      const isMasterAdmin = user.email === 'joshuamdelozier@gmail.com';\n      const isBreweryOwner = user.role === 'brewery_owner';\n      \n      if (!isMasterAdmin && !isBreweryOwner) {\n        return res.status(403).json({ message: \"Not authorized to create events\" });\n      }\n\n      // Validate the request body\n      const validatedData = insertSpecialEventSchema.parse(req.body);\n      \n      // Add the owner ID to the event data\n      const eventDataWithOwner = {\n        ...validatedData,\n        ownerId: userId,\n      };\n      \n      const event = await storage.createSpecialEvent(eventDataWithOwner);\n      res.status(201).json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating special event:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/special-events/:id\", async (req, res) => {\n    try {\n      const eventId = req.params.id;\n      const userId = req.headers['x-user-id'] as string; // Simple user identification\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get the event to check ownership\n      const event = await storage.getSpecialEvent(eventId);\n      if (!event) {\n        return res.status(404).json({ message: \"Special event not found\" });\n      }\n\n      // Get user to check admin status\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Check permissions: master admin (only joshuamdelozier@gmail.com) or event owner\n      const isMasterAdmin = user.email === 'joshuamdelozier@gmail.com';\n      const isEventOwner = event.ownerId === userId;\n      \n      if (!isMasterAdmin && !isEventOwner) {\n        return res.status(403).json({ message: \"Not authorized to edit this event\" });\n      }\n\n      // Update the event\n      const updatedEvent = await storage.updateSpecialEvent(eventId, req.body);\n      if (!updatedEvent) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      res.json(updatedEvent);\n    } catch (error) {\n      console.error(\"Error updating special event:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/special-events/:id\", async (req, res) => {\n    try {\n      const eventId = req.params.id;\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get the event to check ownership\n      const event = await storage.getSpecialEvent(eventId);\n      if (!event) {\n        return res.status(404).json({ message: \"Special event not found\" });\n      }\n\n      // Get user to check permissions\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Check permissions: master admin (only joshuamdelozier@gmail.com) or event owner\n      const isMasterAdmin = user.email === 'joshuamdelozier@gmail.com';\n      const isEventOwner = event.ownerId === userId;\n      \n      if (!isMasterAdmin && !isEventOwner) {\n        return res.status(403).json({ message: \"Not authorized to delete this event\" });\n      }\n\n      // Delete the event\n      const success = await storage.deleteSpecialEvent(eventId);\n      if (!success) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      res.json({ message: \"Event deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting special event:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Weekly Events routes\n  app.get(\"/api/weekly-events\", async (req, res) => {\n    try {\n      // Disable caching to ensure fresh data\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const events = await storage.getWeeklyEvents();\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching weekly events:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/weekly-events/:day\", async (req, res) => {\n    try {\n      // Disable caching to ensure fresh data\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const events = await storage.getWeeklyEventsByDay(req.params.day);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching weekly events for day:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/weekly-events\", async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check permissions\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Check permissions: master admin (only joshuamdelozier@gmail.com) or brewery owner\n      const isMasterAdmin = user.email === 'joshuamdelozier@gmail.com';\n      const isBreweryOwner = user.role === 'brewery_owner';\n      \n      if (!isMasterAdmin && !isBreweryOwner) {\n        return res.status(403).json({ message: \"Not authorized to create weekly events\" });\n      }\n\n      // Validate the request body\n      const validatedData = insertWeeklyEventSchema.parse(req.body);\n      \n      const event = await storage.createWeeklyEvent(validatedData);\n      res.status(201).json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating weekly event:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/weekly-events/:id\", async (req, res) => {\n    try {\n      const eventId = req.params.id;\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check permissions\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Check permissions: master admin (only joshuamdelozier@gmail.com) or brewery owner\n      const isMasterAdmin = user.email === 'joshuamdelozier@gmail.com';\n      const isBreweryOwner = user.role === 'brewery_owner';\n      \n      if (!isMasterAdmin && !isBreweryOwner) {\n        return res.status(403).json({ message: \"Not authorized to edit weekly events\" });\n      }\n\n      // Validate the request body\n      const validatedData = insertWeeklyEventSchema.parse(req.body);\n      \n      const updatedEvent = await storage.updateWeeklyEvent(eventId, validatedData);\n      if (!updatedEvent) {\n        return res.status(404).json({ message: \"Weekly event not found\" });\n      }\n      \n      res.json(updatedEvent);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error updating weekly event:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/weekly-events/:id\", async (req, res) => {\n    try {\n      const eventId = req.params.id;\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check permissions\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Check permissions: master admin (only joshuamdelozier@gmail.com) or brewery owner\n      const isMasterAdmin = user.email === 'joshuamdelozier@gmail.com';\n      const isBreweryOwner = user.role === 'brewery_owner';\n      \n      if (!isMasterAdmin && !isBreweryOwner) {\n        return res.status(403).json({ message: \"Not authorized to delete weekly events\" });\n      }\n\n      // Delete the event\n      const success = await storage.deleteWeeklyEvent(eventId);\n      if (!success) {\n        return res.status(404).json({ message: \"Weekly event not found\" });\n      }\n\n      res.json({ message: \"Weekly event deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting weekly event:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Object storage upload endpoint for event images\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error generating upload URL:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/profile-images\", async (req, res) => {\n    try {\n      const { profileImageURL, userId } = req.body;\n      \n      if (!profileImageURL || !userId) {\n        return res.status(400).json({ error: \"profileImageURL and userId are required\" });\n      }\n\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        profileImageURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Profile images should be public\n        },\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting profile image:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Object storage download endpoint for event images\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const { ObjectStorageService, ObjectNotFoundError } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error serving object:\", error);\n      if (error instanceof (await import(\"./objectStorage\")).ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Global settings endpoints\n  app.get(\"/api/global-settings\", async (req, res) => {\n    try {\n      const settings = await storage.getGlobalSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching global settings:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/global-settings/events-header\", async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check admin status\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { headerImageUrl } = req.body;\n      if (!headerImageUrl) {\n        return res.status(400).json({ message: \"Header image URL required\" });\n      }\n\n      await storage.updateGlobalSetting('eventsHeaderImage', headerImageUrl);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating events header:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/global-settings/podcast-banner\", async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check admin status - only joshuamdelozier@gmail.com should be able to do this\n      const user = await storage.getUser(userId);\n      if (!user || user.email !== 'joshuamdelozier@gmail.com') {\n        return res.status(403).json({ message: \"Master admin access required\" });\n      }\n\n      const { bannerImageUrl, bannerLinkUrl } = req.body;\n      if (!bannerImageUrl || !bannerLinkUrl) {\n        return res.status(400).json({ message: \"Banner image URL and link URL required\" });\n      }\n\n      await storage.updateGlobalSetting('podcastBannerImage', bannerImageUrl);\n      await storage.updateGlobalSetting('podcastBannerLink', bannerLinkUrl);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating podcast banner:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/global-settings/events-banner\", async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check admin status - only joshuamdelozier@gmail.com should be able to do this\n      const user = await storage.getUser(userId);\n      if (!user || user.email !== 'joshuamdelozier@gmail.com') {\n        return res.status(403).json({ message: \"Master admin access required\" });\n      }\n\n      const { bannerImageUrl, bannerLinkUrl } = req.body;\n      if (!bannerImageUrl || !bannerLinkUrl) {\n        return res.status(400).json({ message: \"Banner image URL and link URL required\" });\n      }\n\n      await storage.updateGlobalSetting('eventsBannerImage', bannerImageUrl);\n      await storage.updateGlobalSetting('eventsBannerLink', bannerLinkUrl);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating events banner:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/global-settings/leaderboard-header\", async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check admin status - only joshuamdelozier@gmail.com should be able to do this\n      const user = await storage.getUser(userId);\n      if (!user || user.email !== 'joshuamdelozier@gmail.com') {\n        return res.status(403).json({ message: \"Master admin access required\" });\n      }\n\n      const { headerImage } = req.body;\n      if (!headerImage) {\n        return res.status(400).json({ message: \"Header image URL required\" });\n      }\n\n      await storage.updateGlobalSetting('leaderboardHeaderImage', headerImage);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating leaderboard header:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/global-settings/breweries-banner\", async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // Get user to check admin status - only joshuamdelozier@gmail.com should be able to do this\n      const user = await storage.getUser(userId);\n      if (!user || user.email !== 'joshuamdelozier@gmail.com') {\n        return res.status(403).json({ message: \"Master admin access required\" });\n      }\n\n      const { bannerImageUrl, bannerLinkUrl } = req.body;\n      if (!bannerImageUrl || !bannerLinkUrl) {\n        return res.status(400).json({ message: \"Banner image URL and link URL required\" });\n      }\n\n      await storage.updateGlobalSetting('breweriesBannerImage', bannerImageUrl);\n      await storage.updateGlobalSetting('breweriesBannerLink', bannerLinkUrl);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating breweries banner:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/events/:id\", async (req, res) => {\n    try {\n      const event = await storage.getEvent(req.params.id);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      const brewery = await storage.getBrewery(event.breweryId);\n      const eventWithBrewery = {\n        ...event,\n        brewery: brewery ? { name: brewery.name, id: brewery.id } : null\n      };\n      \n      res.json(eventWithBrewery);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Podcast Episodes\n  app.get(\"/api/podcast-episodes\", async (req, res) => {\n    try {\n      const episodes = await storage.getPodcastEpisodes();\n      res.json(episodes);\n    } catch (error) {\n      console.error(\"Error fetching podcast episodes:\", error);\n      res.status(500).json({ message: \"Internal server error\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.post(\"/api/podcast-episodes\", async (req, res) => {\n    try {\n      // Use episode number from request, or calculate if not provided\n      let episodeNumber = req.body.episodeNumber;\n      if (!episodeNumber) {\n        const allEpisodes = await storage.getPodcastEpisodes();\n        episodeNumber = Math.max(...allEpisodes.map(ep => ep.episodeNumber), 0) + 1;\n      }\n      \n      // Validate the request body first\n      const validatedData = insertPodcastEpisodeSchema.parse(req.body);\n      \n      // Add the episode number to the validated data\n      const episodeDataWithNumber = {\n        ...validatedData,\n        episodeNumber: episodeNumber,\n      };\n      \n      const episode = await storage.createPodcastEpisode(episodeDataWithNumber);\n      res.status(201).json(episode);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating podcast episode:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/podcast-episodes/:id\", async (req, res) => {\n    try {\n      // For updates, we need to include episodeNumber if provided\n      const updateSchema = insertPodcastEpisodeSchema.extend({\n        episodeNumber: z.number().optional(),\n      });\n      \n      const validatedData = updateSchema.parse(req.body);\n      const episode = await storage.updatePodcastEpisode(req.params.id, validatedData);\n      if (!episode) {\n        return res.status(404).json({ message: \"Episode not found\" });\n      }\n      res.json(episode);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error updating podcast episode:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/podcast-episodes/:id\", async (req, res) => {\n    try {\n      const success = await storage.deletePodcastEpisode(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Episode not found\" });\n      }\n      res.json({ message: \"Episode deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting podcast episode:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Event image processing endpoint\n  app.put(\"/api/event-images\", async (req, res) => {\n    try {\n      const { imageUrl } = req.body;\n      const userId = req.headers['x-user-id'] as string;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User ID required\" });\n      }\n\n      // For now, just return the imageUrl as the objectPath since we're using a simplified object storage\n      // The image upload was already successful, we just need to normalize the path\n      let objectPath = imageUrl;\n      \n      // If it's a Google Storage URL, normalize it to our object path format\n      if (imageUrl.startsWith(\"https://storage.googleapis.com/\")) {\n        const url = new URL(imageUrl);\n        objectPath = url.pathname;\n      }\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error processing event image:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Global podcast header image\n  app.get(\"/api/podcast/header\", async (req, res) => {\n    try {\n      const headerImage = await storage.getPodcastHeaderImage();\n      res.json({ headerImage });\n    } catch (error) {\n      console.error(\"Error fetching podcast header:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/podcast/header\", async (req, res) => {\n    try {\n      const { headerImage } = req.body;\n      await storage.setPodcastHeaderImage(headerImage);\n      res.json({ message: \"Header image updated successfully\", headerImage });\n    } catch (error) {\n      console.error(\"Error updating podcast header:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Authentication Routes\n  app.post(\"/api/auth/send-code\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email || !email.includes('@')) {\n        return res.status(400).json({ message: \"Valid email is required\" });\n      }\n\n      // Cleanup expired codes before creating new one\n      await storage.cleanupExpiredVerificationCodes();\n      \n      // Generate and send verification code\n      const code = generateVerificationCode();\n      const verificationCode = await storage.createVerificationCode(email, code);\n      \n      const emailSent = await sendVerificationCode(email, code);\n      \n      if (!emailSent) {\n        return res.status(500).json({ message: \"Failed to send verification email\" });\n      }\n\n      res.json({ message: \"Verification code sent to your email\" });\n    } catch (error) {\n      console.error(\"Error sending verification code:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify-code\", async (req, res) => {\n    try {\n      const { email, code } = req.body;\n      \n      if (!email || !code) {\n        return res.status(400).json({ message: \"Email and code are required\" });\n      }\n\n      console.log(`Verifying code for email: ${email}, received code: \"${code}\" (length: ${code.length})`);\n\n      // Check if verification code is valid\n      const validCode = await storage.getValidVerificationCode(email, code.trim());\n      \n      if (!validCode) {\n        return res.status(400).json({ message: \"Invalid or expired verification code\" });\n      }\n\n      // Mark code as used\n      await storage.markVerificationCodeAsUsed(validCode.id);\n\n      // Check if user exists\n      const existingUser = await storage.getUserByEmail(email);\n      \n      if (existingUser) {\n        // Existing user - return user data\n        res.json({ \n          user: existingUser,\n          isNewUser: false \n        });\n      } else {\n        // New user - they need to complete profile\n        res.json({ \n          email,\n          isNewUser: true \n        });\n      }\n    } catch (error) {\n      console.error(\"Error verifying code:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/complete-profile\", async (req, res) => {\n    try {\n      const { email, username, profileImageUrl } = req.body;\n      \n      if (!email || !username) {\n        return res.status(400).json({ message: \"Email and username are required\" });\n      }\n\n      // Check if username is already taken\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username is already taken\" });\n      }\n\n      // Create new user (no name required anymore, just username)\n      const newUser = await storage.createUser({\n        username,\n        name: username, // Use username as display name initially\n        email,\n        location: null,\n        profileImage: profileImageUrl || null,\n        headerImage: null,\n        role: \"user\",\n        checkins: 0,\n        favoriteBreweries: [],\n        latitude: null,\n        longitude: null\n      });\n\n      res.json({ \n        user: newUser,\n        isNewUser: false \n      });\n    } catch (error) {\n      console.error(\"Error completing profile:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to calculate distance between two coordinates\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 3959; // Radius of the Earth in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  const distance = R * c;\n  return Math.round(distance * 10) / 10; // Round to 1 decimal place\n}\n","size_bytes":37790},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Brewery, \n  type InsertBrewery,\n  type CheckIn,\n  type InsertCheckIn,\n  type Event,\n  type InsertEvent,\n  type PodcastEpisode,\n  type InsertPodcastEpisode,\n  type Badge,\n  type InsertBadge,\n  type SpecialEvent,\n  type InsertSpecialEvent,\n  type WeeklyEvent,\n  type InsertWeeklyEvent,\n  type VerificationCode,\n  type InsertVerificationCode,\n  users,\n  breweries,\n  checkIns,\n  events,\n  podcastEpisodes,\n  badges,\n  settings,\n  specialEvents,\n  weeklyEvents,\n  verificationCodes\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { nanoid } from 'nanoid';\n\nasync function loadBreweriesFromCSV(): Promise<Brewery[]> {\n  try {\n    const csvPath = path.join(process.cwd(), 'attached_assets/breweries_rows_1754194005930.csv');\n    console.log('Loading CSV from:', csvPath);\n    if (!fs.existsSync(csvPath)) {\n      console.error('CSV file does not exist at:', csvPath);\n      return [];\n    }\n    const csvContent = fs.readFileSync(csvPath, 'utf-8');\n    \n    // Parse CSV properly handling multi-line quoted fields\n    const records = parseCSVContent(csvContent);\n    console.log(`Total parsed CSV records: ${records.length}`);\n    \n    const breweries = [];\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      const index = i;\n      \n      // Parse brewery data from record with authentic coordinates\n      const name = record.name || '';\n      const address = record.address || '';\n      const hours = record.hours || '';\n      const about = record.about || '';\n      const policies = record.policies || '';\n      const instagram = record.instagram || '';\n      const facebook = record.facebook || '';\n      const x = record.x || '';\n      const tiktok = record.tiktok || '';\n      const threads = record.threads || '';\n      const website = record.website || '';\n      const phone = record.phone || '';\n      const podcastUrl = record.podcast || '';\n      \n      // Use authentic latitude and longitude from CSV\n      const latitude = record.latitude || \"35.4676\"; // Fallback to OKC center\n      const longitude = record.longitude || \"-97.5164\";\n      \n      // Extract city and state from address\n      const addressParts = address.split(',');\n      let city = 'Unknown';\n      let state = 'OK';\n      let zipCode = '';\n      \n      if (addressParts.length >= 2) {\n        const lastPart = addressParts[addressParts.length - 1].trim();\n        const stateZipMatch = lastPart.match(/([A-Z]{2})\\s+(\\d{5})/);\n        if (stateZipMatch) {\n          state = stateZipMatch[1];\n          zipCode = stateZipMatch[2];\n          city = addressParts[addressParts.length - 2]?.trim() || 'Unknown';\n        }\n      }\n      \n      const brewery = {\n        id: (index + 1).toString(),\n        name,\n        address: addressParts[0]?.trim() || address,\n        city,\n        state,\n        zipCode,\n        latitude,\n        longitude,\n        image: record.banner_image_url || null,\n        logo: record.image_url || null,\n        type: \"Craft Brewery\",\n        hours,\n        policies,\n        socialLinks: {\n          facebook: facebook || undefined,\n          instagram: instagram || undefined,\n          website: website || undefined,\n          x: x || undefined,\n          tiktok: tiktok || undefined,\n          threads: threads || undefined,\n        },\n        phone,\n        podcastUrl,\n        photos: [],\n        tapListUrl: null,\n        podcastEpisode: podcastUrl ? `Featured Episode` : null,\n        checkins: Math.floor(Math.random() * 200) + 10,\n        rating: (3.5 + Math.random() * 1.5).toFixed(1),\n        ownerId: null,\n        createdAt: new Date()\n      };\n      \n      if (brewery.name && brewery.name.trim()) {\n        breweries.push(brewery);\n      } else {\n        console.log(`Skipped brewery at index ${i}: name=\"${name}\", record:`, Object.keys(record));\n      }\n    }\n    \n    return breweries;\n  } catch (error) {\n    console.error('Error loading breweries from CSV:', error);\n    console.error('Error details:', error instanceof Error ? error.message : String(error));\n    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace available');\n    return [];\n  }\n}\n\n// Robust CSV parser that handles quoted multi-line fields\nfunction parseCSVContent(csvContent: string): any[] {\n  const records: any[] = [];\n  let position = 0;\n  let currentRow: string[] = [];\n  let insideQuotes = false;\n  let currentField = '';\n  let headers: string[] = [];\n  let isFirstRow = true;\n\n  while (position < csvContent.length) {\n    const char = csvContent[position];\n    \n    if (char === '\"') {\n      if (insideQuotes && csvContent[position + 1] === '\"') {\n        // Handle escaped quotes\n        currentField += '\"';\n        position += 2;\n        continue;\n      } else {\n        insideQuotes = !insideQuotes;\n        position++;\n        continue;\n      }\n    }\n\n    if (!insideQuotes && char === ',') {\n      currentRow.push(currentField.trim());\n      currentField = '';\n    } else if (!insideQuotes && (char === '\\n' || char === '\\r')) {\n      if (currentField || currentRow.length > 0) {\n        currentRow.push(currentField.trim());\n        \n        if (isFirstRow) {\n          headers = currentRow;\n          isFirstRow = false;\n        } else if (currentRow.length === headers.length) {\n          const obj: any = {};\n          headers.forEach((header, index) => {\n            obj[header.trim()] = currentRow[index] || '';\n          });\n          if (obj.name && obj.name.trim()) {\n            records.push(obj);\n          }\n        }\n        \n        currentRow = [];\n        currentField = '';\n      }\n    } else {\n      currentField += char;\n    }\n    \n    position++;\n  }\n\n  // Handle the last field if file doesn't end with newline\n  if (currentField || currentRow.length > 0) {\n    currentRow.push(currentField.trim());\n    if (!isFirstRow && currentRow.length === headers.length) {\n      const obj: any = {};\n      headers.forEach((header, index) => {\n        obj[header.trim()] = currentRow[index] || '';\n      });\n      if (obj.name && obj.name.trim()) {\n        records.push(obj);\n      }\n    }\n  }\n\n  console.log(`Parsed ${records.length} valid brewery records from CSV`);\n  return records;\n}\n\n// Enhanced CSV line parser that properly handles quoted fields with commas and newlines\nfunction parseCSVLine(line: string): string[] {\n  const result: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    const nextChar = line[i + 1];\n    \n    if (char === '\"') {\n      if (inQuotes && nextChar === '\"') {\n        // Handle escaped quotes\n        current += '\"';\n        i++; // Skip next quote\n      } else {\n        inQuotes = !inQuotes;\n      }\n    } else if (char === ',' && !inQuotes) {\n      result.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  result.push(current);\n  return result;\n}\n\n// Get coordinates for Oklahoma cities/locations\nasync function geocodeAddress(address: string): Promise<{lat: string, lng: string}> {\n  // Extract city from address for major Oklahoma cities\n  const cityMap: Record<string, {lat: string, lng: string}> = {\n    'tulsa': { lat: \"36.1540\", lng: \"-95.9928\" },\n    'oklahoma city': { lat: \"35.4676\", lng: \"-97.5164\" },\n    'okc': { lat: \"35.4676\", lng: \"-97.5164\" },\n    'norman': { lat: \"35.2226\", lng: \"-97.4395\" },\n    'broken arrow': { lat: \"36.0526\", lng: \"-95.7969\" },\n    'lawton': { lat: \"34.6036\", lng: \"-98.3959\" },\n    'edmond': { lat: \"35.6528\", lng: \"-97.4781\" },\n    'moore': { lat: \"35.3395\", lng: \"-97.4867\" },\n    'midwest city': { lat: \"35.4495\", lng: \"-97.3967\" },\n    'enid': { lat: \"36.3956\", lng: \"-97.8784\" },\n    'stillwater': { lat: \"36.1156\", lng: \"-97.0594\" },\n    'muskogee': { lat: \"35.7479\", lng: \"-95.3697\" },\n    'bartlesville': { lat: \"36.7473\", lng: \"-95.9808\" },\n    'owasso': { lat: \"36.2695\", lng: \"-95.8547\" },\n    'shawnee': { lat: \"35.3273\", lng: \"-96.9253\" },\n    'ardmore': { lat: \"34.1742\", lng: \"-97.1436\" },\n    'ponca city': { lat: \"36.7063\", lng: \"-97.0859\" },\n    'duncan': { lat: \"34.5023\", lng: \"-97.9578\" },\n    'del city': { lat: \"35.4418\", lng: \"-97.4408\" },\n    'mcalester': { lat: \"34.9332\", lng: \"-95.7697\" },\n    'tahlequah': { lat: \"35.9151\", lng: \"-94.9700\" },\n    'durant': { lat: \"33.9937\", lng: \"-96.3711\" },\n    'bethany': { lat: \"35.5151\", lng: \"-97.6311\" },\n    'ada': { lat: \"34.7745\", lng: \"-96.6783\" },\n    'el reno': { lat: \"35.5323\", lng: \"-97.9551\" },\n    'weatherford': { lat: \"35.5262\", lng: \"-98.7062\" },\n    'yukon': { lat: \"35.5067\", lng: \"-97.7625\" },\n    'claremore': { lat: \"36.3126\", lng: \"-95.6160\" },\n    'chickasha': { lat: \"35.0526\", lng: \"-97.9364\" },\n    'miami': { lat: \"36.8773\", lng: \"-94.8775\" },\n    'altus': { lat: \"34.6381\", lng: \"-99.3340\" },\n    'guymon': { lat: \"36.6828\", lng: \"-101.4816\" },\n    'sand springs': { lat: \"36.1398\", lng: \"-96.1089\" },\n    'poteau': { lat: \"35.0540\", lng: \"-94.6238\" }\n  };\n\n  // Extract city name from address\n  const addressLower = address.toLowerCase();\n  for (const [city, coords] of Object.entries(cityMap)) {\n    if (addressLower.includes(city)) {\n      return coords;\n    }\n  }\n  \n  // Default to Oklahoma City center for unmatched addresses\n  return {\n    lat: \"35.4676\",\n    lng: \"-97.5164\"\n  };\n}\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<User>): Promise<User | undefined>;\n  getLeaderboard(): Promise<User[]>;\n\n  // Breweries\n  getBreweries(): Promise<Brewery[]>;\n  getBrewery(id: string): Promise<Brewery | undefined>;\n  createBrewery(brewery: InsertBrewery): Promise<Brewery>;\n  updateBrewery(id: string, brewery: Partial<Brewery>): Promise<Brewery | undefined>;\n\n  // Check-ins\n  createCheckIn(checkIn: InsertCheckIn): Promise<CheckIn>;\n  getUserCheckIns(userId: string): Promise<CheckIn[]>;\n  getBreweryCheckIns(breweryId: string): Promise<CheckIn[]>;\n  canUserCheckIn(userId: string, breweryId: string): Promise<{ canCheckIn: boolean; timeRemaining?: number }>;\n  getUserLatestCheckInAtBrewery(userId: string, breweryId: string): Promise<CheckIn | null>;\n\n  // Events\n  getEvents(): Promise<Event[]>;\n  getEvent(id: string): Promise<Event | undefined>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  updateEvent(id: string, event: Partial<Event>): Promise<Event | undefined>;\n  deleteEvent(id: string): Promise<boolean>;\n\n  // Podcast Episodes\n  getPodcastEpisodes(): Promise<PodcastEpisode[]>;\n  getPodcastEpisode(id: string): Promise<PodcastEpisode | undefined>;\n  createPodcastEpisode(episode: InsertPodcastEpisode): Promise<PodcastEpisode>;\n  updatePodcastEpisode(id: string, updates: Partial<PodcastEpisode>): Promise<PodcastEpisode | undefined>;\n  deletePodcastEpisode(id: string): Promise<boolean>;\n\n  // Badges\n  getBadges(): Promise<Badge[]>;\n  getUserBadge(userId: string): Promise<Badge | undefined>;\n\n  // Global podcast header image\n  getPodcastHeaderImage(): Promise<string | null>;\n  setPodcastHeaderImage(imageUrl: string): Promise<void>;\n  \n  // Global Settings\n  getGlobalSettings(): Promise<Record<string, any>>;\n  updateGlobalSetting(key: string, value: any): Promise<void>;\n\n  // Verification Codes\n  createVerificationCode(email: string, code: string): Promise<VerificationCode>;\n  getValidVerificationCode(email: string, code: string): Promise<VerificationCode | null>;\n  markVerificationCodeAsUsed(id: string): Promise<void>;\n  cleanupExpiredVerificationCodes(): Promise<void>;\n\n  // Special Events\n  getSpecialEvents(): Promise<SpecialEvent[]>;\n  getSpecialEvent(id: string): Promise<SpecialEvent | undefined>;\n  updateSpecialEvent(id: string, updates: Partial<SpecialEvent>): Promise<SpecialEvent | undefined>;\n\n  // Weekly Events\n  getWeeklyEvents(): Promise<WeeklyEvent[]>;\n  getWeeklyEventsByDay(day: string): Promise<WeeklyEvent[]>;\n  createWeeklyEvent(event: InsertWeeklyEvent): Promise<WeeklyEvent>;\n  updateWeeklyEvent(id: string, updates: Partial<WeeklyEvent>): Promise<WeeklyEvent | undefined>;\n  deleteWeeklyEvent(id: string): Promise<boolean>;\n}\n\n// CSV processing functions\nfunction parseCSV(csvContent: string): any[] {\n  const lines = csvContent.trim().split('\\n');\n  const headers = lines[0].split(',').map(h => h.trim());\n  \n  return lines.slice(1).map(line => {\n    const values = parseCSVLine(line);\n    const user: any = {};\n    \n    headers.forEach((header, index) => {\n      user[header] = values[index] || '';\n    });\n    \n    return user;\n  });\n}\n\n\n\nfunction loadUsersFromCSV(): User[] {\n  try {\n    const csvPath = path.join(process.cwd(), 'attached_assets', 'Users_1754189261860.csv');\n    \n    if (!fs.existsSync(csvPath)) {\n      console.log('CSV file not found, using fallback users');\n      return getFallbackUsers();\n    }\n    \n    const csvContent = fs.readFileSync(csvPath, 'utf-8');\n    const csvUsers = parseCSV(csvContent);\n    \n    // Track used IDs, emails, and usernames to handle duplicates\n    const usedIds = new Set<string>();\n    const usedEmails = new Set<string>();\n    const usedUsernames = new Set<string>();\n    \n    const users = csvUsers\n      .filter(user => user.email && user.username) // Load ALL users from CSV\n      .filter((csvUser, index, array) => {\n        // Filter out duplicate emails - keep first occurrence\n        if (usedEmails.has(csvUser.email)) {\n          return false;\n        }\n        usedEmails.add(csvUser.email);\n        return true;\n      })\n      .map((csvUser, index) => {\n        // Create deterministic ID from email to ensure consistency across restarts\n        let id = csvUser.email.includes('joshuamdelozier') ? \n          'joshuamdelozier' : \n          csvUser.email.split('@')[0].replace(/[^a-zA-Z0-9]/g, '');\n        \n        // Handle duplicate IDs by appending index\n        if (usedIds.has(id)) {\n          id = `${id}_${index}`;\n        }\n        usedIds.add(id);\n        \n        // Handle duplicate usernames by appending suffix\n        let username = csvUser.username;\n        if (usedUsernames.has(username)) {\n          username = `${username}_${index}`;\n        }\n        usedUsernames.add(username);\n        \n        // Handle photo URLs - convert Google Drive and Google Storage URLs properly\n        let profileImage = csvUser.photo;\n        if (profileImage) {\n          if (profileImage.includes('drive.google.com')) {\n            const fileId = profileImage.match(/\\/d\\/([a-zA-Z0-9-_]+)/)?.[1];\n            if (fileId) {\n              profileImage = `https://drive.google.com/uc?id=${fileId}`;\n            }\n          }\n          // Google Storage URLs are already direct URLs, keep them as-is\n        }\n        \n        const checkins = parseInt(csvUser.checkins) || 0;\n        const breweryIds = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n        let favoriteBreweries: string[] = [];\n        \n        // Generate favorites based on check-in count - more check-ins = more favorites\n        if (checkins > 0) {\n          const numFavorites = Math.min(Math.floor(checkins / 30) + 1, 4);\n          const shuffled = [...breweryIds].sort(() => Math.random() - 0.5);\n          favoriteBreweries = shuffled.slice(0, numFavorites);\n        }\n        \n        // Determine role from CSV flags\n        let role = 'user';\n        if (csvUser.master_admin === 'TRUE') {\n          role = 'admin';\n        } else if (csvUser.brewery_owner === 'TRUE') {\n          role = 'brewery_owner';\n        }\n        \n        return {\n          id,\n          email: csvUser.email,\n          username: username,\n          name: username, // Use username as display name\n          profileImage: profileImage || null,\n          headerImage: null, // CSV doesn't have header images\n          location: 'Oklahoma City, OK', // Default location for all users\n          role,\n          checkins,\n          favoriteBreweries,\n          latitude: \"35.4676\", // Default to OKC coordinates\n          longitude: \"-97.5164\",\n          createdAt: new Date()\n        };\n      });\n    \n    console.log(`Loaded ${users.length} authentic users from CSV`);\n    return users;\n  } catch (error) {\n    console.error('Error loading CSV:', error);\n    return getFallbackUsers();\n  }\n}\n\nfunction loadPodcastEpisodesFromCSV(): PodcastEpisode[] {\n  try {\n    const csvPath = path.join(process.cwd(), 'attached_assets', 'Podcast_1754201259440.csv');\n    \n    if (!fs.existsSync(csvPath)) {\n      console.log('Podcast CSV file not found');\n      return [];\n    }\n    \n    const csvContent = fs.readFileSync(csvPath, 'utf-8');\n    const lines = csvContent.trim().split('\\n');\n    \n    console.log('Loading podcast episodes from CSV, found', lines.length - 1, 'episodes');\n    \n    return lines.slice(1).map((line, index) => {\n      try {\n        const values = parseCSVLine(line);\n        \n        // Map CSV columns to our schema\n        const [rowId, episodeNumberRaw, visible, episode, date, guest, brewery, breweryShort, description, listenLink, photo] = values;\n        \n        // Convert Google Drive photo URL to direct image URL if needed\n        let imageUrl = photo || '';\n        if (photo && photo.includes('drive.google.com')) {\n          const fileId = photo.match(/\\/d\\/([a-zA-Z0-9-_]+)/)?.[1];\n          if (fileId) {\n            imageUrl = `https://lh3.googleusercontent.com/d/${fileId}`;\n          }\n        }\n        \n        // Parse episode number\n        const episodeNum = parseInt(episode) || (index + 1);\n        \n        // Parse date safely\n        let releaseDate: Date;\n        try {\n          releaseDate = new Date(date || '2023-01-01');\n          if (isNaN(releaseDate.getTime())) {\n            releaseDate = new Date('2023-01-01');\n          }\n        } catch {\n          releaseDate = new Date('2023-01-01');\n        }\n        \n        const isVisible = visible === 'true';\n        \n        const episode_data = {\n          id: `episode-${episodeNum}`,\n          title: `Episode #${episodeNum}`,\n          description: description || '',\n          episodeNumber: episodeNum,\n          guest: guest || '',\n          business: brewery || '',\n          duration: '60', // Default duration\n          releaseDate: releaseDate,\n          spotifyUrl: listenLink || '',\n          image: imageUrl,\n          createdAt: new Date()\n        };\n        \n        console.log(`Parsed episode ${episodeNum}:`, episode_data.title, 'visible:', isVisible);\n        \n        return { ...episode_data, visible: isVisible };\n      } catch (lineError) {\n        console.error(`Error parsing line ${index + 1}:`, lineError);\n        return null;\n      }\n    }).filter((episode): episode is { visible: boolean; id: string; title: string; description: string; episodeNumber: number; guest: string; business: string; duration: string; releaseDate: Date; spotifyUrl: string; image: string; createdAt: Date; } => episode !== null && episode.visible).map(episode => {\n      // Remove the visible property as it's not part of the schema\n      const { visible, ...episodeData } = episode;\n      return episodeData;\n    });\n  } catch (error) {\n    console.error('Error loading podcast episodes from CSV:', error);\n    return [];\n  }\n}\n\nfunction loadBadgesFromCSV(): Badge[] {\n  try {\n    const csvPath = path.join(process.cwd(), 'attached_assets', 'Badges1_1754190437299.csv');\n    if (!fs.existsSync(csvPath)) {\n      console.log('Badge CSV file not found, using fallback badges');\n      return getFallbackBadges();\n    }\n    \n    const csvContent = fs.readFileSync(csvPath, 'utf-8');\n    const csvBadges = parseCSV(csvContent);\n    \n    const badges = csvBadges\n      .filter(badge => badge.rank && badge.badge_no)\n      .map((csvBadge, index) => {\n        // Convert Google Drive links to direct image URLs  \n        let icon = csvBadge.badge_icon;\n        if (icon && icon.includes('drive.google.com')) {\n          const fileId = icon.match(/\\/d\\/([a-zA-Z0-9-_]+)/)?.[1];\n          if (fileId) {\n            // Use Google's image hosting service for better compatibility\n            icon = `https://lh3.googleusercontent.com/d/${fileId}`;\n          }\n        }\n        \n        // Debug log for first badge\n        if (index === 0) {\n          console.log('Badge image conversion:', { \n            original: csvBadge.badge_icon, \n            converted: icon \n          });\n        }\n        \n        const minCheckins = parseInt(csvBadge.min_checkins) || 0;\n        const maxCheckins = csvBadge.max_checkins ? parseInt(csvBadge.max_checkins) : null;\n        const nextBadgeAt = csvBadge.next_badge_at ? parseInt(csvBadge.next_badge_at) : null;\n        \n        return {\n          id: `badge${index + 1}`,\n          name: csvBadge.rank,\n          description: csvBadge.badge_no,\n          minCheckins,\n          maxCheckins,\n          nextBadgeAt,\n          icon\n        };\n      });\n    \n    console.log(`Loaded ${badges.length} badges from CSV`);\n    return badges;\n  } catch (error) {\n    console.error('Error loading badges CSV:', error);\n    return getFallbackBadges();\n  }\n}\n\nfunction getFallbackBadges(): Badge[] {\n  return [\n    {\n      id: \"1\",\n      name: \"White Hop\",\n      description: \"Badge 1\",\n      minCheckins: 1,\n      maxCheckins: 4,\n      nextBadgeAt: 5,\n      icon: \"🍺\"\n    },\n    {\n      id: \"2\", \n      name: \"Yellow Hop\",\n      description: \"Badge 2\",\n      minCheckins: 5,\n      maxCheckins: 9,\n      nextBadgeAt: 10,\n      icon: \"🏅\"\n    }\n  ];\n}\n\nfunction getFallbackUsers(): User[] {\n  return [\n    {\n      id: \"user1\",\n      username: \"alexthompson\",\n      name: \"Alex Thompson\",\n      email: \"alex@example.com\",\n      profileImage: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      headerImage: null,\n      location: \"Oklahoma City, OK\",\n      role: \"user\",\n      checkins: 24,\n      favoriteBreweries: [\"1\", \"3\", \"5\"],\n      latitude: \"35.4676\",\n      longitude: \"-97.5164\",\n      createdAt: new Date()\n    },\n    {\n      id: \"user2\", \n      username: \"sarahbeer\",\n      name: \"Sarah Beer\",\n      email: \"sarah@example.com\",\n      profileImage: \"https://images.unsplash.com/photo-1494790108755-2616b612b5c5?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      headerImage: null,\n      location: \"Tulsa, OK\",\n      role: \"user\",\n      checkins: 18,\n      favoriteBreweries: [\"2\", \"4\"],\n      latitude: \"36.1540\",\n      longitude: \"-95.9928\",\n      createdAt: new Date()\n    },\n    {\n      id: \"user3\",\n      username: \"mikehops\",\n      name: \"Mike Hops\",\n      email: \"mike@example.com\", \n      profileImage: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      headerImage: null,\n      location: \"Norman, OK\",\n      role: \"user\",\n      checkins: 31,\n      favoriteBreweries: [\"1\", \"6\"],\n      latitude: \"35.2226\",\n      longitude: \"-97.4395\",\n      createdAt: new Date()\n    }\n  ];\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private breweries: Map<string, Brewery>;\n  private checkIns: Map<string, CheckIn>;\n  private events: Map<string, Event>;\n  private podcastEpisodes: Map<string, PodcastEpisode>;\n  private badges: Map<string, Badge>;\n  private specialEvents = new Map<string, SpecialEvent>();\n  private globalSettings = new Map<string, any>();\n  private verificationCodes = new Map<string, VerificationCode>();\n\n  constructor() {\n    this.users = new Map();\n    this.breweries = new Map();\n    this.checkIns = new Map();\n    this.events = new Map();\n    this.podcastEpisodes = new Map();\n    this.badges = new Map();\n    this.specialEvents = new Map();\n    this.globalSettings = new Map();\n    this.verificationCodes = new Map();\n    \n    this.initializeData().catch(console.error);\n  }\n\n  private async initializeData() {\n    // Initialize badges from CSV\n    const badgesList = loadBadgesFromCSV();\n    badgesList.forEach(badge => this.badges.set(badge.id, badge));\n\n    // Initialize breweries from CSV with authentic coordinates - ALL breweries\n    const breweriesList = await loadBreweriesFromCSV();\n    console.log(`Loaded ${breweriesList.length} authentic Oklahoma breweries from CSV`);\n    breweriesList.forEach(brewery => this.breweries.set(brewery.id, brewery));\n\n    // Only authentic brewery data from CSV - no mock data\n\n    // Initialize sample podcast episodes\n    const episodes: PodcastEpisode[] = [\n      {\n        id: \"1\",\n        episodeNumber: 28,\n        title: \"Brewing Excellence with Mike Rodriguez\",\n        guest: \"Mike Rodriguez\",\n        business: \"Golden Gate Brewing\",\n        duration: \"42 min\",\n        releaseDate: new Date(\"2024-03-15\"),\n        spotifyUrl: \"https://open.spotify.com/episode/example1\",\n        image: \"https://images.unsplash.com/photo-1590602847861-f357a9332bbc?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        description: \"Mike Rodriguez discusses the craft brewing process and Golden Gate Brewing's commitment to quality.\",\n        createdAt: new Date()\n      },\n      {\n        id: \"2\", \n        episodeNumber: 27,\n        title: \"Innovation in Craft Beer with Sarah Chen\",\n        guest: \"Sarah Chen\",\n        business: \"Hop Valley Brewing\",\n        duration: \"38 min\",\n        releaseDate: new Date(\"2024-03-08\"),\n        spotifyUrl: \"https://open.spotify.com/episode/example2\",\n        image: \"https://images.unsplash.com/photo-1478737270239-2f02b77fc618?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        description: \"Sarah Chen shares insights on innovative brewing techniques and sustainability in craft beer.\",\n        createdAt: new Date()\n      },\n      {\n        id: \"3\",\n        episodeNumber: 26, \n        title: \"Heritage and Tradition with Tom Wilson\",\n        guest: \"Tom Wilson\",\n        business: \"Anchor Brewing Co.\",\n        duration: \"45 min\",\n        releaseDate: new Date(\"2024-03-01\"),\n        spotifyUrl: \"https://open.spotify.com/episode/example3\",\n        image: \"https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        description: \"Tom Wilson talks about preserving brewing heritage while adapting to modern tastes.\",\n        createdAt: new Date()\n      }\n    ];\n\n    episodes.forEach(episode => this.podcastEpisodes.set(episode.id, episode));\n\n    // Initialize sample events\n    const eventsList: Event[] = [\n      {\n        id: \"1\",\n        name: \"Craft Beer Tasting\",\n        description: \"Join us for an exclusive craft beer tasting featuring our latest seasonal brews. Learn about the brewing process, taste unique flavor profiles, and meet fellow beer enthusiasts. Each ticket includes a flight of 5 beers and artisanal cheese pairings.\",\n        breweryId: \"1\",\n        date: new Date(\"2024-03-22T19:00:00\"),\n        startTime: \"7:00 PM\",\n        endTime: \"9:00 PM\",\n        image: \"https://images.unsplash.com/photo-1571613316887-6f8d5cbf7ef7?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        photos: [\n          \"https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n          \"https://images.unsplash.com/photo-1582037928769-181f2644ecb7?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"\n        ],\n        ticketRequired: true,\n        ticketPrice: \"25.00\",\n        attendees: 24,\n        createdAt: new Date()\n      },\n      {\n        id: \"2\",\n        name: \"Live Music Night\", \n        description: \"Enjoy live acoustic music while sipping on our finest craft beers. Free entry, family-friendly event.\",\n        breweryId: \"2\",\n        date: new Date(\"2024-03-23T20:00:00\"),\n        startTime: \"8:00 PM\",\n        endTime: \"11:00 PM\",\n        image: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        photos: [],\n        ticketRequired: false,\n        ticketPrice: null,\n        attendees: 67,\n        createdAt: new Date()\n      }\n    ];\n\n    eventsList.forEach(event => this.events.set(event.id, event));\n\n    // Initialize users from CSV\n    const csvUsers = loadUsersFromCSV();\n    csvUsers.forEach(user => {\n      this.users.set(user.id, user);\n    });\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      id,\n      username: insertUser.username,\n      email: insertUser.email,\n      name: insertUser.name,\n      location: insertUser.location || null,\n      profileImage: insertUser.profileImage || null,\n      headerImage: insertUser.headerImage || null,\n      role: insertUser.role || \"user\",\n      checkins: insertUser.checkins || 0,\n      favoriteBreweries: (insertUser.favoriteBreweries as string[]) || [],\n      latitude: insertUser.latitude || null,\n      longitude: insertUser.longitude || null,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getLeaderboard(): Promise<User[]> {\n    return Array.from(this.users.values())\n      .filter(user => user.checkins > 0)\n      .sort((a, b) => b.checkins - a.checkins);\n  }\n\n  // Breweries\n  async getBreweries(): Promise<Brewery[]> {\n    // Ensure breweries are loaded from CSV if empty\n    if (this.breweries.size === 0) {\n      console.log('Loading breweries from CSV as they are not initialized yet...');\n      const breweriesList = await loadBreweriesFromCSV();\n      breweriesList.forEach(brewery => this.breweries.set(brewery.id, brewery));\n      console.log(`Loaded ${breweriesList.length} breweries from CSV`);\n    }\n    return Array.from(this.breweries.values());\n  }\n\n  async getBrewery(id: string): Promise<Brewery | undefined> {\n    return this.breweries.get(id);\n  }\n\n  async createBrewery(insertBrewery: InsertBrewery): Promise<Brewery> {\n    const id = randomUUID();\n    const brewery: Brewery = { \n      id,\n      name: insertBrewery.name,\n      address: insertBrewery.address,\n      city: insertBrewery.city,\n      state: insertBrewery.state,\n      zipCode: insertBrewery.zipCode,\n      latitude: insertBrewery.latitude || null,\n      longitude: insertBrewery.longitude || null,\n      image: insertBrewery.image || null,\n      logo: insertBrewery.logo || null,\n      type: insertBrewery.type || \"Craft Brewery\",\n      hours: insertBrewery.hours || null,\n      policies: insertBrewery.policies || null,\n      phone: insertBrewery.phone || null,\n      podcastUrl: insertBrewery.podcastUrl || null,\n      socialLinks: (insertBrewery.socialLinks as any) || {},\n      photos: (insertBrewery.photos as string[]) || [],\n      tapListUrl: insertBrewery.tapListUrl || null,\n      podcastEpisode: insertBrewery.podcastEpisode || null,\n      checkins: insertBrewery.checkins || 0,\n      rating: insertBrewery.rating || \"0.0\",\n      ownerId: insertBrewery.ownerId || null,\n      createdAt: new Date()\n    };\n    this.breweries.set(id, brewery);\n    return brewery;\n  }\n\n  async updateBrewery(id: string, updates: Partial<Brewery>): Promise<Brewery | undefined> {\n    const brewery = this.breweries.get(id);\n    if (!brewery) return undefined;\n    \n    const updatedBrewery = { ...brewery, ...updates };\n    this.breweries.set(id, updatedBrewery);\n    return updatedBrewery;\n  }\n\n  // Check-ins\n  async createCheckIn(insertCheckIn: InsertCheckIn): Promise<CheckIn> {\n    const id = randomUUID();\n    const checkIn: CheckIn = { \n      id,\n      userId: insertCheckIn.userId,\n      breweryId: insertCheckIn.breweryId,\n      notes: insertCheckIn.notes || null,\n      createdAt: new Date()\n    };\n    this.checkIns.set(id, checkIn);\n\n    // Update user check-in count\n    const user = this.users.get(insertCheckIn.userId);\n    if (user) {\n      user.checkins += 1;\n      this.users.set(user.id, user);\n    }\n\n    // Update brewery check-in count\n    const brewery = this.breweries.get(insertCheckIn.breweryId);\n    if (brewery) {\n      brewery.checkins += 1;\n      this.breweries.set(brewery.id, brewery);\n    }\n\n    return checkIn;\n  }\n\n  async getUserCheckIns(userId: string): Promise<CheckIn[]> {\n    return Array.from(this.checkIns.values()).filter(checkIn => checkIn.userId === userId);\n  }\n\n  async getBreweryCheckIns(breweryId: string): Promise<CheckIn[]> {\n    return Array.from(this.checkIns.values()).filter(checkIn => checkIn.breweryId === breweryId);\n  }\n\n  async canUserCheckIn(userId: string, breweryId: string): Promise<{ canCheckIn: boolean; timeRemaining?: number }> {\n    // Check if user has checked in at this brewery in the last 24 hours\n    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    \n    const recentCheckIns = Array.from(this.checkIns.values())\n      .filter(checkIn => \n        checkIn.userId === userId && \n        checkIn.breweryId === breweryId &&\n        checkIn.createdAt >= twentyFourHoursAgo\n      )\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    if (recentCheckIns.length === 0) {\n      return { canCheckIn: true };\n    }\n\n    // Calculate time remaining until next check-in is allowed\n    const lastCheckIn = recentCheckIns[0];\n    const nextAllowedTime = new Date(lastCheckIn.createdAt.getTime() + 24 * 60 * 60 * 1000);\n    const timeRemaining = Math.max(0, nextAllowedTime.getTime() - Date.now());\n\n    return {\n      canCheckIn: false,\n      timeRemaining: Math.ceil(timeRemaining / 1000) // Return seconds remaining\n    };\n  }\n\n  async getUserLatestCheckInAtBrewery(userId: string, breweryId: string): Promise<CheckIn | null> {\n    const userCheckIns = Array.from(this.checkIns.values())\n      .filter(checkIn => checkIn.userId === userId && checkIn.breweryId === breweryId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    return userCheckIns[0] || null;\n  }\n\n  // Events\n  async getEvents(): Promise<Event[]> {\n    return Array.from(this.events.values()).sort((a, b) => a.date.getTime() - b.date.getTime());\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    return this.events.get(id);\n  }\n\n  async createEvent(insertEvent: InsertEvent): Promise<Event> {\n    const id = randomUUID();\n    const event: Event = { \n      id,\n      name: insertEvent.name,\n      description: insertEvent.description,\n      breweryId: insertEvent.breweryId,\n      date: insertEvent.date,\n      startTime: insertEvent.startTime,\n      endTime: insertEvent.endTime,\n      image: insertEvent.image,\n      photos: (insertEvent.photos as string[]) || [],\n      ticketRequired: insertEvent.ticketRequired || false,\n      ticketPrice: insertEvent.ticketPrice || null,\n      attendees: insertEvent.attendees || 0,\n      createdAt: new Date()\n    };\n    this.events.set(id, event);\n    return event;\n  }\n\n  async updateEvent(id: string, updates: Partial<Event>): Promise<Event | undefined> {\n    const event = this.events.get(id);\n    if (!event) return undefined;\n    \n    const updatedEvent = { ...event, ...updates };\n    this.events.set(id, updatedEvent);\n    return updatedEvent;\n  }\n\n  async deleteEvent(id: string): Promise<boolean> {\n    return this.events.delete(id);\n  }\n\n  // Podcast Episodes\n  async getPodcastEpisodes(): Promise<PodcastEpisode[]> {\n    return Array.from(this.podcastEpisodes.values()).sort((a, b) => b.episodeNumber - a.episodeNumber);\n  }\n\n  async getPodcastEpisode(id: string): Promise<PodcastEpisode | undefined> {\n    return this.podcastEpisodes.get(id);\n  }\n\n  async createPodcastEpisode(insertEpisode: InsertPodcastEpisode): Promise<PodcastEpisode> {\n    const id = randomUUID();\n    const episode: PodcastEpisode = { \n      id,\n      episodeNumber: insertEpisode.episodeNumber!,\n      title: insertEpisode.title,\n      guest: insertEpisode.guest,\n      business: insertEpisode.business,\n      duration: insertEpisode.duration,\n      releaseDate: insertEpisode.releaseDate,\n      spotifyUrl: insertEpisode.spotifyUrl,\n      image: insertEpisode.image,\n      description: insertEpisode.description || null,\n      createdAt: new Date()\n    };\n    this.podcastEpisodes.set(id, episode);\n    return episode;\n  }\n\n  async updatePodcastEpisode(id: string, updates: Partial<PodcastEpisode>): Promise<PodcastEpisode | undefined> {\n    const episode = this.podcastEpisodes.get(id);\n    if (!episode) return undefined;\n    \n    const updatedEpisode = { ...episode, ...updates };\n    this.podcastEpisodes.set(id, updatedEpisode);\n    return updatedEpisode;\n  }\n\n  // Badges\n  async getBadges(): Promise<Badge[]> {\n    return Array.from(this.badges.values()).sort((a, b) => a.minCheckins - b.minCheckins);\n  }\n\n  async getUserBadge(userId: string): Promise<Badge | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n    \n    const badges = await this.getBadges();\n    return badges\n      .sort((a, b) => b.minCheckins - a.minCheckins)\n      .find(badge => user.checkins >= badge.minCheckins && \n                    (badge.maxCheckins === null || user.checkins <= badge.maxCheckins));\n  }\n\n  // Global Settings\n  async getGlobalSettings(): Promise<Record<string, any>> {\n    return Object.fromEntries(this.globalSettings.entries());\n  }\n\n  async updateGlobalSetting(key: string, value: any): Promise<void> {\n    this.globalSettings.set(key, value);\n  }\n\n  // Special Events\n  async getSpecialEvents(): Promise<SpecialEvent[]> {\n    const events = await loadSpecialEventsFromCSV();\n    events.forEach(event => this.specialEvents.set(event.id, event));\n    return Array.from(this.specialEvents.values());\n  }\n\n  async getSpecialEvent(id: string): Promise<SpecialEvent | undefined> {\n    return this.specialEvents.get(id);\n  }\n\n  async updateSpecialEvent(id: string, updates: Partial<SpecialEvent>): Promise<SpecialEvent | undefined> {\n    const event = this.specialEvents.get(id);\n    if (!event) return undefined;\n    \n    const updatedEvent = { ...event, ...updates };\n    this.specialEvents.set(id, updatedEvent);\n    return updatedEvent;\n  }\n\n  // Verification Codes\n  async createVerificationCode(email: string, code: string): Promise<VerificationCode> {\n    const id = randomUUID();\n    const verificationCode: VerificationCode = {\n      id,\n      email,\n      code,\n      expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes\n      isUsed: false,\n      createdAt: new Date()\n    };\n    this.verificationCodes.set(id, verificationCode);\n    return verificationCode;\n  }\n\n  async getValidVerificationCode(email: string, code: string): Promise<VerificationCode | null> {\n    const codes = Array.from(this.verificationCodes.values());\n    const validCode = codes.find(c => \n      c.email === email && \n      c.code === code && \n      !c.isUsed && \n      new Date() < c.expiresAt\n    );\n    return validCode || null;\n  }\n\n  async markVerificationCodeAsUsed(id: string): Promise<void> {\n    const code = this.verificationCodes.get(id);\n    if (code) {\n      code.isUsed = true;\n      this.verificationCodes.set(id, code);\n    }\n  }\n\n  async cleanupExpiredVerificationCodes(): Promise<void> {\n    const now = new Date();\n    for (const [id, code] of this.verificationCodes.entries()) {\n      if (code.expiresAt < now) {\n        this.verificationCodes.delete(id);\n      }\n    }\n  }\n}\n\nimport { db } from \"./db\";\nimport { eq, and, gte, lt, desc, sql } from \"drizzle-orm\";\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    let [user] = await db.select().from(users).where(eq(users.id, id));\n    \n    // If user not found, initialize users from CSV\n    if (!user) {\n      await this.initializeUsersIfEmpty();\n      [user] = await db.select().from(users).where(eq(users.id, id));\n    }\n    \n    return user || undefined;\n  }\n\n  private async initializeUsersIfEmpty(): Promise<void> {\n    const existingUsers = await db.select().from(users);\n    if (existingUsers.length === 0) {\n      try {\n        // Load authentic users from CSV\n        const csvUsers = loadUsersFromCSV();\n        \n        if (csvUsers.length > 0) {\n          console.log(`Loading ${csvUsers.length} authentic users from CSV into database`);\n          await db.insert(users).values(csvUsers as any);\n          console.log('Authentic users loaded successfully from CSV');\n        } else {\n          console.log('No users found in CSV');\n        }\n      } catch (error) {\n        console.error('Error loading authentic users from CSV:', error);\n      }\n    } else {\n      console.log(`Database already has ${existingUsers.length} users, skipping CSV load`);\n    }\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values([insertUser])\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getUserCheckIns(userId: string): Promise<CheckIn[]> {\n    return await db.select().from(checkIns).where(eq(checkIns.userId, userId));\n  }\n\n  async createCheckIn(insertCheckIn: InsertCheckIn): Promise<CheckIn> {\n    const [checkIn] = await db\n      .insert(checkIns)\n      .values(insertCheckIn)\n      .returning();\n\n    // Update user check-in count\n    await db\n      .update(users)\n      .set({ checkins: sql`${users.checkins} + 1` })\n      .where(eq(users.id, insertCheckIn.userId));\n\n    // Update brewery check-in count  \n    await db\n      .update(breweries)\n      .set({ checkins: sql`${breweries.checkins} + 1` })\n      .where(eq(breweries.id, insertCheckIn.breweryId));\n\n    return checkIn;\n  }\n\n  async canUserCheckIn(userId: string, breweryId: string): Promise<{ canCheckIn: boolean; timeRemaining?: number }> {\n    // Check if user has checked in at this brewery in the last 24 hours\n    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    \n    const recentCheckIns = await db\n      .select()\n      .from(checkIns)\n      .where(\n        and(\n          eq(checkIns.userId, userId),\n          eq(checkIns.breweryId, breweryId),\n          gte(checkIns.createdAt, twentyFourHoursAgo)\n        )\n      )\n      .orderBy(desc(checkIns.createdAt))\n      .limit(1);\n\n    if (recentCheckIns.length === 0) {\n      return { canCheckIn: true };\n    }\n\n    // Calculate time remaining until next check-in is allowed\n    const lastCheckIn = recentCheckIns[0];\n    const nextAllowedTime = new Date(lastCheckIn.createdAt.getTime() + 24 * 60 * 60 * 1000);\n    const timeRemaining = Math.max(0, nextAllowedTime.getTime() - Date.now());\n\n    return {\n      canCheckIn: false,\n      timeRemaining: Math.ceil(timeRemaining / 1000) // Return seconds remaining\n    };\n  }\n\n  async getUserLatestCheckInAtBrewery(userId: string, breweryId: string): Promise<CheckIn | null> {\n    const [checkIn] = await db\n      .select()\n      .from(checkIns)\n      .where(\n        and(\n          eq(checkIns.userId, userId),\n          eq(checkIns.breweryId, breweryId)\n        )\n      )\n      .orderBy(desc(checkIns.createdAt))\n      .limit(1);\n\n    return checkIn || null;\n  }\n\n  // Add caching to avoid repeated CSV checks\n  private breweriesInitialized = false;\n\n  async getBreweries(): Promise<Brewery[]> {\n    if (!this.breweriesInitialized) {\n      const existingBreweries = await db.select().from(breweries);\n      if (existingBreweries.length === 0) {\n        console.log('Getting breweries...');\n        // Initialize from CSV data\n        const csvBreweries = await loadBreweriesFromCSV();\n        if (csvBreweries.length > 0) {\n          await db.insert(breweries).values(csvBreweries as any);\n          console.log(`Retrieved ${csvBreweries.length} breweries`);\n          this.breweriesInitialized = true;\n          return csvBreweries;\n        }\n      }\n      this.breweriesInitialized = true;\n      console.log(`Retrieved ${existingBreweries.length} breweries`);\n      return existingBreweries;\n    }\n    \n    // Return cached data on subsequent calls\n    return await db.select().from(breweries);\n  }\n\n  async getBrewery(id: string): Promise<Brewery | undefined> {\n    const [brewery] = await db.select().from(breweries).where(eq(breweries.id, id));\n    return brewery || undefined;\n  }\n\n  async createBrewery(insertBrewery: InsertBrewery): Promise<Brewery> {\n    const [brewery] = await db\n      .insert(breweries)\n      .values([insertBrewery])\n      .returning();\n    return brewery;\n  }\n\n  async updateBrewery(id: string, updates: Partial<Brewery>): Promise<Brewery | undefined> {\n    const [brewery] = await db\n      .update(breweries)\n      .set(updates)\n      .where(eq(breweries.id, id))\n      .returning();\n    return brewery || undefined;\n  }\n\n  async getEvents(): Promise<Event[]> {\n    return await db.select().from(events);\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event || undefined;\n  }\n\n  async createEvent(insertEvent: InsertEvent): Promise<Event> {\n    const [event] = await db\n      .insert(events)\n      .values([insertEvent])\n      .returning();\n    return event;\n  }\n\n  // Add caching for podcast episodes\n  private podcastEpisodesInitialized = false;\n\n  async getPodcastEpisodes(): Promise<PodcastEpisode[]> {\n    if (!this.podcastEpisodesInitialized) {\n      const existingEpisodes = await db.select().from(podcastEpisodes);\n      if (existingEpisodes.length === 0) {\n        // Initialize from CSV data\n        const csvEpisodes = loadPodcastEpisodesFromCSV();\n        if (csvEpisodes.length > 0) {\n          await db.insert(podcastEpisodes).values(csvEpisodes as any);\n          this.podcastEpisodesInitialized = true;\n          return csvEpisodes;\n        }\n      }\n      this.podcastEpisodesInitialized = true;\n      return existingEpisodes;\n    }\n    \n    // Return cached data on subsequent calls\n    return await db.select().from(podcastEpisodes);\n  }\n\n  // Add caching for badges\n  private badgesInitialized = false;\n\n  async getBadges(): Promise<Badge[]> {\n    if (!this.badgesInitialized) {\n      const existingBadges = await db.select().from(badges);\n      if (existingBadges.length === 0) {\n        // Initialize from CSV data\n        const csvBadges = loadBadgesFromCSV();\n        if (csvBadges.length > 0) {\n          await db.insert(badges).values(csvBadges);\n          this.badgesInitialized = true;\n          return csvBadges;\n        }\n      }\n      this.badgesInitialized = true;\n      return existingBadges;\n    }\n    \n    // Return cached data on subsequent calls\n    return await db.select().from(badges);\n  }\n\n  async getUserBadge(userId: string): Promise<Badge | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n\n    const badgeList = await this.getBadges();\n    return badgeList.find(badge => \n      user.checkins >= badge.minCheckins && \n      (!badge.maxCheckins || user.checkins <= badge.maxCheckins)\n    );\n  }\n\n  async getLeaderboard(): Promise<User[]> {\n    await this.initializeUsersIfEmpty();\n    // Only show users with at least 100 check-ins, sorted by database, limited to top 100\n    const topUsers = await db\n      .select()\n      .from(users)\n      .where(gte(users.checkins, 100))\n      .orderBy(desc(users.checkins))\n      .limit(100);\n    return topUsers;\n  }\n\n  async getPodcastEpisode(id: string): Promise<PodcastEpisode | undefined> {\n    const [episode] = await db.select().from(podcastEpisodes).where(eq(podcastEpisodes.id, id));\n    return episode || undefined;\n  }\n\n  async createPodcastEpisode(insertEpisode: InsertPodcastEpisode & { episodeNumber: number }): Promise<PodcastEpisode> {\n    const [episode] = await db\n      .insert(podcastEpisodes)\n      .values(insertEpisode)\n      .returning();\n    return episode;\n  }\n\n  async getBreweryCheckIns(breweryId: string): Promise<CheckIn[]> {\n    return await db.select().from(checkIns).where(eq(checkIns.breweryId, breweryId));\n  }\n\n  async updateEvent(id: string, updates: Partial<Event>): Promise<Event | undefined> {\n    const [event] = await db\n      .update(events)\n      .set(updates)\n      .where(eq(events.id, id))\n      .returning();\n    return event || undefined;\n  }\n\n  async deleteEvent(id: string): Promise<boolean> {\n    const result = await db.delete(events).where(eq(events.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async updatePodcastEpisode(id: string, updates: Partial<PodcastEpisode>): Promise<PodcastEpisode | undefined> {\n    const [episode] = await db\n      .update(podcastEpisodes)\n      .set(updates)\n      .where(eq(podcastEpisodes.id, id))\n      .returning();\n    return episode || undefined;\n  }\n\n  async deletePodcastEpisode(id: string): Promise<boolean> {\n    const result = await db.delete(podcastEpisodes).where(eq(podcastEpisodes.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Global podcast header image\n  async getPodcastHeaderImage(): Promise<string | null> {\n    const [setting] = await db.select().from(settings).where(eq(settings.key, 'podcast_header_image'));\n    const headerValue = setting?.value;\n    \n    // Always return a valid header image - never return null for global podcast header\n    if (!headerValue) {\n      // Set a permanent fallback in database if none exists\n      const fallbackUrl = '/objects/uploads/podcast-header-fallback';\n      await this.setPodcastHeaderImage(fallbackUrl);\n      return fallbackUrl;\n    }\n    \n    return headerValue;\n  }\n\n  async setPodcastHeaderImage(imageUrl: string): Promise<void> {\n    await db\n      .insert(settings)\n      .values({\n        key: 'podcast_header_image',\n        value: imageUrl,\n        updatedAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: settings.key,\n        set: {\n          value: imageUrl,\n          updatedAt: new Date(),\n        },\n      });\n  }\n\n  // Special Events\n  async getSpecialEvents(): Promise<SpecialEvent[]> {\n    let existingEvents = await db.select().from(specialEvents);\n    if (existingEvents.length === 0) {\n      // Initialize from CSV data\n      const csvEvents = await loadSpecialEventsFromCSV();\n      if (csvEvents.length > 0) {\n        await db.insert(specialEvents).values(csvEvents);\n        existingEvents = csvEvents;\n      }\n    }\n    return existingEvents;\n  }\n\n  async getSpecialEvent(id: string): Promise<SpecialEvent | undefined> {\n    const [event] = await db.select().from(specialEvents).where(eq(specialEvents.id, id));\n    return event || undefined;\n  }\n\n  async createSpecialEvent(insertEvent: InsertSpecialEvent & { ownerId: string }): Promise<SpecialEvent> {\n    const [event] = await db\n      .insert(specialEvents)\n      .values(insertEvent)\n      .returning();\n    return event;\n  }\n\n  async updateSpecialEvent(id: string, updates: Partial<SpecialEvent>): Promise<SpecialEvent | undefined> {\n    const [event] = await db\n      .update(specialEvents)\n      .set(updates)\n      .where(eq(specialEvents.id, id))\n      .returning();\n    return event || undefined;\n  }\n\n  async deleteSpecialEvent(id: string): Promise<boolean> {\n    const result = await db\n      .delete(specialEvents)\n      .where(eq(specialEvents.id, id));\n    \n    // PostgreSQL returns rowCount, not rowsAffected\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Global Settings\n  async getGlobalSettings(): Promise<Record<string, any>> {\n    const settingsData = await db.select().from(settings);\n    return settingsData.reduce((acc, setting) => {\n      acc[setting.key] = setting.value;\n      return acc;\n    }, {} as Record<string, any>);\n  }\n\n  async updateGlobalSetting(key: string, value: any): Promise<void> {\n    await db.insert(settings)\n      .values({ key, value })\n      .onConflictDoUpdate({\n        target: settings.key,\n        set: { value, updatedAt: new Date() },\n      });\n  }\n\n  // Weekly Events\n  async getWeeklyEvents(): Promise<WeeklyEvent[]> {\n    let existingEvents = await db.select().from(weeklyEvents);\n    if (existingEvents.length === 0) {\n      // Initialize from CSV data\n      const csvEvents = await loadWeeklyEventsFromCSV();\n      if (csvEvents.length > 0) {\n        await db.insert(weeklyEvents).values(csvEvents);\n        existingEvents = await db.select().from(weeklyEvents);\n      }\n    }\n    return existingEvents;\n  }\n\n  async getWeeklyEventsByDay(day: string): Promise<WeeklyEvent[]> {\n    // Ensure the database is populated first\n    await this.getWeeklyEvents();\n    \n    const results = await db\n      .select()\n      .from(weeklyEvents)\n      .where(eq(weeklyEvents.day, day.charAt(0).toUpperCase() + day.slice(1)));\n    return results;\n  }\n\n  async createWeeklyEvent(event: InsertWeeklyEvent): Promise<WeeklyEvent> {\n    const [inserted] = await db\n      .insert(weeklyEvents)\n      .values(event)\n      .returning();\n    return inserted;\n  }\n\n  async updateWeeklyEvent(id: string, updates: Partial<WeeklyEvent>): Promise<WeeklyEvent | undefined> {\n    const [event] = await db\n      .update(weeklyEvents)\n      .set(updates)\n      .where(eq(weeklyEvents.id, id))\n      .returning();\n    return event || undefined;\n  }\n\n  async deleteWeeklyEvent(id: string): Promise<boolean> {\n    const result = await db\n      .delete(weeklyEvents)\n      .where(eq(weeklyEvents.id, id));\n    \n    // PostgreSQL returns rowCount, not rowsAffected\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Verification Codes\n  async createVerificationCode(email: string, code: string): Promise<VerificationCode> {\n    const [verificationCode] = await db\n      .insert(verificationCodes)\n      .values({\n        email,\n        code,\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes\n        isUsed: false\n      })\n      .returning();\n    return verificationCode;\n  }\n\n  async getValidVerificationCode(email: string, code: string): Promise<VerificationCode | null> {\n    console.log(`Looking for verification code: email=${email}, code=${code}`);\n    \n    const [validCode] = await db\n      .select()\n      .from(verificationCodes)\n      .where(\n        and(\n          eq(verificationCodes.email, email),\n          eq(verificationCodes.code, code),\n          eq(verificationCodes.isUsed, false),\n          gte(verificationCodes.expiresAt, new Date())\n        )\n      );\n    \n    console.log(`Found verification code:`, validCode ? `id=${validCode.id}, expires=${validCode.expiresAt}` : 'none');\n    return validCode || null;\n  }\n\n  async markVerificationCodeAsUsed(id: string): Promise<void> {\n    await db\n      .update(verificationCodes)\n      .set({ isUsed: true })\n      .where(eq(verificationCodes.id, id));\n  }\n\n  async cleanupExpiredVerificationCodes(): Promise<void> {\n    await db\n      .delete(verificationCodes)\n      .where(lt(verificationCodes.expiresAt, new Date()));\n  }\n}\n\nfunction parseSpecialEventsCSV(csvContent: string): any[] {\n  const records: any[] = [];\n  let position = 0;\n  let currentRow: string[] = [];\n  let insideQuotes = false;\n  let currentField = '';\n  let headers: string[] = [];\n  let isFirstRow = true;\n\n  while (position < csvContent.length) {\n    const char = csvContent[position];\n    \n    if (char === '\"') {\n      if (insideQuotes && csvContent[position + 1] === '\"') {\n        // Handle escaped quotes\n        currentField += '\"';\n        position += 2;\n        continue;\n      } else {\n        insideQuotes = !insideQuotes;\n        position++;\n        continue;\n      }\n    }\n\n    if (!insideQuotes && char === ',') {\n      currentRow.push(currentField.trim());\n      currentField = '';\n    } else if (!insideQuotes && (char === '\\n' || char === '\\r')) {\n      if (currentField || currentRow.length > 0) {\n        currentRow.push(currentField.trim());\n        \n        if (isFirstRow) {\n          headers = currentRow;\n          isFirstRow = false;\n        } else if (currentRow.length === headers.length) {\n          const obj: any = {};\n          headers.forEach((header, index) => {\n            obj[header.trim()] = currentRow[index] || '';\n          });\n          // Check for Company and Event instead of name for special events\n          if (obj.Company && obj.Event && obj.Company.trim() && obj.Event.trim()) {\n            records.push(obj);\n          }\n        }\n        \n        currentRow = [];\n        currentField = '';\n      }\n    } else {\n      currentField += char;\n    }\n    \n    position++;\n  }\n\n  // Handle the last field if file doesn't end with newline\n  if (currentField || currentRow.length > 0) {\n    currentRow.push(currentField.trim());\n    if (!isFirstRow && currentRow.length === headers.length) {\n      const obj: any = {};\n      headers.forEach((header, index) => {\n        obj[header.trim()] = currentRow[index] || '';\n      });\n      if (obj.Company && obj.Event && obj.Company.trim() && obj.Event.trim()) {\n        records.push(obj);\n      }\n    }\n  }\n\n  console.log(`Parsed ${records.length} valid special event records from CSV`);\n  return records;\n}\n\nasync function loadSpecialEventsFromCSV(): Promise<SpecialEvent[]> {\n  try {\n    const csvPath = path.join(process.cwd(), 'attached_assets/Special Events_1754235280994.csv');\n    if (!fs.existsSync(csvPath)) {\n      console.error('Special events CSV file does not exist at:', csvPath);\n      return [];\n    }\n    const csvContent = fs.readFileSync(csvPath, 'utf-8');\n    \n    // Parse CSV properly handling multi-line quoted fields\n    const records = parseSpecialEventsCSV(csvContent);\n    console.log(`Total parsed special events CSV records: ${records.length}`);\n    \n    const events = [];\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      \n      const specialEvent: InsertSpecialEvent = {\n        company: record.Company || '',\n        event: record.Event || '',\n        details: record.Details || '',\n        time: record.Time || '',\n        date: record.Date || '',\n        address: record.Address || '',\n        taproom: record.Taproom === 'true' || record.Taproom === true,\n        logo: record.Logo || null,\n        location: record.Location || null,\n        rsvpRequired: record['RSVP Required'] === 'true' || record['RSVP Required'] === true,\n        ticketLink: record['Ticket Link'] || null,\n      };\n      \n      events.push(specialEvent);\n    }\n    \n    console.log(`Loaded ${events.length} special events from CSV`);\n    return events;\n  } catch (error) {\n    console.error('Error loading special events from CSV:', error);\n    return [];\n  }\n}\n\nasync function loadWeeklyEventsFromCSV(): Promise<InsertWeeklyEvent[]> {\n  try {\n    const csvPath = path.join(process.cwd(), 'attached_assets/Weekly Events_1754244359224.csv');\n    if (!fs.existsSync(csvPath)) {\n      console.error('Weekly events CSV file does not exist at:', csvPath);\n      return [];\n    }\n    const csvContent = fs.readFileSync(csvPath, 'utf-8');\n    \n    // Parse CSV properly handling multi-line quoted fields\n    const records = parseWeeklyEventsCSV(csvContent);\n    console.log(`Total parsed weekly events CSV records: ${records.length}`);\n    \n    const events: InsertWeeklyEvent[] = [];\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      \n      const weeklyEvent: InsertWeeklyEvent = {\n        day: record.Day || '',\n        brewery: record.Brewery || '',\n        event: record.Event || '',\n        title: record.Title || '',\n        details: record.Details || '',\n        time: record.Time || '',\n        logo: record.Logo || null,\n        eventPhoto: record['Event Photo'] || null,\n        instagram: record.Instagram || null,\n        twitter: record.Twitter || null,\n        facebook: record.Facebook || null,\n        address: record.Address || '',\n      };\n      \n      events.push(weeklyEvent);\n    }\n    \n    console.log(`Loaded ${events.length} weekly events from CSV`);\n    return events;\n  } catch (error) {\n    console.error('Error loading weekly events from CSV:', error);\n    return [];\n  }\n}\n\nfunction parseWeeklyEventsCSV(csvContent: string): any[] {\n  const records: any[] = [];\n  let position = 0;\n  let currentRow: string[] = [];\n  let insideQuotes = false;\n  let currentField = '';\n  let headers: string[] = [];\n  let isFirstRow = true;\n\n  while (position < csvContent.length) {\n    const char = csvContent[position];\n    \n    if (char === '\"') {\n      if (insideQuotes && csvContent[position + 1] === '\"') {\n        // Handle escaped quotes\n        currentField += '\"';\n        position += 2;\n        continue;\n      } else {\n        insideQuotes = !insideQuotes;\n      }\n    } else if (char === ',' && !insideQuotes) {\n      currentRow.push(currentField.trim());\n      currentField = '';\n    } else if ((char === '\\n' || char === '\\r') && !insideQuotes) {\n      if (currentField || currentRow.length > 0) {\n        currentRow.push(currentField.trim());\n        \n        if (isFirstRow) {\n          headers = [...currentRow];\n          isFirstRow = false;\n        } else if (currentRow.length > 0 && currentRow.some(field => field.length > 0)) {\n          const record: any = {};\n          headers.forEach((header, index) => {\n            record[header] = currentRow[index] || '';\n          });\n          records.push(record);\n        }\n        \n        currentRow = [];\n        currentField = '';\n      }\n      \n      // Skip additional newline characters\n      if (char === '\\r' && csvContent[position + 1] === '\\n') {\n        position++;\n      }\n    } else if (char !== '\\r') {\n      currentField += char;\n    }\n    \n    position++;\n  }\n  \n  // Handle the last row if it doesn't end with a newline\n  if (currentField || currentRow.length > 0) {\n    currentRow.push(currentField.trim());\n    if (!isFirstRow && currentRow.length > 0 && currentRow.some(field => field.length > 0)) {\n      const record: any = {};\n      headers.forEach((header, index) => {\n        record[header] = currentRow[index] || '';\n      });\n      records.push(record);\n    }\n  }\n  \n  return records;\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":62909},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, json, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  location: text(\"location\"),\n  profileImage: text(\"profile_image\"),\n  headerImage: text(\"header_image\"),\n  role: text(\"role\").notNull().default(\"user\"), // 'user', 'admin', 'brewery_owner'\n  checkins: integer(\"checkins\").notNull().default(0),\n  favoriteBreweries: json(\"favorite_breweries\").$type<string[]>().notNull().default([]),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const breweries = pgTable(\"breweries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  zipCode: text(\"zip_code\").notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  image: text(\"image\"),\n  logo: text(\"logo\"),\n  type: text(\"type\").notNull().default(\"Craft Brewery\"),\n  hours: text(\"hours\"),\n  policies: text(\"policies\"),\n  socialLinks: json(\"social_links\").$type<{\n    facebook?: string;\n    instagram?: string;\n    website?: string;\n    x?: string;\n    tiktok?: string;\n    threads?: string;\n  }>().notNull().default({}),\n  phone: text(\"phone\"),\n  podcastUrl: text(\"podcast_url\"),\n  photos: json(\"photos\").$type<string[]>().notNull().default([]),\n  tapListUrl: text(\"tap_list_url\"),\n  podcastEpisode: text(\"podcast_episode\"),\n  checkins: integer(\"checkins\").notNull().default(0),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).notNull().default(\"0.0\"),\n  ownerId: varchar(\"owner_id\"),\n  bannerImage: text(\"banner_image\"), // Custom banner image for each brewery\n  bannerLink: text(\"banner_link\"), // Link URL for the banner\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const checkIns = pgTable(\"check_ins\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  breweryId: varchar(\"brewery_id\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  breweryId: varchar(\"brewery_id\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  startTime: text(\"start_time\").notNull(),\n  endTime: text(\"end_time\").notNull(),\n  image: text(\"image\").notNull(),\n  photos: json(\"photos\").$type<string[]>().notNull().default([]),\n  ticketRequired: boolean(\"ticket_required\").notNull().default(false),\n  ticketPrice: decimal(\"ticket_price\", { precision: 8, scale: 2 }),\n  attendees: integer(\"attendees\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const podcastEpisodes = pgTable(\"podcast_episodes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  episodeNumber: integer(\"episode_number\").notNull(),\n  title: text(\"title\").notNull(),\n  guest: text(\"guest\").notNull(),\n  business: text(\"business\").notNull(),\n  duration: text(\"duration\").notNull(),\n  releaseDate: timestamp(\"release_date\").notNull(),\n  spotifyUrl: text(\"spotify_url\").notNull(),\n  image: text(\"image\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const badges = pgTable(\"badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  minCheckins: integer(\"min_checkins\").notNull(),\n  maxCheckins: integer(\"max_checkins\"),\n  nextBadgeAt: integer(\"next_badge_at\"),\n  icon: text(\"icon\").notNull(),\n});\n\nexport const specialEvents = pgTable(\"special_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  company: text(\"company\").notNull(),\n  event: text(\"event\").notNull(),\n  details: text(\"details\").notNull(),\n  time: text(\"time\").notNull(),\n  date: text(\"date\").notNull(),\n  address: text(\"address\").notNull(),\n  taproom: boolean(\"taproom\").notNull().default(false),\n  logo: text(\"logo\"),\n  location: text(\"location\"),\n  rsvpRequired: boolean(\"rsvp_required\").notNull().default(false),\n  ticketLink: text(\"ticket_link\"),\n  ownerId: varchar(\"owner_id\"), // User ID of event owner\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Verification codes for email authentication\nexport const verificationCodes = pgTable(\"verification_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull(),\n  code: text(\"code\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  isUsed: boolean(\"is_used\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Global settings for app configuration\nexport const globalSettings = pgTable(\"global_settings\", {\n  key: text(\"key\").primaryKey(),\n  value: json(\"value\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBrewerySchema = createInsertSchema(breweries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCheckInSchema = createInsertSchema(checkIns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPodcastEpisodeSchema = createInsertSchema(podcastEpisodes).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  releaseDate: z.string().transform(str => {\n    // Parse date as local date to avoid timezone conversion issues\n    const [year, month, day] = str.split('-').map(Number);\n    return new Date(year, month - 1, day);\n  }),\n  episodeNumber: z.number(), // Required field - user should provide episode number\n});\n\nexport const insertBadgeSchema = createInsertSchema(badges).omit({\n  id: true,\n});\n\nexport const insertSpecialEventSchema = createInsertSchema(specialEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVerificationCodeSchema = createInsertSchema(verificationCodes).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Brewery = typeof breweries.$inferSelect;\nexport type InsertBrewery = z.infer<typeof insertBrewerySchema>;\n\nexport type CheckIn = typeof checkIns.$inferSelect;\nexport type InsertCheckIn = z.infer<typeof insertCheckInSchema>;\n\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\n\nexport type PodcastEpisode = typeof podcastEpisodes.$inferSelect;\nexport type InsertPodcastEpisode = z.infer<typeof insertPodcastEpisodeSchema>;\n\nexport type Badge = typeof badges.$inferSelect;\nexport type InsertBadge = z.infer<typeof insertBadgeSchema>;\n\nexport type SpecialEvent = typeof specialEvents.$inferSelect;\nexport type InsertSpecialEvent = z.infer<typeof insertSpecialEventSchema>;\n\nexport type VerificationCode = typeof verificationCodes.$inferSelect;\nexport type InsertVerificationCode = z.infer<typeof insertVerificationCodeSchema>;\n\n// Global settings table for app-wide configuration\nexport const weeklyEvents = pgTable(\"weekly_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  day: text(\"day\").notNull(), // Monday, Tuesday, etc.\n  brewery: text(\"brewery\").notNull(),\n  event: text(\"event\").notNull(),\n  title: text(\"title\").notNull(),\n  details: text(\"details\").notNull(),\n  time: text(\"time\").notNull(),\n  logo: text(\"logo\"),\n  eventPhoto: text(\"event_photo\"),\n  instagram: text(\"instagram\"),\n  twitter: text(\"twitter\"),\n  facebook: text(\"facebook\"),\n  address: text(\"address\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const settings = pgTable(\"settings\", {\n  key: varchar(\"key\").primaryKey(),\n  value: text(\"value\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertWeeklyEventSchema = createInsertSchema(weeklyEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type WeeklyEvent = typeof weeklyEvents.$inferSelect;\nexport type InsertWeeklyEvent = z.infer<typeof insertWeeklyEventSchema>;\nexport type Setting = typeof settings.$inferSelect;\n","size_bytes":8944},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { LocationPermissionDialog } from \"@/components/LocationPermissionDialog\";\nimport { BackButton } from \"@/components/BackButton\";\nimport Welcome from \"@/pages/welcome\";\nimport Profile from \"@/pages/profile\";\nimport Breweries from \"@/pages/breweries\";\nimport BreweryDetail from \"@/pages/brewery-detail\";\nimport Podcast from \"@/pages/podcast\";\nimport Events from \"@/pages/events\";\nimport EventDetail from \"@/pages/event-detail\";\nimport SpecialEventDetail from \"@/pages/special-event-detail\";\nimport WeeklyEventsDay from \"@/pages/weekly-events-day\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport Terms from \"@/pages/terms\";\nimport Privacy from \"@/pages/privacy\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [showLocationDialog, setShowLocationDialog] = useState(false);\n\n  // Show location permission dialog after user authenticates\n  useEffect(() => {\n    if (isAuthenticated && !isLoading && user) {\n      // Check if we've already asked for permission for this specific user\n      const hasAskedForLocation = localStorage.getItem(`location-permission-asked-${user.id}`);\n      if (!hasAskedForLocation) {\n        // Delay showing the dialog slightly to let the user see they've logged in\n        const timer = setTimeout(() => {\n          setShowLocationDialog(true);\n        }, 1000);\n        return () => clearTimeout(timer);\n      }\n    }\n  }, [isAuthenticated, isLoading, user]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-orange-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-amber-600 mx-auto mb-4\"></div>\n          <p className=\"text-amber-700\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show Terms and Privacy pages even when not authenticated\n  return (\n    <div className=\"relative\">\n      <BackButton />\n      <Switch>\n        <Route path=\"/terms\" component={Terms} />\n        <Route path=\"/privacy\" component={Privacy} />\n        {!isAuthenticated ? (\n          <Route path=\"*\" component={Welcome} />\n        ) : (\n          <>\n            <Route path=\"/\" component={Profile} />\n            <Route path=\"/breweries\" component={Breweries} />\n            <Route path=\"/brewery/:id\" component={BreweryDetail} />\n            <Route path=\"/podcast\" component={Podcast} />\n            <Route path=\"/events\" component={Events} />\n            <Route path=\"/event/:id\" component={EventDetail} />\n            <Route path=\"/special-event/:id\" component={SpecialEventDetail} />\n            <Route path=\"/weekly-events/:day\" component={WeeklyEventsDay} />\n            <Route path=\"/leaderboard\" component={Leaderboard} />\n            <Route component={NotFound} />\n          </>\n        )}\n      </Switch>\n      {isAuthenticated && <BottomNavigation />}\n      \n      {/* Location Permission Dialog */}\n      {user && (\n        <LocationPermissionDialog \n          open={showLocationDialog}\n          onOpenChange={(open) => {\n            setShowLocationDialog(open);\n            // Mark that we've asked for permission when dialog is closed\n            if (!open) {\n              localStorage.setItem(`location-permission-asked-${user.id}`, 'true');\n            }\n          }}\n          onPermissionGranted={() => {\n            localStorage.setItem(`location-permission-asked-${user.id}`, 'true');\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4166},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(45, 93%, 47%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Beer/Brewery themed colors */\n  --amber: hsl(45, 93%, 47%);\n  --amber-dark: hsl(45, 93%, 35%);\n  --hops: hsl(72, 96%, 38%);\n  --hops-dark: hsl(72, 96%, 30%);\n  --accent-pink: hsl(312, 100%, 62%);\n  --accent-pink-dark: hsl(312, 100%, 50%);\n  --brown: hsl(30, 67%, 28%);\n  --brown-light: hsl(30, 67%, 45%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(45, 93%, 47%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gray-50 text-foreground;\n  }\n}\n\n@layer utilities {\n  .text-amber {\n    color: var(--amber);\n  }\n  \n  .text-amber-dark {\n    color: var(--amber-dark);\n  }\n  \n  .text-hops {\n    color: var(--hops);\n  }\n  \n  .text-hops-dark {\n    color: var(--hops-dark);\n  }\n  \n  .text-brown {\n    color: var(--brown);\n  }\n  \n  .text-brown-light {\n    color: var(--brown-light);\n  }\n  \n  .bg-amber {\n    background-color: var(--amber);\n  }\n  \n  .bg-amber-dark {\n    background-color: var(--amber-dark);\n  }\n  \n  .bg-hops {\n    background-color: var(--hops);\n  }\n  \n  .bg-hops-dark {\n    background-color: var(--hops-dark);\n  }\n  \n  .bg-brown {\n    background-color: var(--brown);\n  }\n  \n  .bg-brown-light {\n    background-color: var(--brown-light);\n  }\n  \n  .border-amber {\n    border-color: var(--amber);\n  }\n  \n  .border-hops {\n    border-color: var(--hops);\n  }\n  \n  .border-brown {\n    border-color: var(--brown);\n  }\n  \n  .hover\\:bg-amber-dark:hover {\n    background-color: var(--amber-dark);\n  }\n  \n  .hover\\:bg-hops-dark:hover {\n    background-color: var(--hops-dark);\n  }\n  \n  .bg-accent-pink {\n    background-color: var(--accent-pink);\n  }\n  \n  .bg-accent-pink-dark {\n    background-color: var(--accent-pink-dark);\n  }\n  \n  .text-accent-pink {\n    color: var(--accent-pink);\n  }\n  \n  .text-accent-pink-dark {\n    color: var(--accent-pink-dark);\n  }\n  \n  .border-accent-pink {\n    border-color: var(--accent-pink);\n  }\n  \n  .hover\\:bg-accent-pink-dark:hover {\n    background-color: var(--accent-pink-dark);\n  }\n  \n  .mobile-container {\n    @apply max-w-sm mx-auto bg-white min-h-screen shadow-2xl relative overflow-hidden;\n  }\n  \n  .hero-banner {\n    @apply relative h-48 bg-gradient-to-r cursor-pointer;\n  }\n  \n  .hero-overlay {\n    @apply absolute inset-0 bg-gradient-to-t from-black/30 to-transparent;\n  }\n}\n","size_bytes":3753},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/bottom-navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { User, Beer, Headphones, Calendar } from \"lucide-react\";\n\nexport function BottomNavigation() {\n  const [location] = useLocation();\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <nav className=\"fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-sm bg-white border-t border-gray-200 px-6 py-3 z-50\">\n      <div className=\"flex justify-around\">\n        <Link href=\"/\">\n          <button className={`flex flex-col items-center space-y-1 p-2 ${\n            isActive('/') ? 'text-hops' : 'text-gray-600'\n          }`}>\n            <User className=\"w-5 h-5\" />\n            <span className=\"text-xs\">Profile</span>\n          </button>\n        </Link>\n        \n        <Link href=\"/breweries\">\n          <button className={`flex flex-col items-center space-y-1 p-2 ${\n            isActive('/breweries') ? 'text-hops' : 'text-gray-600'\n          }`}>\n            <Beer className=\"w-5 h-5\" />\n            <span className=\"text-xs\">Breweries</span>\n          </button>\n        </Link>\n        \n        <Link href=\"/podcast\">\n          <button className={`flex flex-col items-center space-y-1 p-2 ${\n            isActive('/podcast') ? 'text-hops' : 'text-gray-600'\n          }`}>\n            <Headphones className=\"w-5 h-5\" />\n            <span className=\"text-xs\">Podcast</span>\n          </button>\n        </Link>\n        \n        <Link href=\"/events\">\n          <button className={`flex flex-col items-center space-y-1 p-2 ${\n            isActive('/events') ? 'text-hops' : 'text-gray-600'\n          }`}>\n            <Calendar className=\"w-5 h-5\" />\n            <span className=\"text-xs\">Events</span>\n          </button>\n        </Link>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1751},"client/src/components/edit-profile-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Camera, Settings, ImageIcon } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport defaultHeaderImage from \"@assets/BH Drip_1754199454816.png\";\n\ninterface EditProfileDialogProps {\n  user: User;\n  userId: string;\n}\n\nexport function EditProfileDialog({ user, userId }: EditProfileDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [username, setUsername] = useState(user.username || user.name);\n  const [profileImage, setProfileImage] = useState(user.profileImage || \"\");\n  const [headerImage, setHeaderImage] = useState(user.headerImage || \"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (updates: { username?: string; profileImage?: string; headerImage?: string }) => {\n      const response = await apiRequest(`/api/users/${userId}`, \"PUT\", updates);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));\n        throw new Error(errorData.message || `HTTP ${response.status}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", userId] });\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n      setOpen(false);\n    },\n    onError: (error: Error) => {\n      console.error('Profile update error:', error);\n      toast({\n        title: \"Update failed\",\n        description: error.message.includes('too large') \n          ? \"Image file is too large. Please choose a smaller image.\"\n          : \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const updates: { username?: string; profileImage?: string; headerImage?: string } = {};\n    \n    if (username !== (user.username || user.name)) {\n      updates.username = username;\n    }\n    \n    if (profileImage !== user.profileImage) {\n      updates.profileImage = profileImage || undefined;\n    }\n    \n    if (headerImage !== user.headerImage) {\n      updates.headerImage = headerImage || undefined;\n    }\n    \n    if (Object.keys(updates).length > 0) {\n      updateProfileMutation.mutate(updates);\n    } else {\n      setOpen(false);\n    }\n  };\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // In a real app, you'd upload to a file service\n      // For now, we'll use a placeholder URL\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        if (event.target?.result) {\n          setProfileImage(event.target.result as string);\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"text-white hover:bg-white/20 rounded-full\">\n          <Settings className=\"w-5 h-5\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Edit Profile</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Profile Photo */}\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"relative\">\n              <img \n                src={profileImage || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"} \n                alt=\"Profile\" \n                className=\"w-20 h-20 rounded-full object-cover border-4 border-gray-200\"\n              />\n              <label \n                htmlFor=\"photo-upload\" \n                className=\"absolute bottom-0 right-0 w-8 h-8 bg-hops hover:bg-hops-dark text-white rounded-full flex items-center justify-center cursor-pointer transition-colors\"\n              >\n                <Camera className=\"w-4 h-4\" />\n                <input\n                  id=\"photo-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageChange}\n                  className=\"hidden\"\n                />\n              </label>\n            </div>\n            <p className=\"text-xs text-gray-500 text-center\">\n              Click the camera icon to change your photo\n            </p>\n          </div>\n\n          {/* Username */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"Enter your username\"\n              required\n              minLength={3}\n              maxLength={20}\n            />\n          </div>\n\n          {/* Header Image Upload */}\n          <div className=\"space-y-2\">\n            <Label>Header Image</Label>\n            <div className=\"flex flex-col space-y-3\">\n              <div className=\"w-full h-24 rounded-lg overflow-hidden bg-gray-100\">\n                <img \n                  src={headerImage || defaultHeaderImage} \n                  alt=\"Header preview\" \n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={5242880} // 5MB\n                onGetUploadParameters={async () => {\n                  const response = await apiRequest(\"/api/objects/upload\", \"POST\");\n                  const data = await response.json();\n                  return {\n                    method: \"PUT\" as const,\n                    url: data.uploadURL,\n                  };\n                }}\n                onComplete={(result) => {\n                  if (result.successful && result.successful.length > 0) {\n                    const uploadedFile = result.successful[0];\n                    if (uploadedFile.uploadURL) {\n                      // Normalize the upload URL to object path\n                      apiRequest(\"/api/objects/normalize\", \"POST\", { url: uploadedFile.uploadURL })\n                        .then(res => res.json())\n                        .then(data => setHeaderImage(data.objectPath || uploadedFile.uploadURL || \"\"))\n                        .catch(err => {\n                          console.error(\"Error normalizing path:\", err);\n                          setHeaderImage(uploadedFile.uploadURL);\n                        });\n                    }\n                  }\n                }}\n                buttonClassName=\"w-full bg-[#ff55e1] hover:bg-[#ff55e1]/90 text-white\"\n              >\n                <div className=\"flex items-center gap-2\">\n                  <ImageIcon className=\"w-4 h-4\" />\n                  <span>Upload Header Image</span>\n                </div>\n              </ObjectUploader>\n            </div>\n          </div>\n\n          {/* Profile Image URL (Advanced) */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"profileImage\">Profile Image URL (Optional)</Label>\n            <Input\n              id=\"profileImage\"\n              type=\"url\"\n              value={profileImage}\n              onChange={(e) => setProfileImage(e.target.value)}\n              placeholder=\"https://example.com/your-photo.jpg\"\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setOpen(false)}\n              disabled={updateProfileMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"bg-hops hover:bg-hops-dark text-white\"\n              disabled={updateProfileMutation.isPending}\n            >\n              {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8620},"client/src/hooks/use-location.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface LocationState {\n  latitude: number | null;\n  longitude: number | null;\n  error: string | null;\n  loading: boolean;\n}\n\nexport function useLocation() {\n  const [location, setLocation] = useState<LocationState>({\n    latitude: null,\n    longitude: null,\n    error: null,\n    loading: true,\n  });\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      setLocation({\n        latitude: null,\n        longitude: null,\n        error: 'Geolocation is not supported by this browser.',\n        loading: false,\n      });\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          error: null,\n          loading: false,\n        });\n      },\n      (error) => {\n        let errorMessage = 'An unknown error occurred.';\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = 'User denied the request for Geolocation.';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = 'Location information is unavailable.';\n            break;\n          case error.TIMEOUT:\n            errorMessage = 'The request to get user location timed out.';\n            break;\n        }\n        setLocation({\n          latitude: null,\n          longitude: null,\n          error: errorMessage,\n          loading: false,\n        });\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0,\n      }\n    );\n  }, []);\n\n  return location;\n}\n","size_bytes":1632},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 2 * 60 * 1000, // Cache queries for 2 minutes by default\n      gcTime: 5 * 60 * 1000, // Keep in memory for 5 minutes\n      retry: 1, // Retry once on failure\n      retryDelay: 1000, // Wait 1 second before retry\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1566},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/breweries.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Search, Star, MapPin, Edit, Plus, Upload } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useLocation } from \"@/hooks/use-location\";\nimport { convertGoogleDriveImageUrl } from \"@/lib/imageUtils\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { openSmartLink } from \"@/lib/linkHandler\";\n\nimport type { Brewery } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\n\ninterface BreweryWithDistance extends Brewery {\n  distance?: number;\n}\n\nexport default function Breweries() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isBannerDialogOpen, setIsBannerDialogOpen] = useState(false);\n  const [bannerImageUrl, setBannerImageUrl] = useState(\"\");\n  const [bannerLinkUrl, setBannerLinkUrl] = useState(\"\");\n  const { latitude, longitude } = useLocation();\n  const { user: currentUser } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check if user is master admin\n  const isMasterAdmin = currentUser?.email === 'joshuamdelozier@gmail.com';\n\n  const { data: breweries = [], isLoading } = useQuery<BreweryWithDistance[]>({\n    queryKey: [\"/api/breweries\", { lat: latitude, lng: longitude }],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (latitude && longitude) {\n        params.append('lat', latitude.toString());\n        params.append('lng', longitude.toString());\n      }\n      \n      const response = await fetch(`/api/breweries?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch breweries');\n      }\n      return response.json();\n    },\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n    gcTime: 10 * 60 * 1000, // Keep in memory for 10 minutes\n  });\n\n  // Get global settings for banner\n  const { data: globalSettings } = useQuery({\n    queryKey: [\"/api/global-settings\"],\n    staleTime: 10 * 60 * 1000, // Cache settings for 10 minutes\n    gcTime: 30 * 60 * 1000, // Keep in memory for 30 minutes\n  });\n\n  // Helper function to convert object storage paths to proper URLs\n  const getImageUrl = (imagePath: string): string => {\n    if (!imagePath) return '';\n    \n    // If it's already a full URL, return as is\n    if (imagePath.startsWith('http')) {\n      return imagePath;\n    }\n    \n    // Convert object storage path to accessible URL\n    if (imagePath.startsWith('/') && imagePath.includes('uploads/')) {\n      // Extract the object ID from the path\n      const parts = imagePath.split('/');\n      const objectId = parts[parts.length - 1];\n      return `/objects/uploads/${objectId}`;\n    }\n    \n    return imagePath;\n  };\n\n  // Banner image upload handlers\n  const handleBannerImageUpload = async () => {\n    try {\n      const response = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      throw error;\n    }\n  };\n\n  const handleBannerImageUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadURL = uploadedFile.uploadURL;\n      \n      try {\n        // First normalize the URL\n        const normalizeResponse = await fetch(\"/api/objects/normalize\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ url: uploadURL }),\n        });\n        \n        let finalImagePath = uploadURL || \"\";\n        if (normalizeResponse.ok) {\n          const normalizeData = await normalizeResponse.json();\n          finalImagePath = normalizeData.objectPath || uploadURL || \"\";\n        }\n        \n        setBannerImageUrl(finalImagePath);\n        \n        toast({\n          title: \"Success\",\n          description: \"Banner image uploaded successfully! Don't forget to save.\",\n        });\n      } catch (error) {\n        console.error(\"Error uploading banner image:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to upload banner image. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  // Banner save mutation\n  const saveBannerMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/global-settings/breweries-banner\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-user-id\": currentUser?.id || \"\",\n        },\n        body: JSON.stringify({\n          bannerImageUrl,\n          bannerLinkUrl,\n        }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update banner\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Breweries banner updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/global-settings\"] });\n      setIsBannerDialogOpen(false);\n      setBannerImageUrl(\"\");\n      setBannerLinkUrl(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update banner. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredBreweries = breweries.filter(brewery =>\n    brewery.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    brewery.address.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    brewery.city.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const renderStars = (rating: string) => {\n    const numRating = parseFloat(rating);\n    const fullStars = Math.floor(numRating);\n    const hasHalfStar = numRating % 1 !== 0;\n    \n    return (\n      <div className=\"flex text-amber text-xs\">\n        {[...Array(5)].map((_, i) => (\n          <Star \n            key={i} \n            className={`w-3 h-3 ${\n              i < fullStars ? 'fill-current' : \n              i === fullStars && hasHalfStar ? 'fill-current opacity-50' : \n              'opacity-30'\n            }`} \n          />\n        ))}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"bg-white border-b border-gray-200 sticky top-0 z-20\">\n          <div className=\"px-6 py-4\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Nearby Breweries</h1>\n            <div className=\"relative\">\n              <Input placeholder=\"Search breweries...\" className=\"pl-10\" value=\"\" readOnly />\n              <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n            </div>\n          </div>\n        </div>\n        <div className=\"px-6 py-4 space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"flex\">\n                <div className=\"w-24 h-24 bg-gray-300\"></div>\n                <div className=\"flex-1 p-4 space-y-2\">\n                  <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n                  <div className=\"h-3 bg-gray-300 rounded w-1/4\"></div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container pb-20\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-20\">\n        <div className=\"px-6 py-4\">\n          {/* Breweries Banner Section - Clickable Banner Image (5:1 ratio) - positioned ABOVE the heading */}\n          {(globalSettings as any)?.breweriesBannerImage ? (\n            <div className=\"mb-4 relative\">\n              <div \n                className=\"w-full rounded-lg overflow-hidden shadow-md\"\n                style={{ aspectRatio: '5/1' }}\n              >\n                <img \n                  src={getImageUrl((globalSettings as any).breweriesBannerImage)} \n                  alt=\"Breweries Banner\"\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n              {isMasterAdmin && (\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"absolute top-2 right-2 bg-black/50 text-white border-white/50 hover:bg-white hover:text-black\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    // Pre-populate with current values\n                    setBannerImageUrl((globalSettings as any)?.breweriesBannerImage || \"\");\n                    setBannerLinkUrl((globalSettings as any)?.breweriesBannerLink || \"\");\n                    setIsBannerDialogOpen(true);\n                  }}\n                >\n                  <Edit className=\"w-4 h-4 mr-1\" />\n                  Edit Banner\n                </Button>\n              )}\n            </div>\n          ) : isMasterAdmin ? (\n            <div className=\"mb-4\">\n              <div \n                className=\"w-full border-2 border-dashed border-gray-300 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow flex items-center justify-center cursor-pointer\"\n                style={{ aspectRatio: '5/1' }}\n                onClick={() => {\n                  setBannerImageUrl(\"\");\n                  setBannerLinkUrl(\"\");\n                  setIsBannerDialogOpen(true);\n                }}\n              >\n                <div className=\"text-center text-gray-500\">\n                  <Plus className=\"w-8 h-8 mx-auto mb-2\" />\n                  <p className=\"text-sm\">Add Banner Image</p>\n                </div>\n              </div>\n            </div>\n          ) : null}\n\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Nearby Breweries</h1>\n          \n          {/* Search Box */}\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search breweries...\"\n              className=\"pl-10\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Banner Editor Dialog */}\n      <Dialog open={isBannerDialogOpen} onOpenChange={setIsBannerDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Breweries Banner</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"banner-image\">Banner Image (5:1 ratio recommended)</Label>\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10485760}\n                onGetUploadParameters={handleBannerImageUpload}\n                onComplete={handleBannerImageUploadComplete}\n                buttonClassName=\"w-full mt-2\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Upload Banner Image\n              </ObjectUploader>\n            </div>\n            {bannerImageUrl && (\n              <Button\n                onClick={() => saveBannerMutation.mutate()}\n                disabled={saveBannerMutation.isPending}\n                className=\"w-full\"\n              >\n                {saveBannerMutation.isPending ? \"Saving...\" : \"Save Banner\"}\n              </Button>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Brewery List */}\n      <div className=\"px-6 py-4 space-y-4\">\n        {filteredBreweries.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <MapPin className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n            <p>No breweries found</p>\n            {searchTerm && (\n              <p className=\"text-sm\">Try adjusting your search terms</p>\n            )}\n          </div>\n        ) : (\n          filteredBreweries.map((brewery) => (\n            <Link key={brewery.id} href={`/brewery/${brewery.id}`}>\n              <Card className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer\">\n                <div className=\"flex\">\n                  <img \n                    src={convertGoogleDriveImageUrl(brewery.logo) || `https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200`} \n                    alt={brewery.name} \n                    className=\"w-24 h-24 object-cover\"\n                    onError={(e) => {\n                      e.currentTarget.src = `https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200`;\n                    }}\n                  />\n                  <div className=\"flex-1 p-4\">\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">{brewery.name}</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      {brewery.city}, {brewery.state}\n                    </p>\n                    {brewery.distance && (\n                      <div className=\"text-sm font-medium text-hops mt-1\">\n                        {brewery.distance} mi\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </Card>\n            </Link>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14234},"client/src/pages/brewery-detail.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { convertGoogleDriveImageUrl } from \"@/lib/imageUtils\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { \n  ArrowLeft, \n  Edit, \n  MapPin, \n  Heart, \n  StickyNote, \n  Clock,\n  Phone,\n  Globe,\n  Facebook,\n  Instagram,\n  Headphones,\n  Save,\n  Upload,\n  Plus\n} from \"lucide-react\";\nimport { Link, useParams, useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { openSmartLink } from \"@/lib/linkHandler\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState, useEffect } from \"react\";\nimport type { Brewery, User, CheckIn } from \"@shared/schema\";\nimport defaultBannerImage from \"../assets/default-brewery-banner.jpg\";\n\n\n\n// Calculate distance between two coordinates using Haversine formula\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 3959; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in miles\n}\n\n// Get user's current location\nfunction getCurrentPosition(): Promise<GeolocationPosition> {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Location access is required for check-ins. Please use a browser that supports location services.'));\n      return;\n    }\n    \n    navigator.geolocation.getCurrentPosition(\n      resolve, \n      (error) => {\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            reject(new Error('Please allow location access in your browser settings to check in at breweries.'));\n            break;\n          case error.POSITION_UNAVAILABLE:\n            reject(new Error('Unable to determine your location. Please check your device\\'s location settings.'));\n            break;\n          case error.TIMEOUT:\n            reject(new Error('Location request timed out. Please try again.'));\n            break;\n          default:\n            reject(new Error('Unable to access your location. Please ensure location services are enabled.'));\n            break;\n        }\n      }, \n      {\n        enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 30000\n    });\n  });\n}\n\nexport default function BreweryDetail() {\n  const { id } = useParams<{ id: string }>();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user: currentUser } = useAuth();\n  const [notes, setNotes] = useState(\"\");\n  const [isNotesDialogOpen, setIsNotesDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isBannerDialogOpen, setIsBannerDialogOpen] = useState(false);\n  const [bannerImageUrl, setBannerImageUrl] = useState(\"\");\n  const [bannerLinkUrl, setBannerLinkUrl] = useState(\"\");\n  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | null>(null);\n  const [locationError, setLocationError] = useState<string | null>(null);\n  const [editFormData, setEditFormData] = useState({\n    name: \"\",\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    zipCode: \"\",\n    phone: \"\",\n    hours: \"\",\n    policies: \"\",\n    image: \"\",\n    logo: \"\",\n    website: \"\",\n    facebook: \"\",\n    instagram: \"\",\n    x: \"\",\n    threads: \"\",\n    tiktok: \"\",\n    tapListUrl: \"\"\n  });\n\n  const { data: brewery, isLoading } = useQuery<Brewery>({\n    queryKey: [\"/api/breweries\", id],\n  });\n\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/users\", currentUser?.id],\n    enabled: !!currentUser?.id,\n  });\n\n  // Check if user can check in at this brewery\n  const { data: canCheckInData } = useQuery<{ canCheckIn: boolean; timeRemaining?: number }>({\n    queryKey: [\"/api/checkins/can-checkin\", currentUser?.id, id],\n    enabled: !!id && !!currentUser?.id,\n    refetchInterval: 60000, // Refetch every minute to update countdown\n  });\n\n  const checkInMutation = useMutation({\n    mutationFn: async (breweryId: string) => {\n      const response = await apiRequest(\"/api/checkins\", \"POST\", {\n        userId: currentUser?.id,\n        breweryId,\n        notes: null\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", currentUser?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/breweries\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/checkins/can-checkin\", currentUser?.id, id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard\"] }); // Update leaderboard\n      toast({\n        title: \"Check-in successful!\",\n        description: \"Your brewery visit has been recorded.\",\n      });\n    },\n    onError: (error: any) => {\n      const errorMessage = error.message;\n      if (errorMessage.includes(\"Check-in cooldown active\")) {\n        // Extract friendly time remaining from error\n        const match = errorMessage.match(/(\\d+h \\d+m|\\d+m)/);\n        const timeRemaining = match ? match[0] : \"24 hours\";\n        toast({\n          title: \"Check-in cooldown active\",\n          description: `Please wait ${timeRemaining} before checking in again at this brewery.`,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Check-in failed\",\n          description: \"Something went wrong. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  });\n\n  const favoriteMutation = useMutation({\n    mutationFn: async (breweryId: string) => {\n      const response = await apiRequest(`/api/users/${currentUser?.id}/favorites`, \"PUT\", {\n        breweryId\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", currentUser?.id] });\n      toast({\n        title: \"Favorites updated\",\n        description: \"Your favorite breweries have been updated.\",\n      });\n    }\n  });\n\n  const updateBreweryMutation = useMutation({\n    mutationFn: async (updates: any) => {\n      const response = await apiRequest(`/api/breweries/${id}`, \"PUT\", {\n        ...updates,\n        socialLinks: {\n          website: updates.website || null,\n          facebook: updates.facebook || null,\n          instagram: updates.instagram || null,\n          x: updates.x || null,\n          threads: updates.threads || null,\n          tiktok: updates.tiktok || null\n        }\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Brewery updated!\",\n        description: \"Brewery information has been updated successfully.\",\n      });\n      setIsEditDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/breweries\", id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/breweries\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update brewery. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Helper function to get banner image (default or custom)\n  const getBannerImage = (brewery: Brewery): string => {\n    if (brewery.bannerImage) {\n      // If it's a custom uploaded image (object storage path)\n      if (brewery.bannerImage.startsWith('/objects/')) {\n        return brewery.bannerImage;\n      }\n      // If it's the default asset path\n      if (brewery.bannerImage.startsWith('/assets/')) {\n        return defaultBannerImage;\n      }\n      return brewery.bannerImage;\n    }\n    // Default banner\n    return defaultBannerImage;\n  };\n\n  // Banner image upload handlers\n  const handleBannerImageUpload = async () => {\n    try {\n      const response = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      throw error;\n    }\n  };\n\n  const handleBannerImageUploadComplete = async (result: any) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadURL = uploadedFile.uploadURL;\n      \n      try {\n        // First normalize the URL\n        const normalizeResponse = await fetch(\"/api/objects/normalize\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ url: uploadURL }),\n        });\n        \n        let finalImagePath = uploadURL || \"\";\n        if (normalizeResponse.ok) {\n          const normalizeData = await normalizeResponse.json();\n          finalImagePath = normalizeData.objectPath || uploadURL || \"\";\n        }\n        \n        setBannerImageUrl(finalImagePath);\n        \n        toast({\n          title: \"Success\",\n          description: \"Banner image uploaded successfully! Don't forget to save.\",\n        });\n      } catch (error) {\n        console.error(\"Error uploading banner image:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to upload banner image. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  // Banner save mutation\n  const saveBannerMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/breweries/${id}/banner`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-user-id\": currentUser?.id || \"\",\n        },\n        body: JSON.stringify({\n          bannerImageUrl,\n          bannerLinkUrl,\n        }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update banner\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Brewery banner updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/breweries\", id] });\n      setIsBannerDialogOpen(false);\n      setBannerImageUrl(\"\");\n      setBannerLinkUrl(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update banner. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Get user location on component mount\n  useEffect(() => {\n    const getUserLocation = async () => {\n      try {\n        const position = await getCurrentPosition();\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocationError(null);\n      } catch (error) {\n        console.error('Error getting location:', error);\n        setLocationError(error instanceof Error ? error.message : 'Unable to get location');\n      }\n    };\n\n    getUserLocation();\n  }, []);\n\n  // Function to retry location access\n  const retryLocationAccess = async () => {\n    try {\n      const position = await getCurrentPosition();\n      setUserLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      setLocationError(null);\n      toast({\n        title: \"Location access granted!\",\n        description: \"You can now check in at breweries.\",\n      });\n    } catch (error) {\n      console.error('Error getting location:', error);\n      setLocationError(error instanceof Error ? error.message : 'Unable to get location');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"h-56 bg-gray-300 animate-pulse relative\">\n          <button \n            className=\"absolute top-4 left-4 w-10 h-10 bg-black/30 rounded-full flex items-center justify-center text-white\"\n            onClick={() => navigate(\"/breweries\")}\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </button>\n        </div>\n        <div className=\"px-6 py-6 space-y-4\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-300 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\n            <div className=\"h-20 bg-gray-300 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!brewery) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"flex items-center justify-center h-full\">\n          <p className=\"text-gray-600\">Brewery not found</p>\n        </div>\n      </div>\n    );\n  }\n\n  const isFavorite = user?.favoriteBreweries?.includes(brewery.id) || false;\n\n  return (\n    <div className=\"mobile-container pb-20\">\n      {/* Hero Banner */}\n      <div \n        className=\"relative h-56 bg-cover bg-center\"\n        style={{ \n          backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url('${brewery.image || `https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600`}')`\n        }}\n      >\n        <button \n          className=\"absolute top-4 left-4 w-10 h-10 bg-black/30 rounded-full flex items-center justify-center text-white\"\n          onClick={() => navigate(\"/breweries\")}\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n        </button>\n        \n\n      </div>\n\n      {/* Brewery Logo - Overlapping position like profile photo */}\n      {brewery.logo && (\n        <div className=\"relative -mt-12 mb-3 flex justify-center\">\n          <img \n            src={convertGoogleDriveImageUrl(brewery.logo)} \n            alt={`${brewery.name} logo`}\n            className=\"w-24 h-24 rounded-lg object-cover border-4 border-white shadow-lg bg-white\"\n            onError={(e) => {\n              e.currentTarget.style.display = 'none';\n            }}\n          />\n        </div>\n      )}\n\n      <div className=\"px-6 py-3\">\n        {/* Brewery Header */}\n        <div className=\"flex items-start justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">{brewery.name}</h1>\n            {/* Logo displayed in banner, removed circle image and craft brewery label */}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {/* Edit Button - Only visible for master admin (joshuamdelozier@gmail.com) and brewery owners */}\n            {(currentUser?.email === 'joshuamdelozier@gmail.com' || user?.id === brewery.ownerId) && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"text-gray-600 hover:text-gray-800\"\n                onClick={() => {\n                  if (brewery) {\n                    setEditFormData({\n                      name: brewery.name,\n                      address: brewery.address,\n                      city: brewery.city,\n                      state: brewery.state,\n                      zipCode: brewery.zipCode,\n                      phone: brewery.phone || \"\",\n                      hours: brewery.hours || \"\",\n                      policies: brewery.policies || \"\",\n                      image: brewery.image || \"\",\n                      logo: brewery.logo || \"\",\n                      website: brewery.socialLinks?.website || \"\",\n                      facebook: brewery.socialLinks?.facebook || \"\",\n                      instagram: brewery.socialLinks?.instagram || \"\",\n                      x: brewery.socialLinks?.x || \"\",\n                      threads: brewery.socialLinks?.threads || \"\",\n                      tiktok: brewery.socialLinks?.tiktok || \"\",\n                      tapListUrl: brewery.tapListUrl || \"\"\n                    });\n                    setIsEditDialogOpen(true);\n                  }\n                }}\n              >\n                <Edit className=\"w-4 h-4 mr-1\" />\n                Edit\n              </Button>\n            )}\n            <button \n              className={`p-2 ${isFavorite ? 'text-red-500' : 'text-gray-400'}`}\n              onClick={() => favoriteMutation.mutate(brewery.id)}\n              disabled={favoriteMutation.isPending}\n            >\n              <Heart className={`w-6 h-6 ${isFavorite ? 'fill-current' : ''}`} />\n            </button>\n          </div>\n        </div>\n\n        {/* Brewery Banner - 500x100 positioned between name and check-in button */}\n        {brewery.bannerImage ? (\n          <div className=\"mb-6 relative\">\n            <div \n              className=\"w-full rounded-lg overflow-hidden shadow-md\"\n              style={{ \n                aspectRatio: '5/1', // 500x100 aspect ratio\n                maxHeight: '100px'\n              }}\n            >\n              <img \n                src={getBannerImage(brewery)} \n                alt=\"Brewery Banner\"\n                className=\"w-full h-full object-cover\"\n                onError={(e) => {\n                  // Fallback to default banner\n                  e.currentTarget.src = defaultBannerImage;\n                }}\n              />\n            </div>\n            {currentUser?.email === 'joshuamdelozier@gmail.com' && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"absolute top-2 right-2 bg-black/50 text-white border-white/50 hover:bg-white hover:text-black\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Pre-populate with current values\n                  setBannerImageUrl(brewery.bannerImage || \"\");\n                  setBannerLinkUrl(brewery.bannerLink || \"\");\n                  setIsBannerDialogOpen(true);\n                }}\n              >\n                <Edit className=\"w-4 h-4 mr-1\" />\n                Edit Banner\n              </Button>\n            )}\n          </div>\n        ) : currentUser?.email === 'joshuamdelozier@gmail.com' ? (\n          <div className=\"mb-6\">\n            <div \n              className=\"w-full border-2 border-dashed border-gray-300 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow flex items-center justify-center cursor-pointer\"\n              style={{ \n                aspectRatio: '5/1',\n                maxHeight: '100px'\n              }}\n              onClick={() => {\n                setBannerImageUrl(\"\");\n                setBannerLinkUrl(\"\");\n                setIsBannerDialogOpen(true);\n              }}\n            >\n              <div className=\"text-center text-gray-500\">\n                <Plus className=\"w-6 h-6 mx-auto mb-1\" />\n                <p className=\"text-sm\">Add Banner Ad</p>\n              </div>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Banner Editor Dialog */}\n        <Dialog open={isBannerDialogOpen} onOpenChange={setIsBannerDialogOpen}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit {brewery.name} Banner</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"banner-image\">Banner Image (500x100 recommended)</Label>\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={10485760}\n                  onGetUploadParameters={handleBannerImageUpload}\n                  onComplete={handleBannerImageUploadComplete}\n                  buttonClassName=\"w-full mt-2\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload Banner Image\n                </ObjectUploader>\n              </div>\n              {bannerImageUrl && (\n                <Button\n                  onClick={() => saveBannerMutation.mutate()}\n                  disabled={saveBannerMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {saveBannerMutation.isPending ? \"Saving...\" : \"Save Banner\"}\n                </Button>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Location Error Warning */}\n        {locationError && (\n          <div className=\"mb-4 p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n            <div className=\"flex items-start gap-3\">\n              <MapPin className=\"w-5 h-5 text-amber-600 flex-shrink-0 mt-0.5\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-amber-800 mb-2\">{locationError}</p>\n                <Button \n                  size=\"sm\"\n                  onClick={retryLocationAccess}\n                  className=\"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\"\n                >\n                  Enable Location Access\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"mb-6 space-y-3\">\n          {/* Check In Button - Full Width */}\n          <Button \n            className={`w-full text-white ${\n              canCheckInData?.canCheckIn === false \n                ? \"bg-gray-400 hover:bg-gray-500 cursor-not-allowed\" \n                : \"bg-green-600 hover:bg-green-700\"\n            }`}\n            onClick={() => {\n              if (canCheckInData?.canCheckIn === false) {\n                const hours = Math.floor((canCheckInData.timeRemaining || 0) / 3600);\n                const minutes = Math.floor(((canCheckInData.timeRemaining || 0) % 3600) / 60);\n                const timeRemaining = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n                toast({\n                  description: `Please wait ${timeRemaining} before checking in again.`,\n                  variant: \"destructive\",\n                });\n                return;\n              }\n\n              // Check geolocation before allowing check-in\n              if (!userLocation) {\n                toast({\n                  description: \"Unable to determine your location. Please enable location services and try again.\",\n                  variant: \"destructive\",\n                });\n                return;\n              }\n\n              // Calculate distance between user and brewery\n              const breweryLat = parseFloat(brewery.latitude || '0');\n              const breweryLng = parseFloat(brewery.longitude || '0');\n              const distance = calculateDistance(\n                userLocation.lat, \n                userLocation.lng, \n                breweryLat, \n                breweryLng\n              );\n\n              // Check if user is within 0.1 miles (geofence)\n              if (distance > 0.1) {\n                toast({\n                  description: \"Check in when you arrive\",\n                  variant: \"destructive\",\n                });\n                return;\n              }\n\n              checkInMutation.mutate(brewery.id);\n            }}\n            disabled={checkInMutation.isPending}\n          >\n            <MapPin className=\"w-4 h-4 mr-2\" />\n            {checkInMutation.isPending \n              ? \"Checking in...\" \n              : canCheckInData?.canCheckIn === false \n                ? \"Check In Again Tomorrow\" \n                : \"Check In\"\n            }\n          </Button>\n          \n          {/* Second Row - View Taplist and Take Notes */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            {/* View Taplist Button - Only show if URL exists */}\n            {brewery.tapListUrl ? (\n              <Button \n                className=\"bg-pink-600 hover:bg-pink-700 text-white\"\n                onClick={() => brewery.tapListUrl && openSmartLink(brewery.tapListUrl)}\n              >\n                View Taplist\n              </Button>\n            ) : (\n              <div></div>\n            )}\n            \n            {/* Take Notes Button */}\n            <Dialog open={isNotesDialogOpen} onOpenChange={setIsNotesDialogOpen}>\n              <DialogTrigger asChild>\n                <Button \n                  className=\"text-white hover:opacity-90\"\n                  style={{ backgroundColor: '#004121' }}\n                >\n                  <StickyNote className=\"w-4 h-4 mr-2\" />\n                  Take Notes\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Notes for {brewery.name}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <Textarea\n                    placeholder=\"Add your notes about this brewery...\"\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    className=\"min-h-32\"\n                  />\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setIsNotesDialogOpen(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      className=\"bg-hops hover:bg-hops-dark text-white\"\n                      onClick={() => {\n                        toast({\n                          title: \"Notes saved\",\n                          description: \"Your brewery notes have been saved.\",\n                        });\n                        setIsNotesDialogOpen(false);\n                      }}\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save Notes\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Hours */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-3 flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Hours\n            </h3>\n            <div className=\"text-sm text-gray-600 whitespace-pre-line\">\n              {brewery.hours || \"Hours not available\"}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Address */}\n        <div className=\"mb-6\">\n          <h3 className=\"font-semibold mb-2 flex items-center\">\n            <MapPin className=\"w-4 h-4 mr-2\" />\n            Address\n          </h3>\n          <p className=\"text-gray-600\">\n            {brewery.address}, {brewery.city}, {brewery.state} {brewery.zipCode}\n          </p>\n          <Button \n            variant=\"ghost\" \n            className=\"text-hops text-sm font-medium mt-1 p-0\"\n            onClick={() => {\n              const address = `${brewery.address}, ${brewery.city}, ${brewery.state} ${brewery.zipCode}`;\n              const mapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;\n              openSmartLink(mapsUrl);\n            }}\n          >\n            Get Directions\n          </Button>\n        </div>\n\n        {/* Phone Number */}\n        {brewery.phone && (\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold mb-2 flex items-center\">\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Phone\n            </h3>\n            <p className=\"text-gray-600\">{brewery.phone}</p>\n          </div>\n        )}\n\n        {/* Removed About section as requested */}\n\n        {/* Policies */}\n        {brewery.policies && (\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold mb-2\">Policies</h3>\n            <div className=\"text-sm text-gray-600 whitespace-pre-line\">\n              {brewery.policies}\n            </div>\n          </div>\n        )}\n\n        {/* Social Links - Circular Buttons */}\n        <div className=\"mb-6\">\n          <h3 className=\"font-semibold mb-3\">Connect</h3>\n          <div className=\"flex space-x-4\">\n            {brewery.socialLinks.website && (\n              <button \n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  const url = brewery.socialLinks.website;\n                  if (url) {\n                    console.log('Website button clicked. Opening in same tab:', url);\n                    sessionStorage.setItem('external-nav', 'true');\n                    sessionStorage.setItem('return-url', window.location.href);\n                    \n                    // Create a script to inject back button on external site\n                    const script = document.createElement('script');\n                    script.src = '/external-back-button.js';\n                    document.head.appendChild(script);\n                    \n                    window.location.href = url;\n                  }\n                }}\n                className=\"w-12 h-12 rounded-full bg-hops hover:bg-hops-dark text-white flex items-center justify-center transition-colors\"\n              >\n                <Globe className=\"w-6 h-6\" />\n              </button>\n            )}\n            {brewery.socialLinks.facebook && (\n              <button \n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  const url = brewery.socialLinks.facebook;\n                  if (url) {\n                    console.log('Facebook button clicked. Opening in same tab:', url);\n                    sessionStorage.setItem('external-nav', 'true');\n                    sessionStorage.setItem('return-url', window.location.href);\n                    \n                    // Create a script to inject back button on external site\n                    const script = document.createElement('script');\n                    script.src = '/external-back-button.js';\n                    document.head.appendChild(script);\n                    \n                    window.location.href = url;\n                  }\n                }}\n                className=\"w-12 h-12 rounded-full bg-blue-600 hover:bg-blue-700 text-white flex items-center justify-center transition-colors\"\n              >\n                <Facebook className=\"w-6 h-6\" />\n              </button>\n            )}\n            {brewery.socialLinks.instagram && (\n              <a \n                href={brewery.socialLinks.instagram} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"w-12 h-12 rounded-full bg-pink-600 hover:bg-pink-700 text-white flex items-center justify-center transition-colors\"\n              >\n                <Instagram className=\"w-6 h-6\" />\n              </a>\n            )}\n            {brewery.socialLinks.x && (\n              <a \n                href={brewery.socialLinks.x} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"w-12 h-12 rounded-full bg-gray-600 hover:bg-gray-700 text-white flex items-center justify-center transition-colors\"\n              >\n                <span className=\"font-bold text-lg\">𝕏</span>\n              </a>\n            )}\n            {brewery.socialLinks.tiktok && (\n              <a \n                href={brewery.socialLinks.tiktok} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"w-12 h-12 rounded-full bg-black hover:bg-gray-800 text-white flex items-center justify-center transition-colors\"\n              >\n                <span className=\"font-bold text-sm\">TT</span>\n              </a>\n            )}\n            {brewery.socialLinks.threads && (\n              <a \n                href={brewery.socialLinks.threads} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"w-12 h-12 rounded-full bg-pink-600 hover:bg-pink-700 text-white flex items-center justify-center transition-colors\"\n              >\n                <span className=\"font-bold text-sm\">@</span>\n              </a>\n            )}\n          </div>\n        </div>\n\n\n\n\n\n        {/* Photo Gallery */}\n        {brewery.photos.length > 0 && (\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold mb-3\">Photos</h3>\n            <div className=\"flex space-x-3 overflow-x-auto pb-3\">\n              {brewery.photos.map((photo, index) => (\n                <img \n                  key={index}\n                  src={photo} \n                  alt={`${brewery.name} photo ${index + 1}`}\n                  className=\"w-32 h-24 object-cover rounded-lg flex-shrink-0\"\n                />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Podcast Episode */}\n        {brewery.podcastEpisode && brewery.podcastUrl && (\n          <Card className=\"bg-gradient-to-r from-pink-500 to-pink-600 text-white\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">Beer Hop Podcast</h3>\n                  <p className=\"text-sm opacity-90\">{brewery.podcastEpisode}</p>\n                </div>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  className=\"bg-white/20 hover:bg-white/30 text-white border-none\"\n                  onClick={() => openSmartLink(brewery.podcastUrl!)}\n                >\n                  Listen on Spotify\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Edit Brewery Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Brewery</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                value={editFormData.name}\n                onChange={(e) => setEditFormData({...editFormData, name: e.target.value})}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"address\">Address</Label>\n              <Input\n                id=\"address\"\n                value={editFormData.address}\n                onChange={(e) => setEditFormData({...editFormData, address: e.target.value})}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <Label htmlFor=\"city\">City</Label>\n                <Input\n                  id=\"city\"\n                  value={editFormData.city}\n                  onChange={(e) => setEditFormData({...editFormData, city: e.target.value})}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"zipCode\">Zip Code</Label>\n                <Input\n                  id=\"zipCode\"\n                  value={editFormData.zipCode}\n                  onChange={(e) => setEditFormData({...editFormData, zipCode: e.target.value})}\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"phone\">Phone</Label>\n              <Input\n                id=\"phone\"\n                value={editFormData.phone}\n                onChange={(e) => setEditFormData({...editFormData, phone: e.target.value})}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"hours\">Hours</Label>\n              <Textarea\n                id=\"hours\"\n                value={editFormData.hours}\n                onChange={(e) => setEditFormData({...editFormData, hours: e.target.value})}\n                rows={3}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"policies\">Policies</Label>\n              <Textarea\n                id=\"policies\"\n                value={editFormData.policies}\n                onChange={(e) => setEditFormData({...editFormData, policies: e.target.value})}\n                rows={4}\n                placeholder=\"Enter brewery policies, hours, rules, etc.\"\n              />\n            </div>\n            \n\n            \n            <div>\n              <Label htmlFor=\"tapListUrl\">Tap List URL</Label>\n              <Input\n                id=\"tapListUrl\"\n                value={editFormData.tapListUrl}\n                onChange={(e) => setEditFormData({...editFormData, tapListUrl: e.target.value})}\n                placeholder=\"https://example.com/taplist or embed URL\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"image\">Header Image</Label>\n              <div className=\"space-y-2\">\n                <Input\n                  id=\"image\"\n                  value={editFormData.image}\n                  onChange={(e) => setEditFormData({...editFormData, image: e.target.value})}\n                  placeholder=\"Current image URL or upload new...\"\n                />\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={10485760}\n                  onGetUploadParameters={async () => {\n                    const response = await apiRequest(\"/api/objects/upload\", \"POST\", {});\n                    const data = await response.json();\n                    return {\n                      method: \"PUT\" as const,\n                      url: data.uploadURL,\n                    };\n                  }}\n                  onComplete={async (result) => {\n                    if (result.successful && result.successful[0]) {\n                      const uploadURL = result.successful[0].uploadURL;\n                      try {\n                        // Convert the upload URL to an object path using the objectStorage service\n                        const response = await apiRequest(\"/api/objects/normalize\", \"POST\", { url: uploadURL });\n                        const data = await response.json();\n                        setEditFormData({...editFormData, image: data.objectPath});\n                        toast({\n                          title: \"Header image uploaded!\",\n                          description: \"Your brewery header image has been uploaded successfully.\",\n                        });\n                      } catch (error) {\n                        console.error(\"Error normalizing upload URL:\", error);\n                        // Fallback to direct URL\n                        setEditFormData({...editFormData, image: uploadURL || \"\"});\n                        toast({\n                          title: \"Header image uploaded!\",\n                          description: \"Your brewery header image has been uploaded successfully.\",\n                        });\n                      }\n                    }\n                  }}\n                  buttonClassName=\"w-full bg-hops hover:bg-hops/90 text-white border-0\"\n                >\n                  Upload Header Image\n                </ObjectUploader>\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"logo\">Brewery Logo</Label>\n              <div className=\"space-y-2\">\n                <Input\n                  id=\"logo\"\n                  value={editFormData.logo}\n                  onChange={(e) => setEditFormData({...editFormData, logo: e.target.value})}\n                  placeholder=\"Current logo URL or upload new...\"\n                />\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={10485760}\n                  onGetUploadParameters={async () => {\n                    const response = await apiRequest(\"/api/objects/upload\", \"POST\", {});\n                    const data = await response.json();\n                    return {\n                      method: \"PUT\" as const,\n                      url: data.uploadURL,\n                    };\n                  }}\n                  onComplete={async (result) => {\n                    if (result.successful && result.successful[0]) {\n                      const uploadURL = result.successful[0].uploadURL;\n                      try {\n                        // Convert the upload URL to an object path using the objectStorage service\n                        const response = await apiRequest(\"/api/objects/normalize\", \"POST\", { url: uploadURL });\n                        const data = await response.json();\n                        setEditFormData({...editFormData, logo: data.objectPath});\n                        toast({\n                          title: \"Logo uploaded!\",\n                          description: \"Your brewery logo has been uploaded successfully.\",\n                        });\n                      } catch (error) {\n                        console.error(\"Error normalizing upload URL:\", error);\n                        // Fallback to direct URL\n                        setEditFormData({...editFormData, logo: uploadURL || \"\"});\n                        toast({\n                          title: \"Logo uploaded!\",\n                          description: \"Your brewery logo has been uploaded successfully.\",\n                        });\n                      }\n                    }\n                  }}\n                  buttonClassName=\"w-full bg-hops hover:bg-hops/90 text-white border-0\"\n                >\n                  Upload Logo\n                </ObjectUploader>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <Label className=\"text-base font-semibold\">Social Media Links</Label>\n              \n              <div>\n                <Label htmlFor=\"website\">Website</Label>\n                <Input\n                  id=\"website\"\n                  value={editFormData.website}\n                  onChange={(e) => setEditFormData({...editFormData, website: e.target.value})}\n                  placeholder=\"https://brewery-website.com\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"facebook\">Facebook</Label>\n                <Input\n                  id=\"facebook\"\n                  value={editFormData.facebook}\n                  onChange={(e) => setEditFormData({...editFormData, facebook: e.target.value})}\n                  placeholder=\"https://facebook.com/brewery\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"instagram\">Instagram</Label>\n                <Input\n                  id=\"instagram\"\n                  value={editFormData.instagram}\n                  onChange={(e) => setEditFormData({...editFormData, instagram: e.target.value})}\n                  placeholder=\"https://instagram.com/brewery\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"x\">X (Twitter)</Label>\n                <Input\n                  id=\"x\"\n                  value={editFormData.x}\n                  onChange={(e) => setEditFormData({...editFormData, x: e.target.value})}\n                  placeholder=\"https://x.com/brewery\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"threads\">Threads</Label>\n                <Input\n                  id=\"threads\"\n                  value={editFormData.threads}\n                  onChange={(e) => setEditFormData({...editFormData, threads: e.target.value})}\n                  placeholder=\"https://threads.net/@brewery\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"tiktok\">TikTok</Label>\n                <Input\n                  id=\"tiktok\"\n                  value={editFormData.tiktok}\n                  onChange={(e) => setEditFormData({...editFormData, tiktok: e.target.value})}\n                  placeholder=\"https://tiktok.com/@brewery\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsEditDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={() => updateBreweryMutation.mutate(editFormData)}\n                disabled={updateBreweryMutation.isPending}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                {updateBreweryMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":44954},"client/src/pages/event-detail.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, Edit, Calendar, Clock, Ticket, Users } from \"lucide-react\";\nimport { useParams, useLocation } from \"wouter\";\nimport type { Event } from \"@shared/schema\";\n\ninterface EventWithBrewery extends Event {\n  brewery: {\n    name: string;\n    id: string;\n  } | null;\n}\n\nexport default function EventDetail() {\n  const { id } = useParams<{ id: string }>();\n  const [, navigate] = useLocation();\n\n  const { data: event, isLoading } = useQuery<EventWithBrewery>({\n    queryKey: [\"/api/events\", id],\n  });\n\n  const formatEventDate = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric'\n    }).format(new Date(date));\n  };\n\n  const handleBuyTickets = () => {\n    // Mock ticket purchasing flow\n    alert('Redirecting to ticket purchase...');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"h-64 bg-gray-300 animate-pulse relative\">\n          <button \n            className=\"absolute top-4 left-4 w-10 h-10 bg-black/30 rounded-full flex items-center justify-center text-white\"\n            onClick={() => navigate(\"/events\")}\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </button>\n        </div>\n        <div className=\"px-6 py-6 space-y-4\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-300 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\n            <div className=\"h-20 bg-gray-300 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!event) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"flex items-center justify-center h-full\">\n          <p className=\"text-gray-600\">Event not found</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container pb-20\">\n      <div className=\"relative\">\n        {/* Full Size Event Image */}\n        <div \n          className=\"h-64 bg-cover bg-center relative\"\n          style={{ \n            backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url('${event.image}')`\n          }}\n        >\n          <button \n            className=\"absolute top-4 left-4 w-10 h-10 bg-black/30 rounded-full flex items-center justify-center text-white\"\n            onClick={() => navigate(\"/events\")}\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </button>\n          \n          <div className=\"absolute bottom-4 left-4 text-white\">\n            <h1 className=\"text-2xl font-bold\">{event.name}</h1>\n            <p className=\"text-amber-200\">{event.brewery?.name}</p>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-6\">\n          {/* Event Details */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <div className=\"flex items-center text-gray-600\">\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                <span>{formatEventDate(event.date)}</span>\n              </div>\n              <div className=\"flex items-center text-gray-600\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                <span>{event.startTime} - {event.endTime}</span>\n              </div>\n            </div>\n\n            <Card className=\"mb-4 border-amber bg-amber/5\">\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold text-amber-dark mb-2\">Event Description</h3>\n                <p className=\"text-amber-dark text-sm\">\n                  {event.description}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Ticket Button */}\n            {event.ticketRequired && (\n              <Button \n                className=\"w-full bg-amber hover:bg-amber-dark text-white py-4 text-lg mb-6\"\n                onClick={handleBuyTickets}\n              >\n                <Ticket className=\"w-5 h-5 mr-2\" />\n                Buy Tickets - ${event.ticketPrice}\n              </Button>\n            )}\n\n            {/* Extra Photos */}\n            {event.photos.length > 0 && (\n              <div className=\"mb-6\">\n                <h3 className=\"font-semibold mb-3\">Event Photos</h3>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {event.photos.map((photo, index) => (\n                    <img \n                      key={index}\n                      src={photo} \n                      alt={`Event photo ${index + 1}`}\n                      className=\"w-full h-24 object-cover rounded-lg\"\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Attendees */}\n            <Card className=\"bg-gray-50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <h3 className=\"font-semibold\">Attendees</h3>\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Users className=\"w-4 h-4 mr-1\" />\n                    <span>{event.attendees} people attending</span>\n                  </div>\n                </div>\n                \n                {/* Sample attendee avatars */}\n                <div className=\"flex -space-x-2\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=40&h=40\" \n                    alt=\"Attendee\" \n                    className=\"w-8 h-8 rounded-full border-2 border-white object-cover\"\n                  />\n                  <img \n                    src=\"https://images.unsplash.com/photo-1494790108755-2616b612b47c?ixlib=rb-4.0.3&auto=format&fit=crop&w=40&h=40\" \n                    alt=\"Attendee\" \n                    className=\"w-8 h-8 rounded-full border-2 border-white object-cover\"\n                  />\n                  <img \n                    src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=40&h=40\" \n                    alt=\"Attendee\" \n                    className=\"w-8 h-8 rounded-full border-2 border-white object-cover\"\n                  />\n                  <div className=\"w-8 h-8 bg-gray-300 rounded-full border-2 border-white flex items-center justify-center text-xs font-medium text-gray-600\">\n                    +{Math.max(0, event.attendees - 3)}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6725},"client/src/pages/events.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calendar, Clock, MapPin, Users, ExternalLink, Edit, Plus, Upload } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { CreateSpecialEventModal } from \"@/components/CreateSpecialEventModal\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { openSmartLink } from \"@/lib/linkHandler\";\n\nimport type { Event, SpecialEvent } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\n\n// Helper function to format date from YYYY-MM-DD to \"Month Day, Year\"\nfunction formatEventDate(dateString: string): string {\n  // If already in the correct format (contains comma and year), return as is\n  if (dateString.includes(',') && dateString.includes('20')) {\n    return dateString;\n  }\n  \n  // Parse the date string as YYYY-MM-DD without timezone issues\n  if (dateString.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n    const [year, month, day] = dateString.split('-').map(Number);\n    \n    const monthNames = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    \n    return `${monthNames[month - 1]} ${day}, ${year}`;\n  }\n  \n  return dateString;\n}\n\n// Helper function to convert object storage paths to proper URLs\nfunction getImageUrl(imagePath: string): string {\n  if (!imagePath) return '';\n  \n  // If it's already a full URL, return as is\n  if (imagePath.startsWith('http')) {\n    return imagePath;\n  }\n  \n  // Convert object storage path to accessible URL\n  if (imagePath.startsWith('/') && imagePath.includes('uploads/')) {\n    // Extract the object ID from the path\n    const parts = imagePath.split('/');\n    const objectId = parts[parts.length - 1];\n    return `/objects/uploads/${objectId}`;\n  }\n  \n  return imagePath;\n}\n\ninterface EventWithBrewery extends Event {\n  brewery: {\n    name: string;\n    id: string;\n  } | null;\n}\n\nexport default function Events() {\n  const [selectedTab, setSelectedTab] = useState<\"special\" | \"weekly\">(\"special\");\n  const [showHeaderEdit, setShowHeaderEdit] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [isBannerDialogOpen, setIsBannerDialogOpen] = useState(false);\n  const [bannerImageUrl, setBannerImageUrl] = useState(\"\");\n  const [bannerLinkUrl, setBannerLinkUrl] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user: currentUser } = useAuth();\n  \n  const { data: events = [], isLoading } = useQuery<EventWithBrewery[]>({\n    queryKey: [\"/api/events\"],\n  });\n\n  const { data: specialEvents = [], isLoading: isLoadingSpecial } = useQuery<SpecialEvent[]>({\n    queryKey: [\"/api/special-events\"],\n  });\n\n  // Get header image from global settings\n  const { data: globalSettings } = useQuery({\n    queryKey: [\"/api/global-settings\"],\n  });\n\n  // Check if current authenticated user is master admin\n  // No need for additional query - we use the authenticated user from useAuth\n\n  // Sort special events chronologically (earliest first)\n  const sortedSpecialEvents = [...specialEvents].sort((a, b) => {\n    const dateA = new Date(a.date);\n    const dateB = new Date(b.date);\n    return dateA.getTime() - dateB.getTime();\n  });\n\n  const formatEventDate = (dateString: string): string => {\n    // If already in the correct format (contains comma and year), return as is\n    if (dateString.includes(',') && dateString.includes('20')) {\n      return dateString;\n    }\n    \n    // Parse the date string as YYYY-MM-DD without timezone issues\n    if (dateString.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n      const [year, month, day] = dateString.split('-').map(Number);\n      \n      const monthNames = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n      ];\n      \n      return `${monthNames[month - 1]} ${day}, ${year}`;\n    }\n    \n    return dateString;\n  };\n\n  // Check if user is master admin (only joshuamdelozier@gmail.com) or brewery owner\n  const isMasterAdmin = currentUser?.email === 'joshuamdelozier@gmail.com';\n  const isBreweryOwner = currentUser?.role === 'brewery_owner';\n  const canCreateEvents = isMasterAdmin || isBreweryOwner;\n\n  // Header image upload functions\n  const handleGetUploadParameters = async () => {\n    const response = await fetch('/api/objects/upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    const data = await response.json();\n    return {\n      method: 'PUT' as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const headerUpdateMutation = useMutation({\n    mutationFn: async (headerImageUrl: string) => {\n      const response = await fetch('/api/global-settings/events-header', {\n        method: 'PUT',\n        headers: {\n          'x-user-id': 'joshuamdelozier',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ headerImageUrl }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update header');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/global-settings\"] });\n      toast({\n        title: \"Header updated\",\n        description: \"Events header image has been updated for all users.\",\n      });\n      setShowHeaderEdit(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Failed to update header image.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Banner image upload handlers\n  const handleBannerImageUpload = async () => {\n    try {\n      const response = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      throw error;\n    }\n  };\n\n  const handleBannerImageUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadURL = uploadedFile.uploadURL;\n      \n      try {\n        // First normalize the URL\n        const normalizeResponse = await fetch(\"/api/objects/normalize\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ url: uploadURL }),\n        });\n        \n        let finalImagePath = uploadURL || \"\";\n        if (normalizeResponse.ok) {\n          const normalizeData = await normalizeResponse.json();\n          finalImagePath = normalizeData.objectPath || uploadURL || \"\";\n        }\n        \n        setBannerImageUrl(finalImagePath);\n        \n        toast({\n          title: \"Success\",\n          description: \"Banner image uploaded successfully! Don't forget to add a link URL and save.\",\n        });\n      } catch (error) {\n        console.error(\"Error uploading banner image:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to upload banner image. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  // Banner save mutation\n  const saveBannerMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/global-settings/events-banner\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-user-id\": currentUser?.id || \"\",\n        },\n        body: JSON.stringify({\n          bannerImageUrl,\n          bannerLinkUrl,\n        }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update banner\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Events banner updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/global-settings\"] });\n      setIsBannerDialogOpen(false);\n      setBannerImageUrl(\"\");\n      setBannerLinkUrl(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update banner. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      if (uploadedFile.uploadURL) {\n        // Convert the upload URL to an object path\n        const objectPath = convertUploadUrlToObjectPath(uploadedFile.uploadURL);\n        headerUpdateMutation.mutate(objectPath);\n      }\n    }\n  };\n\n\n\n  const convertUploadUrlToObjectPath = (uploadUrl: string): string => {\n    try {\n      const url = new URL(uploadUrl);\n      const pathParts = url.pathname.split('/');\n      const objectId = pathParts[pathParts.length - 1];\n      return `/objects/uploads/${objectId}`;\n    } catch (error) {\n      return uploadUrl;\n    }\n  };\n\n  // Get the header image from global settings only (no default fallback)\n  const headerImageUrl = (globalSettings as any)?.eventsHeaderImage;\n\n  if (isLoading || isLoadingSpecial) {\n    return (\n      <div className=\"mobile-container\">\n        {/* Header image without text overlay - only show if headerImageUrl exists */}\n        {headerImageUrl && (\n          <div className=\"relative\">\n            <div \n              className=\"w-full h-48\"\n              style={{\n                backgroundImage: `url('${headerImageUrl}')`,\n                backgroundSize: 'cover',\n                backgroundPosition: 'center'\n              }}\n            />\n            {isMasterAdmin && (\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                className=\"absolute top-2 right-2 bg-white/90 hover:bg-white\"\n                onClick={() => setShowHeaderEdit(!showHeaderEdit)}\n              >\n                <Edit className=\"w-4 h-4 mr-1\" />\n                Edit Header\n              </Button>\n            )}\n            \n            {showHeaderEdit && isMasterAdmin && (\n              <div className=\"absolute top-12 right-2 bg-white rounded-lg shadow-lg p-4 min-w-48\">\n                <h3 className=\"font-semibold mb-2\">Update Header Image</h3>\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={10485760}\n                  onGetUploadParameters={handleGetUploadParameters}\n                  onComplete={handleUploadComplete}\n                  buttonClassName=\"w-full bg-[#ff55e1] hover:bg-[#ff55e1]/90 text-white\"\n                >\n                  <span>Upload New Header</span>\n                </ObjectUploader>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"w-full mt-2\"\n                  onClick={() => setShowHeaderEdit(false)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n        \n        <div className=\"px-6 py-6 space-y-4\">\n          <h2 className=\"text-xl font-bold mb-4\">Upcoming Events</h2>\n          \n          {/* Full-width Toggle Buttons */}\n          <div className=\"grid grid-cols-2 gap-2 mb-6\">\n            <Button\n              variant={selectedTab === \"special\" ? \"default\" : \"outline\"}\n              onClick={() => setSelectedTab(\"special\")}\n              className={`w-full ${selectedTab === \"special\" ? \"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\" : \"\"}`}\n            >\n              Special Events\n            </Button>\n            <Button\n              variant={selectedTab === \"weekly\" ? \"default\" : \"outline\"}\n              onClick={() => setSelectedTab(\"weekly\")}\n              className={`w-full ${selectedTab === \"weekly\" ? \"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\" : \"\"}`}\n            >\n              Weekly Events\n            </Button>\n          </div>\n          \n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"flex\">\n                <div className=\"w-24 h-24 bg-gray-300\"></div>\n                <div className=\"flex-1 p-4 space-y-2\">\n                  <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n                  <div className=\"h-3 bg-gray-300 rounded w-1/4\"></div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container pb-20\">\n      {/* Header image with fade overlay - only show if headerImageUrl exists */}\n      {headerImageUrl && (\n        <div className=\"relative\">\n          <div \n            className=\"w-full h-48\"\n            style={{\n              backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url('${headerImageUrl}')`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n          />\n          {isMasterAdmin && (\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              className=\"absolute top-2 right-2 bg-white/90 hover:bg-white\"\n              onClick={() => setShowHeaderEdit(!showHeaderEdit)}\n            >\n              <Edit className=\"w-4 h-4 mr-1\" />\n              Edit Header\n            </Button>\n          )}\n          \n          {showHeaderEdit && isMasterAdmin && (\n            <div className=\"absolute top-12 right-2 bg-white rounded-lg shadow-lg p-4 min-w-48\">\n              <h3 className=\"font-semibold mb-2\">Update Events Header</h3>\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10485760}\n                onGetUploadParameters={handleGetUploadParameters}\n                onComplete={handleUploadComplete}\n                buttonClassName=\"w-full bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\"\n              >\n                <span>Upload Events Header</span>\n              </ObjectUploader>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"w-full mt-2\"\n                onClick={() => setShowHeaderEdit(false)}\n              >\n                Cancel\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Events Banner Section - Clickable Banner Image (5:1 ratio) - positioned between header and events */}\n      {(globalSettings as any)?.eventsBannerImage ? (\n        <div className=\"px-6 pt-4 pb-2 relative\">\n          <div \n            className=\"w-full rounded-lg overflow-hidden shadow-md\"\n            style={{ aspectRatio: '5/1' }}\n          >\n            <img \n              src={getImageUrl((globalSettings as any).eventsBannerImage)} \n              alt=\"Events Banner\"\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          {isMasterAdmin && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"absolute top-6 right-8 bg-black/50 text-white border-white/50 hover:bg-white hover:text-black\"\n              onClick={(e) => {\n                e.stopPropagation();\n                // Pre-populate with current values\n                setBannerImageUrl((globalSettings as any)?.eventsBannerImage || \"\");\n                setBannerLinkUrl((globalSettings as any)?.eventsBannerLink || \"\");\n                setIsBannerDialogOpen(true);\n              }}\n            >\n              <Edit className=\"w-4 h-4 mr-1\" />\n              Edit Banner\n            </Button>\n          )}\n        </div>\n      ) : isMasterAdmin ? (\n        <div className=\"px-6 pt-4 pb-2\">\n          <div \n            className=\"w-full border-2 border-dashed border-gray-300 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow flex items-center justify-center cursor-pointer\"\n            style={{ aspectRatio: '5/1' }}\n            onClick={() => {\n              setBannerImageUrl(\"\");\n              setBannerLinkUrl(\"\");\n              setIsBannerDialogOpen(true);\n            }}\n          >\n            <div className=\"text-center text-gray-500\">\n              <Plus className=\"w-8 h-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">Add Banner Image</p>\n            </div>\n          </div>\n        </div>\n      ) : null}\n\n      {/* Banner Editor Dialog */}\n      <Dialog open={isBannerDialogOpen} onOpenChange={setIsBannerDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Events Banner</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"banner-image\">Banner Image (5:1 ratio recommended)</Label>\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10485760}\n                onGetUploadParameters={handleBannerImageUpload}\n                onComplete={handleBannerImageUploadComplete}\n                buttonClassName=\"w-full mt-2\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Upload Banner Image\n              </ObjectUploader>\n            </div>\n            <div>\n              <Label htmlFor=\"banner-link\">Banner Link URL</Label>\n              <Input\n                id=\"banner-link\"\n                type=\"url\"\n                placeholder=\"https://example.com\"\n                value={bannerLinkUrl}\n                onChange={(e) => setBannerLinkUrl(e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n            {bannerImageUrl && bannerLinkUrl && (\n              <Button\n                onClick={() => saveBannerMutation.mutate()}\n                disabled={saveBannerMutation.isPending}\n                className=\"w-full\"\n              >\n                {saveBannerMutation.isPending ? \"Saving...\" : \"Save Banner\"}\n              </Button>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n      \n      <div className=\"px-6 py-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-bold\">Upcoming Events</h2>\n          {canCreateEvents && (\n            <Button\n              onClick={() => setShowCreateModal(true)}\n              className=\"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\"\n              size=\"sm\"\n            >\n              <Plus className=\"w-4 h-4 mr-1\" />\n              Create Event\n            </Button>\n          )}\n        </div>\n        \n        {/* Full-width Toggle Buttons */}\n        <div className=\"grid grid-cols-2 gap-2 mb-6\">\n          <Button\n            variant={selectedTab === \"special\" ? \"default\" : \"outline\"}\n            onClick={() => setSelectedTab(\"special\")}\n            className={`w-full ${selectedTab === \"special\" ? \"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\" : \"\"}`}\n          >\n            Special Events\n          </Button>\n          <Button\n            variant={selectedTab === \"weekly\" ? \"default\" : \"outline\"}\n            onClick={() => setSelectedTab(\"weekly\")}\n            className={`w-full ${selectedTab === \"weekly\" ? \"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\" : \"\"}`}\n          >\n            Weekly Events\n          </Button>\n        </div>\n\n        {/* Divider */}\n        <div className=\"border-b border-gray-200 mb-6\"></div>\n\n        {selectedTab === \"special\" ? (\n          // Special Events Display\n          specialEvents.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Calendar className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n              <p>No special events scheduled</p>\n              <p className=\"text-sm\">Check back soon for upcoming special events</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {sortedSpecialEvents.map((event) => (\n                <Link key={event.id} href={`/special-event/${event.id}`}>\n                  <Card className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer\">\n                    {/* Large photo display */}\n                    {event.logo && (\n                      <div className=\"w-full h-48 overflow-hidden\">\n                        <img \n                          src={getImageUrl(event.logo)} \n                          alt={event.event}\n                          className=\"w-full h-full object-cover\"\n                          onError={(e) => {\n                            // Hide image if it fails to load\n                            e.currentTarget.style.display = 'none';\n                          }}\n                        />\n                      </div>\n                    )}\n                    <CardContent className=\"p-4\">\n                      <h3 className=\"font-bold text-lg text-gray-900 mb-2\">\n                        {event.event}\n                      </h3>\n                      <p className=\"text-sm text-[#80bc04] font-medium mb-2\">\n                        {event.company}\n                      </p>\n                      <div className=\"flex items-center text-sm text-gray-600 mb-2\">\n                        <MapPin className=\"w-4 h-4 mr-1\" />\n                        <span className=\"mr-3\">{event.location || event.address}</span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600 mb-3\">\n                        <Calendar className=\"w-4 h-4 mr-1\" />\n                        <span className=\"mr-3\">{formatEventDate(event.date)}</span>\n                        <Clock className=\"w-4 h-4 mr-1\" />\n                        <span>{event.time}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <Badge \n                          variant={event.rsvpRequired ? \"default\" : \"secondary\"}\n                          className={event.rsvpRequired ? \"bg-[#ff55e1] text-white\" : \"bg-green-100 text-green-800\"}\n                        >\n                          {event.rsvpRequired ? \"RSVP Required\" : \"Open Event\"}\n                        </Badge>\n                        {event.ticketLink && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              openSmartLink(event.ticketLink!);\n                            }}\n                            className={event.rsvpRequired ? \"bg-[#ff55e1] hover:bg-[#ff55e1]/90 text-white border-[#ff55e1]\" : \"\"}\n                          >\n                            <ExternalLink className=\"w-3 h-3 mr-1\" />\n                            Tickets\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          )\n        ) : (\n          // Weekly Events Display - Day of week buttons\n          <div className=\"space-y-3\">\n            {[\n              'Monday',\n              'Tuesday', \n              'Wednesday',\n              'Thursday',\n              'Friday',\n              'Saturday',\n              'Sunday'\n            ].map((day) => (\n              <Button\n                key={day}\n                variant=\"outline\"\n                className=\"w-full h-14 text-lg font-medium bg-[#1a5632] hover:bg-[#1a5632]/90 border-[#1a5632] text-white justify-center px-6\"\n                onClick={() => {\n                  window.location.href = `/weekly-events/${day.toLowerCase()}`;\n                }}\n              >\n                {day}\n              </Button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Create Special Event Modal */}\n      <CreateSpecialEventModal \n        open={showCreateModal} \n        onOpenChange={setShowCreateModal} \n      />\n    </div>\n  );\n}\n","size_bytes":24892},"client/src/pages/leaderboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { ArrowLeft, Trophy, Medal, Award, Info, Edit } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport type { User } from \"@shared/schema\";\nimport badgesHeaderImage from \"@assets/Badges_Header_1754356120920.jpg\";\n\nexport default function Leaderboard() {\n  const [, navigate] = useLocation();\n  const [showAllBadges, setShowAllBadges] = useState(false);\n  const [isHeaderDialogOpen, setIsHeaderDialogOpen] = useState(false);\n  const [headerImageUrl, setHeaderImageUrl] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: leaderboard = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/leaderboard\"],\n  });\n\n  const { user: currentUser } = useAuth();\n\n  const { data: globalSettings } = useQuery({\n    queryKey: [\"/api/global-settings\"],\n  });\n\n  // Check if user is master admin\n  const isMasterAdmin = currentUser?.email === 'joshuamdelozier@gmail.com';\n\n  // Get the current header image (fallback to default)\n  const getHeaderImage = () => {\n    if ((globalSettings as any)?.leaderboardHeaderImage) {\n      return getImageUrl((globalSettings as any).leaderboardHeaderImage);\n    }\n    return badgesHeaderImage;\n  };\n\n  // Helper function to get image URL\n  const getImageUrl = (imagePath: string) => {\n    if (imagePath.startsWith('/objects/')) {\n      return imagePath;\n    }\n    if (imagePath.startsWith('http')) {\n      return imagePath;\n    }\n    return imagePath;\n  };\n\n  // Update header image mutation\n  const updateHeaderMutation = useMutation({\n    mutationFn: async (imageUrl: string) => {\n      const response = await fetch('/api/global-settings/leaderboard-header', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ headerImage: imageUrl }),\n      });\n      if (!response.ok) throw new Error('Failed to update header');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/global-settings\"] });\n      setIsHeaderDialogOpen(false);\n      setHeaderImageUrl(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Header image updated successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update header image. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Badge categories based on check-in counts\n  const getBadgeCategory = (checkins: number) => {\n    if (checkins >= 1000) return { \n      name: \"Black Hop\", \n      color: \"bg-black\",\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1bSj-B1ibssWVtF5dQqg-YY6WC6o8pzAg\"\n    };\n    if (checkins >= 500) return { \n      name: \"Purple Hop\", \n      color: \"bg-purple-600\",\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1nMdikJsgYjo6b1Sr3lAuC1cEowY4_Vo_\"\n    };\n    if (checkins >= 250) return { \n      name: \"Blue Hop\", \n      color: \"bg-blue-600\",\n      imageUrl: \"https://drive.google.com/uc?export=view&id=15o8od8fae21jFNV7qvnRZs3P-AbEh9NM\"\n    };\n    if (checkins >= 100) return { \n      name: \"Green Hop\", \n      color: \"bg-green-600\",\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1b2AjcN0R4xB9nkATKEbzo-TbRtHuzzEo\"\n    };\n    if (checkins >= 50) return { \n      name: \"Red Hop\", \n      color: \"bg-red-600\",\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1lA6fv9IZ1YiijjqvnXOA7LEm0Lo7txmu\"\n    };\n    if (checkins >= 25) return { \n      name: \"Teal Hop\", \n      color: \"bg-teal-600\",\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1LPeFXncm_Rm8PzAokS2jHYZTjewsbgVm\"\n    };\n    if (checkins >= 10) return { \n      name: \"Orange Hop\", \n      color: \"bg-orange-600\",\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1qpH3CCjfX5aA-mf4fXxXf5lkdX-EaX8w\"\n    };\n    if (checkins >= 5) return { \n      name: \"Yellow Hop\", \n      color: \"bg-yellow-600\",\n      imageUrl: \"https://drive.google.com/uc?export=view&id=13BoUnHyAkZQznyJ1iZuqWWLDb1tx8sOJ\"\n    };\n    return { \n      name: \"White Hop\", \n      color: \"bg-gray-300\",\n      imageUrl: \"https://drive.google.com/uc?export=view&id=12o9X89jmW3BC6vqV4J4BrLaKKDNBjRQS\"\n    };\n  };\n\n  // Filter users with at least 100 check-ins and group by badge category\n  const groupedUsers = leaderboard\n    .filter(user => user.checkins >= 100)\n    .reduce((groups, user) => {\n      const badge = getBadgeCategory(user.checkins);\n      if (!groups[badge.name]) {\n        groups[badge.name] = { badge, users: [] };\n      }\n      groups[badge.name].users.push(user);\n      return groups;\n    }, {} as Record<string, { badge: { name: string; color: string; imageUrl: string }; users: User[] }>);\n\n  // Order of badges (highest to lowest)\n  const badgeOrder = [\"Black Hop\", \"Purple Hop\", \"Blue Hop\", \"Green Hop\", \"Red Hop\", \"Teal Hop\", \"Orange Hop\", \"Yellow Hop\", \"White Hop\"];\n\n  // All badge information for the popup with actual badge images\n  const allBadges = [\n    { \n      name: \"Black Hop\", \n      color: \"bg-black\", \n      minCheckins: 1000,\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1bSj-B1ibssWVtF5dQqg-YY6WC6o8pzAg\"\n    },\n    { \n      name: \"Purple Hop\", \n      color: \"bg-purple-600\", \n      minCheckins: 500,\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1nMdikJsgYjo6b1Sr3lAuC1cEowY4_Vo_\"\n    },\n    { \n      name: \"Blue Hop\", \n      color: \"bg-blue-600\", \n      minCheckins: 250,\n      imageUrl: \"https://drive.google.com/uc?export=view&id=15o8od8fae21jFNV7qvnRZs3P-AbEh9NM\"\n    },\n    { \n      name: \"Green Hop\", \n      color: \"bg-green-600\", \n      minCheckins: 100,\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1b2AjcN0R4xB9nkATKEbzo-TbRtHuzzEo\"\n    },\n    { \n      name: \"Red Hop\", \n      color: \"bg-red-600\", \n      minCheckins: 50,\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1lA6fv9IZ1YiijjqvnXOA7LEm0Lo7txmu\"\n    },\n    { \n      name: \"Teal Hop\", \n      color: \"bg-teal-600\", \n      minCheckins: 25,\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1LPeFXncm_Rm8PzAokS2jHYZTjewsbgVm\"\n    },\n    { \n      name: \"Orange Hop\", \n      color: \"bg-orange-600\", \n      minCheckins: 10,\n      imageUrl: \"https://drive.google.com/uc?export=view&id=1qpH3CCjfX5aA-mf4fXxXf5lkdX-EaX8w\"\n    },\n    { \n      name: \"Yellow Hop\", \n      color: \"bg-yellow-600\", \n      minCheckins: 5,\n      imageUrl: \"https://drive.google.com/uc?export=view&id=13BoUnHyAkZQznyJ1iZuqWWLDb1tx8sOJ\"\n    },\n    { \n      name: \"White Hop\", \n      color: \"bg-gray-300\", \n      minCheckins: 0,\n      imageUrl: \"https://drive.google.com/uc?export=view&id=12o9X89jmW3BC6vqV4J4BrLaKKDNBjRQS\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"mobile-container\">\n        {/* Back Button - At the very top */}\n        <div className=\"absolute top-4 left-4 z-30\">\n          <button \n            className=\"w-10 h-10 bg-black/50 rounded-full flex items-center justify-center text-white shadow-lg\"\n            onClick={() => navigate(\"/\")}\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        {/* Badges Header Image */}\n        <div className=\"bg-white relative\">\n          <img \n            src={getHeaderImage()} \n            alt=\"Badges Header\"\n            className=\"w-full h-auto\"\n          />\n          {isMasterAdmin && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"absolute top-2 right-2 bg-black/50 text-white border-white/50 hover:bg-white hover:text-black\"\n              onClick={() => {\n                setHeaderImageUrl((globalSettings as any)?.leaderboardHeaderImage || \"\");\n                setIsHeaderDialogOpen(true);\n              }}\n            >\n              <Edit className=\"w-4 h-4 mr-1\" />\n              Edit Header\n            </Button>\n          )}\n        </div>\n\n        <div className=\"px-6 py-4 bg-white border-b\">\n          <h2 className=\"text-2xl font-bold text-gray-900 text-center\">Leaderboard</h2>\n          <p className=\"text-center text-gray-600 text-sm mt-1\">Users with at least 100 check-ins</p>\n        </div>\n\n        <div className=\"px-6 py-4\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-20 bg-gray-200 rounded\"></div>\n            <div className=\"h-16 bg-gray-200 rounded\"></div>\n            <div className=\"h-16 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container pb-20\">\n      {/* Back Button - At the very top */}\n      <div className=\"absolute top-4 left-4 z-30\">\n        <button \n          className=\"w-10 h-10 bg-black/50 rounded-full flex items-center justify-center text-white shadow-lg\"\n          onClick={() => navigate(\"/\")}\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n        </button>\n      </div>\n\n      {/* Badges Header Image */}\n      <div className=\"bg-white relative\">\n        <img \n          src={getHeaderImage()} \n          alt=\"Badges Header\"\n          className=\"w-full h-auto\"\n        />\n        {isMasterAdmin && (\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"absolute top-2 right-2 bg-black/50 text-white border-white/50 hover:bg-white hover:text-black\"\n            onClick={() => {\n              setHeaderImageUrl((globalSettings as any)?.leaderboardHeaderImage || \"\");\n              setIsHeaderDialogOpen(true);\n            }}\n          >\n            <Edit className=\"w-4 h-4 mr-1\" />\n            Edit Header\n          </Button>\n        )}\n      </div>\n\n      {/* Screen Title */}\n      <div className=\"px-6 py-4 bg-white border-b\">\n        <h2 className=\"text-2xl font-bold text-gray-900 text-center\">Leaderboard</h2>\n        <p className=\"text-center text-gray-600 text-sm mt-1\">Users with at least 100 check-ins</p>\n      </div>\n\n      {/* All Users */}\n      <div className=\"px-6 py-4\">\n        {leaderboard.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <Trophy className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n            <p>No rankings available</p>\n            <p className=\"text-sm\">Start checking in to appear on the leaderboard!</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* See All Badges Button */}\n            <div className=\"flex justify-center mb-6\">\n              <Dialog open={showAllBadges} onOpenChange={setShowAllBadges}>\n                <DialogTrigger asChild>\n                  <Button className=\"flex items-center gap-2 bg-hops hover:bg-hops/90 text-white\">\n                    <Info className=\"w-4 h-4\" />\n                    See All Badges\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>All Badge Levels</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {allBadges.map((badge) => (\n                      <div key={badge.name} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <img \n                            src={badge.imageUrl} \n                            alt={badge.name}\n                            className=\"w-8 h-8 object-contain\"\n                            onError={(e) => {\n                              // Fallback to colored circle if image fails to load\n                              (e.target as HTMLImageElement).style.display = 'none';\n                              const fallback = document.createElement('div');\n                              fallback.className = `w-4 h-4 rounded-full ${badge.color}`;\n                              (e.target as HTMLImageElement).parentNode?.appendChild(fallback);\n                            }}\n                          />\n                          <span className=\"font-medium\">{badge.name}</span>\n                        </div>\n                        <span className=\"text-sm text-gray-600\">\n                          {badge.minCheckins === 0 ? \"0+\" : `${badge.minCheckins}+`} check-ins\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n      {/* Header Editor Dialog */}\n      <Dialog open={isHeaderDialogOpen} onOpenChange={setIsHeaderDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Leaderboard Header</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"header-image\">Header Image</Label>\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10485760}\n                onGetUploadParameters={async () => {\n                  const response = await fetch('/api/objects/upload', {\n                    method: 'POST',\n                  });\n                  const data = await response.json();\n                  return {\n                    method: 'PUT' as const,\n                    url: data.uploadURL,\n                  };\n                }}\n                onComplete={(result) => {\n                  if (result.successful && result.successful.length > 0) {\n                    const uploadURL = result.successful[0]?.uploadURL;\n                    if (uploadURL) {\n                      fetch('/api/objects/normalize', {\n                        method: 'POST',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify({ url: uploadURL }),\n                      })\n                      .then(res => res.json())\n                      .then(data => {\n                        setHeaderImageUrl(data.objectPath);\n                      });\n                    }\n                  }\n                }}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <span>📁</span>\n                  <span>Upload Header Image</span>\n                </div>\n              </ObjectUploader>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsHeaderDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  if (headerImageUrl.trim()) {\n                    updateHeaderMutation.mutate(headerImageUrl.trim());\n                  }\n                }}\n                disabled={!headerImageUrl.trim() || updateHeaderMutation.isPending}\n              >\n                {updateHeaderMutation.isPending ? \"Updating...\" : \"Update Header\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n            {badgeOrder.map((badgeName) => {\n              const group = groupedUsers[badgeName];\n              if (!group || group.users.length === 0) return null;\n              \n              return (\n                <div key={badgeName}>\n                  {/* Badge Heading */}\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    <img \n                      src={group.badge.imageUrl} \n                      alt={badgeName}\n                      className=\"w-6 h-6 object-contain\"\n                      onError={(e) => {\n                        // Fallback to colored circle if image fails to load\n                        (e.target as HTMLImageElement).style.display = 'none';\n                        const fallback = document.createElement('div');\n                        fallback.className = `w-3 h-3 rounded-full ${group.badge.color}`;\n                        (e.target as HTMLImageElement).parentNode?.appendChild(fallback);\n                      }}\n                    />\n                    <h3 className=\"text-lg font-bold text-gray-800\">{badgeName}</h3>\n                  </div>\n                  \n                  {/* Users in this badge category */}\n                  <div className=\"space-y-3 ml-5\">\n                    {group.users.map((user) => (\n                      <div key={user.id} className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg\">\n                        <img \n                          src={user.profileImage || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=40&h=40\"} \n                          alt=\"User\" \n                          className=\"w-10 h-10 rounded-full object-cover\"\n                        />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium\">{user.name}</h4>\n                          <p className=\"text-sm text-hops font-medium\">{user.checkins} check-ins</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":17663},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/podcast.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Play, ExternalLink, Edit, Plus, Upload, Headphones, Search, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { openSmartLink } from \"@/lib/linkHandler\";\n\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\n\n\nimport type { PodcastEpisode, User } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\nimport podcastBanner from \"@assets/BH_Podcast_Banner (5)_1754202035969.jpg\";\nimport podcastBannerDemo from \"@assets/BH_Podcast_Banner (5)_1754234194793.jpg\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface EpisodeFormData {\n  title: string;\n  guest: string;\n  business: string;\n  spotifyUrl: string;\n  image: string;\n  releaseDate: string;\n  episodeNumber: number;\n}\n\nexport default function Podcast() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingEpisode, setEditingEpisode] = useState<PodcastEpisode | null>(null);\n  const [isHeaderImageDialogOpen, setIsHeaderImageDialogOpen] = useState(false);\n  const [isBannerDialogOpen, setIsBannerDialogOpen] = useState(false);\n  const [bannerImageUrl, setBannerImageUrl] = useState(\"\");\n  const [bannerLinkUrl, setBannerLinkUrl] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n  \n  const { data: episodes = [], isLoading } = useQuery<PodcastEpisode[]>({\n    queryKey: [\"/api/podcast-episodes\"],\n  });\n  \n  // Use authenticated user from useAuth hook instead of hardcoded query\n\n  const { data: podcastHeader } = useQuery<{ headerImage: string | null }>({\n    queryKey: [\"/api/podcast/header\"],\n  });\n\n  // Get banner data from global settings\n  const { data: globalSettings } = useQuery({\n    queryKey: [\"/api/global-settings\"],\n  });\n\n  // Only use the podcast header image if it exists, no fallback to avoid flashing\n  const headerImage = podcastHeader?.headerImage;\n  const bannerImage = (globalSettings as any)?.podcastBannerImage || podcastBannerDemo;\n  const bannerLink = (globalSettings as any)?.podcastBannerLink || \"https://example.com\";\n  \n  console.log('Podcast banner data:', { bannerImage, bannerLink, globalSettings: globalSettings });\n  \n  const isMasterAdmin = user?.email === 'joshuamdelozier@gmail.com';\n\n  const form = useForm<EpisodeFormData>({\n    defaultValues: {\n      title: \"\",\n      guest: \"\",\n      business: \"\",\n      spotifyUrl: \"\",\n      image: \"\",\n      releaseDate: new Date().toISOString().split('T')[0],\n      episodeNumber: (Math.max(...episodes.map(ep => ep.episodeNumber), 0) + 1),\n    },\n  });\n\n  const createEpisodeMutation = useMutation({\n    mutationFn: async (data: EpisodeFormData) => {\n      // Use the episode number provided by the user\n      const episodeData = {\n        ...data,\n        description: \"\", // Default empty description\n        duration: \"60\", // Default 60 minutes\n        releaseDate: data.releaseDate,\n        episodeNumber: data.episodeNumber,\n      };\n      return apiRequest(\"/api/podcast-episodes\", \"POST\", episodeData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Episode created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/podcast-episodes\"] });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create episode\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEpisodeMutation = useMutation({\n    mutationFn: async (data: EpisodeFormData) => {\n      if (!editingEpisode) throw new Error(\"No episode selected for editing\");\n      \n      const episodeData = {\n        ...data,\n        episodeNumber: data.episodeNumber, // Use user-provided episode number\n        description: editingEpisode.description || \"\", // Keep original description\n        duration: editingEpisode.duration, // Keep original duration\n        releaseDate: data.releaseDate,\n      };\n      return apiRequest(`/api/podcast-episodes/${editingEpisode.id}`, \"PUT\", episodeData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Episode updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/podcast-episodes\"] });\n      setIsEditDialogOpen(false);\n      setEditingEpisode(null);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update episode. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEpisodeMutation = useMutation({\n    mutationFn: async (episodeId: string) => {\n      return apiRequest(`/api/podcast-episodes/${episodeId}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Episode deleted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/podcast-episodes\"] });\n      setIsEditDialogOpen(false);\n      setEditingEpisode(null);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete episode. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EpisodeFormData) => {\n    if (editingEpisode) {\n      updateEpisodeMutation.mutate(data);\n    } else {\n      createEpisodeMutation.mutate(data);\n    }\n  };\n\n  const handleEditEpisode = (episode: PodcastEpisode) => {\n    setEditingEpisode(episode);\n    \n    // Format date properly to avoid timezone issues\n    const releaseDate = new Date(episode.releaseDate);\n    const localDateString = `${releaseDate.getFullYear()}-${String(releaseDate.getMonth() + 1).padStart(2, '0')}-${String(releaseDate.getDate()).padStart(2, '0')}`;\n    \n    form.reset({\n      title: episode.title,\n      guest: episode.guest,\n      business: episode.business,\n      spotifyUrl: episode.spotifyUrl,\n      image: episode.image,\n      releaseDate: localDateString,\n      episodeNumber: episode.episodeNumber,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleImageUpload = async () => {\n    try {\n      const response = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      throw error;\n    }\n  };\n\n  const handleUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadURL = uploadedFile.uploadURL;\n      \n      try {\n        // Normalize the upload URL to get the object path\n        const response = await fetch(\"/api/objects/normalize\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ url: uploadURL }),\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          form.setValue(\"image\", data.objectPath);\n        } else {\n          // Fallback to using the upload URL directly\n          form.setValue(\"image\", uploadURL || \"\");\n        }\n        \n        toast({\n          title: \"Success\",\n          description: \"Image uploaded successfully!\",\n        });\n      } catch (error) {\n        console.error(\"Error normalizing image URL:\", error);\n        // Fallback to using the upload URL directly\n        form.setValue(\"image\", uploadURL || \"\");\n        toast({\n          title: \"Success\",\n          description: \"Image uploaded successfully!\",\n        });\n      }\n    }\n  };\n\n  const handleHeaderImageUpload = async () => {\n    try {\n      const response = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      throw error;\n    }\n  };\n\n  const handleHeaderImageUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadURL = uploadedFile.uploadURL;\n      \n      try {\n        // First normalize the URL\n        const normalizeResponse = await fetch(\"/api/objects/normalize\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ url: uploadURL }),\n        });\n        \n        let finalImagePath = uploadURL;\n        if (normalizeResponse.ok) {\n          const normalizeData = await normalizeResponse.json();\n          finalImagePath = normalizeData.objectPath;\n        }\n        \n        // Now save it as the global podcast header for ALL users\n        const headerResponse = await fetch(\"/api/podcast/header\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ headerImage: finalImagePath }),\n        });\n        \n        if (headerResponse.ok) {\n          // Invalidate the header query to refresh the header for everyone\n          queryClient.invalidateQueries({ queryKey: [\"/api/podcast/header\"] });\n          \n          setIsHeaderImageDialogOpen(false);\n          \n          toast({\n            title: \"Success\",\n            description: \"Global podcast header updated successfully! All users will see the new header.\",\n          });\n        } else {\n          throw new Error(\"Failed to save global header image\");\n        }\n      } catch (error) {\n        console.error(\"Error updating global header image:\", error);\n        setIsHeaderImageDialogOpen(false);\n        toast({\n          title: \"Error\",\n          description: \"Failed to update global header image. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  // Banner image upload handlers\n  const handleBannerImageUpload = async () => {\n    try {\n      const response = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      throw error;\n    }\n  };\n\n  const handleBannerImageUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadURL = uploadedFile.uploadURL;\n      \n      try {\n        // First normalize the URL\n        const normalizeResponse = await fetch(\"/api/objects/normalize\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ url: uploadURL }),\n        });\n        \n        let finalImagePath = uploadURL || \"\";\n        if (normalizeResponse.ok) {\n          const normalizeData = await normalizeResponse.json();\n          finalImagePath = normalizeData.objectPath || uploadURL || \"\";\n        }\n        \n        setBannerImageUrl(finalImagePath);\n        \n        toast({\n          title: \"Success\",\n          description: \"Banner image uploaded successfully! Don't forget to add a link URL and save.\",\n        });\n      } catch (error) {\n        console.error(\"Error uploading banner image:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to upload banner image. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  // Banner save mutation\n  const saveBannerMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/global-settings/podcast-banner\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-user-id\": user?.id || \"\",\n        },\n        body: JSON.stringify({\n          bannerImageUrl,\n          bannerLinkUrl,\n        }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update banner\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Banner updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/global-settings\"] });\n      setIsBannerDialogOpen(false);\n      setBannerImageUrl(\"\");\n      setBannerLinkUrl(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update banner. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const openSpotify = (spotifyUrl: string) => {\n    openSmartLink(spotifyUrl);\n  };\n  \n  // Filter episodes based on search query\n  const filteredEpisodes = episodes.filter(episode => {\n    if (!searchQuery.trim()) return true;\n    \n    const query = searchQuery.toLowerCase();\n    return (\n      episode.title.toLowerCase().includes(query) ||\n      episode.guest.toLowerCase().includes(query) ||\n      episode.business.toLowerCase().includes(query) ||\n      episode.description?.toLowerCase().includes(query)\n    );\n  });\n\n  // Sort filtered episodes by release date descending (most recent first)\n  const sortedEpisodes = [...filteredEpisodes].sort((a, b) => \n    new Date(b.releaseDate).getTime() - new Date(a.releaseDate).getTime()\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"px-6 py-6 space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-16 h-16 bg-gray-300 rounded-lg\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n                    <div className=\"h-3 bg-gray-300 rounded w-1/4\"></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container pb-20\">\n      {/* Hero Banner - Only show if header image exists */}\n      {headerImage && (\n        <div \n          className=\"hero-banner relative\"\n          style={{\n            backgroundImage: `url(${headerImage})`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundRepeat: 'no-repeat'\n          }}\n        >\n          <div className=\"hero-overlay\" />\n\n          {isMasterAdmin && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"absolute top-4 right-4 bg-black/50 text-white border-white/50 hover:bg-white hover:text-black\"\n              onClick={() => setIsHeaderImageDialogOpen(true)}\n            >\n              <Edit className=\"w-4 h-4 mr-1\" />\n              Edit Image\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Show header placeholder for admin if no header exists */}\n      {!headerImage && isMasterAdmin && (\n        <div className=\"px-6 pt-4\">\n          <div \n            className=\"w-full border-2 border-dashed border-gray-300 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow flex items-center justify-center cursor-pointer bg-gray-50\"\n            style={{ height: '200px' }}\n            onClick={() => setIsHeaderImageDialogOpen(true)}\n          >\n            <div className=\"text-center text-gray-500\">\n              <Plus className=\"w-8 h-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">Add Header Image</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Clickable Banner Image (5:1 ratio) - positioned between header and episodes */}\n      {bannerImage && (\n        <div className=\"px-6 pt-4 pb-2 relative\">\n          <div \n            className=\"w-full rounded-lg overflow-hidden shadow-md\"\n            style={{ aspectRatio: '5/1' }}\n          >\n            <img \n              src={bannerImage}\n              alt=\"Podcast Banner\"\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          {isMasterAdmin && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"absolute top-6 right-8 bg-black/50 text-white border-white/50 hover:bg-white hover:text-black\"\n              onClick={(e) => {\n                e.stopPropagation();\n                // Pre-populate with current values\n                setBannerImageUrl((globalSettings as any)?.podcastBannerImage || \"\");\n                setBannerLinkUrl((globalSettings as any)?.podcastBannerLink || \"\");\n                setIsBannerDialogOpen(true);\n              }}\n            >\n              <Edit className=\"w-4 h-4 mr-1\" />\n              Edit Banner\n            </Button>\n          )}\n          \n          {/* Sponsor Text */}\n          <div className=\"text-center mt-2\">\n            <p className=\"text-xs text-gray-500\">Millennium Lounge: Official Podcast Sponsor</p>\n          </div>\n        </div>\n      )}\n      \n      {/* Show banner placeholder for admin if no banner exists */}\n      {!bannerImage && isMasterAdmin && (\n        <div className=\"px-6 pt-4 pb-2\">\n          <div \n            className=\"w-full border-2 border-dashed border-gray-300 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow flex items-center justify-center cursor-pointer\"\n            style={{ aspectRatio: '5/1' }}\n            onClick={() => {\n              setBannerImageUrl(\"\");\n              setBannerLinkUrl(\"\");\n              setIsBannerDialogOpen(true);\n            }}\n          >\n            <div className=\"text-center text-gray-500\">\n              <Plus className=\"w-8 h-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">Add Banner Image</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Episodes List */}\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-bold\">Latest Episodes</h2>\n          {isMasterAdmin && (\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"text-[#ff55e1] border-[#ff55e1] hover:bg-[#ff55e1] hover:text-white\"\n                    onClick={() => {\n                      // Reset form to clean state when opening create dialog\n                      form.reset({\n                        title: \"\",\n                        guest: \"\",\n                        business: \"\",\n                        spotifyUrl: \"\",\n                        image: \"\",\n                        releaseDate: new Date().toISOString().split('T')[0],\n                        episodeNumber: (Math.max(...episodes.map(ep => ep.episodeNumber), 0) + 1),\n                      });\n                      setEditingEpisode(null);\n                    }}\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add Episode\n                  </Button>\n                </DialogTrigger>\n              <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Add New Episode</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"episodeNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Episode Number</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value) || 0)} placeholder=\"66\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Title</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Episode #66\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"guest\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Guest</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Guest name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"business\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Business</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Business/Brewery name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"spotifyUrl\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Spotify URL</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"https://open.spotify.com/episode/...\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"image\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Episode Image</FormLabel>\n                          <FormControl>\n                            <div className=\"space-y-2\">\n                              <Input {...field} placeholder=\"Image URL will appear here after upload\" disabled />\n                              <ObjectUploader\n                                maxNumberOfFiles={1}\n                                maxFileSize={5242880} // 5MB\n                                onGetUploadParameters={handleImageUpload}\n                                onComplete={handleUploadComplete}\n                                buttonClassName=\"w-full bg-[#ff55e1] hover:bg-[#ff55e1]/90\"\n                              >\n                                <Upload className=\"w-4 h-4 mr-2\" />\n                                Upload Episode Image\n                              </ObjectUploader>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"releaseDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Release Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"flex gap-2 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setIsDialogOpen(false);\n                          form.reset();\n                        }}\n                        className=\"flex-1\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createEpisodeMutation.isPending}\n                        className=\"flex-1 bg-[#ff55e1] hover:bg-[#ff55e1]/90\"\n                      >\n                        {createEpisodeMutation.isPending ? \"Creating...\" : \"Create Episode\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n\n        {/* Edit Episode Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Edit Episode</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"episodeNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Episode Number</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value) || 0)} placeholder=\"66\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Episode #66\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"guest\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Guest</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Guest Name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"business\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Business</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Brewery/Business Name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"spotifyUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Spotify URL</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"https://open.spotify.com/episode/...\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"image\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Episode Image</FormLabel>\n                      <FormControl>\n                        <div className=\"space-y-2\">\n                          <Input {...field} placeholder=\"Image URL will appear here after upload\" disabled />\n                          <ObjectUploader\n                            maxNumberOfFiles={1}\n                            maxFileSize={5242880} // 5MB\n                            onGetUploadParameters={handleImageUpload}\n                            onComplete={handleUploadComplete}\n                            buttonClassName=\"w-full bg-[#ff55e1] hover:bg-[#ff55e1]/90\"\n                          >\n                            <Upload className=\"w-4 h-4 mr-2\" />\n                            Upload Episode Image\n                          </ObjectUploader>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"releaseDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Release Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex flex-col gap-2 pt-4\">\n                  <div className=\"flex gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsEditDialogOpen(false);\n                        setEditingEpisode(null);\n                        form.reset();\n                      }}\n                      className=\"flex-1\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={updateEpisodeMutation.isPending}\n                      className=\"flex-1 bg-[#ff55e1] hover:bg-[#ff55e1]/90\"\n                    >\n                      {updateEpisodeMutation.isPending ? \"Updating...\" : \"Update Episode\"}\n                    </Button>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"destructive\"\n                    onClick={() => {\n                      if (editingEpisode && confirm(`Are you sure you want to delete Episode #${editingEpisode.episodeNumber}? This action cannot be undone.`)) {\n                        deleteEpisodeMutation.mutate(editingEpisode.id);\n                      }\n                    }}\n                    disabled={deleteEpisodeMutation.isPending}\n                    className=\"w-full\"\n                  >\n                    {deleteEpisodeMutation.isPending ? \"Deleting...\" : \"Delete Episode\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Search Bar */}\n        <div className=\"relative mb-6\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search by guest, business, or title...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 pr-10 bg-white border-gray-300 focus:border-[#ff55e1] focus:ring-[#ff55e1]\"\n          />\n          {searchQuery && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0 hover:bg-gray-100\"\n              onClick={() => setSearchQuery(\"\")}\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n\n        {/* Search Results Info */}\n        {searchQuery && (\n          <div className=\"mb-4 text-sm text-gray-600\">\n            {filteredEpisodes.length === 0 ? (\n              <p>No episodes found for \"{searchQuery}\"</p>\n            ) : (\n              <p>Found {filteredEpisodes.length} episode{filteredEpisodes.length !== 1 ? 's' : ''} for \"{searchQuery}\"</p>\n            )}\n          </div>\n        )}\n\n        {episodes.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <Play className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n            <p>No podcast episodes available</p>\n            <p className=\"text-sm\">Check back soon for new episodes</p>\n          </div>\n        ) : sortedEpisodes.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <Play className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n            <p>No episodes found for \"{searchQuery}\"</p>\n            <p className=\"text-sm\">Try a different search term</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {sortedEpisodes.map((episode) => (\n              <Card \n                key={episode.id} \n                className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                onClick={() => openSpotify(episode.spotifyUrl)}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start space-x-4\">\n                    <img \n                      src={episode.image} \n                      alt={`Episode ${episode.episodeNumber} artwork`}\n                      className=\"w-16 h-16 rounded-lg object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm font-medium text-[#ff55e1]\">\n                          Episode #{episode.episodeNumber}\n                        </span>\n                        {isMasterAdmin && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"text-gray-400 hover:text-gray-600 p-1 h-6 w-6\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleEditEpisode(episode);\n                            }}\n                          >\n                            <Edit className=\"w-3 h-3\" />\n                          </Button>\n                        )}\n                      </div>\n                      <h3 className=\"font-semibold text-gray-900 mb-1\">\n                        {episode.guest}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {episode.business}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        Released {(() => {\n                          const date = new Date(episode.releaseDate);\n                          // Use local date formatting to avoid timezone issues\n                          return date.toLocaleDateString('en-US', {\n                            year: 'numeric',\n                            month: 'long',\n                            day: 'numeric',\n                            timeZone: 'UTC'\n                          });\n                        })()}\n                      </p>\n                    </div>\n                    <button \n                      className=\"w-8 h-8 rounded-full bg-[#ff55e1] hover:bg-[#ff55e1]/90 flex items-center justify-center transition-colors\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        openSpotify(episode.spotifyUrl);\n                      }}\n                      title=\"Listen on Spotify\"\n                    >\n                      <Headphones className=\"w-4 h-4 text-white\" />\n                    </button>\n                  </div>\n\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Header Image Upload Dialog */}\n      <Dialog open={isHeaderImageDialogOpen} onOpenChange={setIsHeaderImageDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Update Header Image</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600\">\n              Upload a new header image for the podcast page. The image will be displayed as the banner background.\n            </p>\n            <ObjectUploader\n              maxNumberOfFiles={1}\n              maxFileSize={10485760} // 10MB\n              onGetUploadParameters={handleHeaderImageUpload}\n              onComplete={handleHeaderImageUploadComplete}\n              buttonClassName=\"w-full bg-[#ff55e1] hover:bg-[#ff55e1]/90 text-white\"\n            >\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Choose Image\n            </ObjectUploader>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Banner Image Upload Dialog */}\n      <Dialog open={isBannerDialogOpen} onOpenChange={setIsBannerDialogOpen}>\n        <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Update Banner Image</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600\">\n              Upload a new banner image and set the URL it should link to when clicked. The banner appears below the header in a 5:1 aspect ratio.\n            </p>\n            \n            {/* Current banner preview */}\n            {bannerImageUrl && (\n              <div className=\"space-y-2\">\n                <Label>Current Banner Preview:</Label>\n                <div \n                  className=\"w-full rounded-lg overflow-hidden border\"\n                  style={{ aspectRatio: '5/1' }}\n                >\n                  <img \n                    src={bannerImageUrl}\n                    alt=\"Banner Preview\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            )}\n            \n            {/* Upload new image */}\n            <div className=\"space-y-2\">\n              <Label>Upload New Banner Image:</Label>\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10485760} // 10MB\n                onGetUploadParameters={handleBannerImageUpload}\n                onComplete={handleBannerImageUploadComplete}\n                buttonClassName=\"w-full bg-[#ff55e1] hover:bg-[#ff55e1]/90 text-white\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Choose Banner Image\n              </ObjectUploader>\n            </div>\n            \n            {/* URL input */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bannerUrl\">Link URL (where banner should redirect):</Label>\n              <Input\n                id=\"bannerUrl\"\n                type=\"url\"\n                placeholder=\"https://example.com\"\n                value={bannerLinkUrl}\n                onChange={(e) => setBannerLinkUrl(e.target.value)}\n              />\n            </div>\n            \n            {/* Action buttons */}\n            <div className=\"flex gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsBannerDialogOpen(false);\n                  setBannerImageUrl(\"\");\n                  setBannerLinkUrl(\"\");\n                }}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={() => saveBannerMutation.mutate()}\n                disabled={!bannerImageUrl || !bannerLinkUrl || saveBannerMutation.isPending}\n                className=\"flex-1 bg-[#ff55e1] hover:bg-[#ff55e1]/90\"\n              >\n                {saveBannerMutation.isPending ? \"Saving...\" : \"Save Banner\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":42408},"client/src/pages/profile.tsx":{"content":"import { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Medal, Trophy, Heart, MapPin, Settings, LogOut } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { EditProfileDialog } from \"@/components/edit-profile-dialog\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User, Badge, Brewery } from \"@shared/schema\";\nimport defaultHeaderImage from \"@assets/BH Drip_1754199454816.png\";\nimport { convertGoogleDriveImageUrl } from \"@/lib/imageUtils\";\n\n\nexport default function Profile() {\n  const queryClient = useQueryClient();\n  const { user: authUser, logout } = useAuth();\n  \n  const userId = authUser?.id;\n\n  const { data: user, isLoading: userLoading } = useQuery<User>({\n    queryKey: [\"/api/users\", userId],\n    enabled: !!userId,\n  });\n\n  const { data: badge } = useQuery<Badge>({\n    queryKey: [\"/api/users\", userId, \"badge\"],\n    enabled: !!userId,\n  });\n\n  const { data: allBreweries = [] } = useQuery<Brewery[]>({\n    queryKey: [\"/api/breweries\"],\n  });\n\n  const favoriteBreweries = allBreweries.filter(brewery => \n    user?.favoriteBreweries?.includes(brewery.id)\n  );\n\n  const leaderboardRank = useQuery<User[]>({\n    queryKey: [\"/api/leaderboard\"],\n  }).data?.findIndex(u => u.id === userId) || 0;\n\n  const removeFavoriteMutation = useMutation({\n    mutationFn: async (breweryId: string) => {\n      return apiRequest(`/api/users/${userId}/favorites`, \"PUT\", { breweryId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", userId] });\n    }\n  });\n\n  if (!authUser) {\n    return null; // Should not happen since auth is required\n  }\n\n  if (userLoading) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"text-center\">\n            <div className=\"text-gray-600\">Loading...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"flex items-center justify-center h-full\">\n          <p className=\"text-gray-600\">User not found</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Hero Banner */}\n      <div \n        className=\"hero-banner from-amber to-hops relative\"\n        style={{\n          backgroundImage: `url('${user.headerImage || defaultHeaderImage}')`\n        }}\n      >\n        <div className=\"hero-overlay\" />\n        {/* Settings Gear Icon */}\n        <div className=\"absolute top-4 right-4 z-20\">\n          <EditProfileDialog user={user} userId={userId || \"\"} />\n        </div>\n      </div>\n\n      {/* Profile Content */}\n      <div className=\"px-6 -mt-16 relative z-10 pb-20\">\n        {/* Profile Photo & Info */}\n        <div className=\"flex flex-col items-center mb-4\">\n          <img \n            src={user.profileImage || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"} \n            alt=\"Profile\" \n            className=\"w-20 h-20 rounded-full border-4 border-white shadow-lg object-cover mb-2\"\n          />\n          <h2 className=\"text-xl font-bold text-black bg-white px-3 py-1 rounded-lg\">{user.username || user.name}</h2>\n        </div>\n\n        {/* Stats Cards */}\n        <Card className=\"mb-4\">\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-hops\">{user.checkins}</div>\n                <div className=\"text-xs text-gray-600\">Check-ins</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-accent-pink\">#{leaderboardRank + 1}</div>\n                <div className=\"text-xs text-gray-600\">Rank</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-hops\">{badge?.name?.replace(' Hop', '') || 'None'}</div>\n                <div className=\"text-xs text-gray-600\">Badge</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Badge */}\n        {badge && (\n          <div className=\"mb-4 text-center\">\n            <img \n              src={badge.icon} \n              alt={badge.name}\n              className=\"w-[400px] h-[100px] object-contain rounded-lg mx-auto\"\n              onError={(e) => {\n                console.log('Badge image failed to load:', badge.icon);\n                // Try alternative Google Drive URL format\n                const fileId = badge.icon.match(/id=([a-zA-Z0-9-_]+)/)?.[1];\n                if (fileId) {\n                  e.currentTarget.src = `https://lh3.googleusercontent.com/d/${fileId}`;\n                }\n              }}\n            />\n            {badge.nextBadgeAt && (\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Next badge at {badge.nextBadgeAt} check-ins\n              </p>\n            )}\n          </div>\n        )}\n\n        {/* Leaderboard Button */}\n        <Link href=\"/leaderboard\">\n          <Button className=\"w-full bg-hops hover:bg-hops-dark text-white mb-4\">\n            <Trophy className=\"w-4 h-4 mr-2\" />\n            View Leaderboard\n          </Button>\n        </Link>\n\n        {/* Favorite Breweries */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"text-lg font-semibold\">Favorite Breweries</h3>\n          </div>\n\n          {favoriteBreweries.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Heart className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n              <p>No favorite breweries yet</p>\n              <p className=\"text-sm\">Explore breweries to add favorites</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {favoriteBreweries.map((brewery) => (\n                <div key={brewery.id} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n                  <Link href={`/brewery/${brewery.id}`} className=\"flex items-center space-x-3 flex-1\">\n                    <img \n                      src={convertGoogleDriveImageUrl(brewery.logo) || `https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200`} \n                      alt={brewery.name}\n                      className=\"w-12 h-12 rounded-lg object-cover\"\n                      onError={(e) => {\n                        e.currentTarget.src = `https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200`;\n                      }}\n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\">{brewery.name}</h4>\n                      <p className=\"text-sm text-gray-600 flex items-center\">\n                        <MapPin className=\"w-3 h-3 mr-1\" />\n                        {brewery.city}, {brewery.state}\n                      </p>\n                    </div>\n                  </Link>\n                  <button\n                    onClick={(e) => {\n                      e.preventDefault();\n                      removeFavoriteMutation.mutate(brewery.id);\n                    }}\n                    disabled={removeFavoriteMutation.isPending}\n                    className=\"p-1 hover:bg-red-100 rounded transition-colors\"\n                  >\n                    <Heart \n                      className=\"w-5 h-5 text-red-500\" \n                      fill=\"currentColor\"\n                    />\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Logout Button */}\n        <Button \n          onClick={logout} \n          variant=\"outline\" \n          className=\"w-full mt-6 text-red-600 border-red-600 hover:bg-red-50\"\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Sign Out\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8194},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: ['image/*'], // Only allow images for profile photos\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName} type=\"button\">\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2988},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"client/src/pages/special-event-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Clock, MapPin, ExternalLink, ArrowLeft, Edit } from \"lucide-react\";\nimport { Link, useParams } from \"wouter\";\nimport { SpecialEventEditModal } from \"@/components/special-event-edit-modal\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { openSmartLink } from \"@/lib/linkHandler\";\nimport type { SpecialEvent } from \"@shared/schema\";\n\n// Helper function to format date from YYYY-MM-DD to \"Month Day, Year\"\nfunction formatEventDate(dateString: string): string {\n  // If already in the correct format (contains comma and year), return as is\n  if (dateString.includes(',') && dateString.includes('20')) {\n    return dateString;\n  }\n  \n  // Parse the date string as YYYY-MM-DD without timezone issues\n  if (dateString.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n    const [year, month, day] = dateString.split('-').map(Number);\n    \n    const monthNames = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    \n    return `${monthNames[month - 1]} ${day}, ${year}`;\n  }\n  \n  return dateString;\n}\n\n// Helper function to convert object storage paths to proper URLs\nfunction getImageUrl(imagePath: string): string {\n  if (!imagePath) return '';\n  \n  // If it's already a full URL, return as is\n  if (imagePath.startsWith('http')) {\n    return imagePath;\n  }\n  \n  // Convert object storage path to accessible URL\n  if (imagePath.startsWith('/') && imagePath.includes('uploads/')) {\n    // Extract the object ID from the path\n    const parts = imagePath.split('/');\n    const objectId = parts[parts.length - 1];\n    return `/objects/uploads/${objectId}`;\n  }\n  \n  return imagePath;\n}\n\nexport default function SpecialEventDetail() {\n  const { id } = useParams();\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const { user: currentUser } = useAuth();\n  \n  const { data: event, isLoading } = useQuery<SpecialEvent>({\n    queryKey: [`/api/special-events/${id}`],\n  });\n\n  // Use authenticated user from useAuth hook\n\n  // Check if user can edit this event\n  const canEdit = currentUser && event && (\n    currentUser.email === 'joshuamdelozier@gmail.com' || // Master admin (only joshuamdelozier@gmail.com)\n    event.ownerId === currentUser.id // Event owner\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"px-6 py-6 space-y-4\">\n          <div className=\"animate-pulse\">\n            <div className=\"w-full h-64 bg-gray-300 rounded mb-4\"></div>\n            <div className=\"h-6 bg-gray-300 rounded mb-2\"></div>\n            <div className=\"h-4 bg-gray-300 rounded w-1/2 mb-4\"></div>\n            <div className=\"space-y-2\">\n              <div className=\"h-3 bg-gray-300 rounded\"></div>\n              <div className=\"h-3 bg-gray-300 rounded\"></div>\n              <div className=\"h-3 bg-gray-300 rounded w-3/4\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!event) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"px-6 py-6 text-center\">\n          <h2 className=\"text-xl font-bold mb-4\">Event Not Found</h2>\n          <p className=\"text-gray-600 mb-4\">The event you're looking for doesn't exist.</p>\n          <Link href=\"/events\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Events\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container pb-20\">\n      <div className=\"px-6 py-6\">\n        {/* Header with Back Button and Edit Button */}\n        <div className=\"flex justify-between items-center mb-4\">\n          <Link href=\"/events\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Events\n            </Button>\n          </Link>\n          \n          {canEdit && (\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsEditModalOpen(true)}\n              className=\"border-[#80bc04] text-[#80bc04] hover:bg-[#80bc04] hover:text-white\"\n            >\n              <Edit className=\"w-4 h-4 mr-2\" />\n              Edit Event\n            </Button>\n          )}\n        </div>\n\n        <Card className=\"overflow-hidden\">\n          {/* Full Event Photo - shows complete image regardless of dimensions */}\n          {event.logo && (\n            <div className=\"w-full\">\n              <img \n                src={getImageUrl(event.logo)} \n                alt={event.event}\n                className=\"w-full h-auto\"\n                onError={(e) => {\n                  // Hide image if it fails to load\n                  e.currentTarget.style.display = 'none';\n                }}\n              />\n            </div>\n          )}\n          \n          <CardContent className=\"p-6\">\n            {/* Event Name */}\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              {event.event}\n            </h1>\n            \n            {/* Company */}\n            <p className=\"text-lg text-[#80bc04] font-semibold mb-4\">\n              {event.company}\n            </p>\n\n            {/* Date and Time */}\n            <div className=\"flex items-center text-gray-700 mb-3\">\n              <Calendar className=\"w-5 h-5 mr-2\" />\n              <span className=\"mr-4 font-medium\">{formatEventDate(event.date)}</span>\n              <Clock className=\"w-5 h-5 mr-2\" />\n              <span className=\"font-medium\">{event.time}</span>\n            </div>\n\n            {/* Location */}\n            <div className=\"flex items-start text-gray-700 mb-4\">\n              <MapPin className=\"w-5 h-5 mr-2 mt-0.5\" />\n              <div>\n                <p className=\"font-medium\">\n                  {event.location || event.address}\n                </p>\n                {event.location && event.address && event.location !== event.address && (\n                  <p className=\"text-sm text-gray-600\">\n                    {event.address}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Badges */}\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              <Badge \n                variant={event.rsvpRequired ? \"default\" : \"secondary\"}\n                className={event.rsvpRequired ? \"bg-[#ff55e1] text-white\" : \"bg-green-100 text-green-800\"}\n              >\n                {event.rsvpRequired ? \"RSVP Required\" : \"Open Event\"}\n              </Badge>\n              \n              {event.taproom && (\n                <Badge className=\"bg-[#80bc04] text-white\">\n                  Taproom Event\n                </Badge>\n              )}\n            </div>\n\n            {/* Event Details */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold mb-2\">Event Details</h3>\n              <div className=\"prose prose-sm text-gray-700 whitespace-pre-wrap\">\n                {event.details}\n              </div>\n            </div>\n\n            {/* Ticket Link */}\n            {event.ticketLink && (\n              <div className=\"flex justify-center\">\n                <Button\n                  size=\"lg\"\n                  className=\"bg-[#ff55e1] hover:bg-[#ff55e1]/90 text-white\"\n                  onClick={() => openSmartLink(event.ticketLink!)}\n                >\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  Get Tickets\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Modal */}\n        {event && (\n          <SpecialEventEditModal\n            event={event}\n            isOpen={isEditModalOpen}\n            onClose={() => setIsEditModalOpen(false)}\n          />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":7957},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `public, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Normalizes an object entity path\n  normalizeObjectEntityPath(url: string): string {\n    try {\n      const urlObj = new URL(url);\n      const pathParts = urlObj.pathname.split('/');\n      const objectId = pathParts[pathParts.length - 1];\n      return `/objects/uploads/${objectId}`;\n    } catch (error) {\n      return url;\n    }\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Searches for a public object\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    try {\n      const publicDir = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n      if (!publicDir) {\n        throw new Error(\"PUBLIC_OBJECT_SEARCH_PATHS not set\");\n      }\n\n      const fullPath = `${publicDir}/${filePath}`;\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const objectFile = bucket.file(objectName);\n      const [exists] = await objectFile.exists();\n      \n      if (!exists) {\n        return null;\n      }\n      \n      return objectFile;\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return null;\n    }\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":6714},"client/src/components/CreateSpecialEventModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { UploadResult } from \"@uppy/core\";\n\ninterface CreateSpecialEventModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface CreateEventForm {\n  company: string;\n  event: string;\n  details: string;\n  time: string;\n  date: string;\n  address: string;\n  location: string;\n  rsvpRequired: boolean;\n  ticketLink: string;\n  logo: string;\n}\n\nexport function CreateSpecialEventModal({ open, onOpenChange }: CreateSpecialEventModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState<CreateEventForm>({\n    company: \"\",\n    event: \"\",\n    details: \"\",\n    time: \"\",\n    date: \"\",\n    address: \"\",\n    location: \"\",\n    rsvpRequired: false,\n    ticketLink: \"\",\n    logo: \"\",\n  });\n\n  const [uploadedImagePreview, setUploadedImagePreview] = useState<string>(\"\");\n\n  const handleInputChange = (field: keyof CreateEventForm, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleGetUploadParameters = async () => {\n    const response = await fetch('/api/objects/upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    const data = await response.json();\n    return {\n      method: 'PUT' as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = async (result: UploadResult<any, any>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const imageUrl = uploadedFile.uploadURL;\n      \n      try {\n        // Set ACL policy for the uploaded image\n        const response = await fetch('/api/event-images', {\n          method: 'PUT',\n          headers: {\n            'x-user-id': 'joshuamdelozier',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ imageUrl }),\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          const normalizedPath = data.objectPath;\n          \n          // Update form data with the normalized object path\n          setFormData(prev => ({ ...prev, logo: normalizedPath }));\n          setUploadedImagePreview(normalizedPath);\n          \n          toast({\n            title: \"Image uploaded successfully\",\n            description: \"Event image has been uploaded and will be saved with the event.\",\n          });\n        } else {\n          throw new Error('Failed to process image');\n        }\n      } catch (error) {\n        console.error('Error processing image:', error);\n        toast({\n          title: \"Image processing failed\",\n          description: \"Please try uploading again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: CreateEventForm) => {\n      const response = await fetch('/api/special-events', {\n        method: 'POST',\n        headers: {\n          'x-user-id': 'joshuamdelozier',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(eventData),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create event');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event created successfully\",\n        description: \"Your special event has been created and is now visible to all users.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/special-events\"] });\n      onOpenChange(false);\n      // Reset form\n      setFormData({\n        company: \"\",\n        event: \"\",\n        details: \"\",\n        time: \"\",\n        date: \"\",\n        address: \"\",\n        location: \"\",\n        rsvpRequired: false,\n        ticketLink: \"\",\n        logo: \"\",\n      });\n      setUploadedImagePreview(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to create event\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Basic validation\n    if (!formData.company || !formData.event || !formData.details || !formData.date || !formData.time) {\n      toast({\n        title: \"Please fill in all required fields\",\n        description: \"Company, Event Name, Details, Date, and Time are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createEventMutation.mutate(formData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create Special Event</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"company\">Company *</Label>\n            <Input\n              id=\"company\"\n              value={formData.company}\n              onChange={(e) => handleInputChange(\"company\", e.target.value)}\n              placeholder=\"Company or organization name\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"event\">Event Name *</Label>\n            <Input\n              id=\"event\"\n              value={formData.event}\n              onChange={(e) => handleInputChange(\"event\", e.target.value)}\n              placeholder=\"Name of the event\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"details\">Event Details *</Label>\n            <Textarea\n              id=\"details\"\n              value={formData.details}\n              onChange={(e) => handleInputChange(\"details\", e.target.value)}\n              placeholder=\"Detailed description of the event\"\n              required\n              rows={3}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"date\">Date *</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                value={formData.date}\n                onChange={(e) => handleInputChange(\"date\", e.target.value)}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"time\">Time *</Label>\n              <Input\n                id=\"time\"\n                value={formData.time}\n                onChange={(e) => handleInputChange(\"time\", e.target.value)}\n                placeholder=\"e.g., 7:00 PM - 10:00 PM\"\n                required\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"address\">Address *</Label>\n            <Input\n              id=\"address\"\n              value={formData.address}\n              onChange={(e) => handleInputChange(\"address\", e.target.value)}\n              placeholder=\"Full address\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"location\">Location (Leave blank if in your taproom)</Label>\n            <Input\n              id=\"location\"\n              value={formData.location}\n              onChange={(e) => handleInputChange(\"location\", e.target.value)}\n              placeholder=\"Specific location details (optional)\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"rsvpRequired\"\n              checked={formData.rsvpRequired}\n              onCheckedChange={(checked) => handleInputChange(\"rsvpRequired\", checked as boolean)}\n            />\n            <Label htmlFor=\"rsvpRequired\">RSVP Required</Label>\n          </div>\n\n          <div>\n            <Label htmlFor=\"ticketLink\">Ticket Link</Label>\n            <Input\n              id=\"ticketLink\"\n              value={formData.ticketLink}\n              onChange={(e) => handleInputChange(\"ticketLink\", e.target.value)}\n              placeholder=\"Link to purchase tickets (optional)\"\n            />\n          </div>\n\n          <div>\n            <Label>Event Image</Label>\n            <div className=\"mt-2\">\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10485760}\n                onGetUploadParameters={handleGetUploadParameters}\n                onComplete={handleUploadComplete}\n                buttonClassName=\"w-full bg-[#ff55e1] hover:bg-[#ff55e1]/90 text-white\"\n              >\n                <span>Upload Event Image</span>\n              </ObjectUploader>\n              \n              {uploadedImagePreview && (\n                <div className=\"mt-3\">\n                  <p className=\"text-sm text-gray-600 mb-2\">Image preview:</p>\n                  <img \n                    src={uploadedImagePreview} \n                    alt=\"Event preview\"\n                    className=\"w-full h-32 object-cover rounded-md border\"\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createEventMutation.isPending}\n              className=\"flex-1 bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\"\n            >\n              {createEventMutation.isPending ? \"Creating...\" : \"Create Event\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10258},"client/src/components/special-event-edit-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport type { SpecialEvent } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\n\n// Helper function to convert object storage paths to proper URLs\nfunction getImageUrl(imagePath: string): string {\n  if (!imagePath) return '';\n  \n  // If it's already a full URL, return as is\n  if (imagePath.startsWith('http')) {\n    return imagePath;\n  }\n  \n  // Convert object storage path to accessible URL\n  if (imagePath.startsWith('/') && imagePath.includes('uploads/')) {\n    // Extract the object ID from the path\n    const parts = imagePath.split('/');\n    const objectId = parts[parts.length - 1];\n    return `/objects/uploads/${objectId}`;\n  }\n  \n  return imagePath;\n}\n\ninterface SpecialEventEditModalProps {\n  event: SpecialEvent;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function SpecialEventEditModal({ event, isOpen, onClose }: SpecialEventEditModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    company: event.company,\n    event: event.event,\n    details: event.details,\n    time: event.time,\n    date: event.date,\n    address: event.address,\n    location: event.location || '',\n    logo: event.logo || '',\n    rsvpRequired: event.rsvpRequired,\n    ticketLink: event.ticketLink || '',\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (updates: Partial<SpecialEvent>) => {\n      // Get current user ID - in a real app this would come from auth context\n      const userId = 'joshuamdelozier'; // Hardcoded for demo - replace with actual auth\n      \n      const response = await fetch(`/api/special-events/${event.id}`, {\n        method: 'PUT',\n        headers: {\n          'x-user-id': userId,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updates),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update event');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Event updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/special-events'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/special-events/${event.id}`] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const updates = {\n      ...formData,\n      location: formData.location || null,\n      logo: formData.logo || null,\n      ticketLink: formData.ticketLink || null,\n    };\n    \n    updateMutation.mutate(updates);\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleGetUploadParameters = async () => {\n    const response = await fetch('/api/objects/upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    const data = await response.json();\n    return {\n      method: 'PUT' as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = async (result: UploadResult<any, any>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const imageUrl = uploadedFile.uploadURL;\n      \n      try {\n        // Process the uploaded image with ACL policy\n        const response = await fetch('/api/event-images', {\n          method: 'PUT',\n          headers: {\n            'x-user-id': 'joshuamdelozier',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ imageUrl }),\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          const normalizedPath = data.objectPath;\n          \n          // Update form data with the normalized object path\n          handleInputChange('logo', normalizedPath);\n          \n          toast({\n            title: \"Image uploaded successfully\",\n            description: \"Event image has been uploaded and will be saved.\",\n          });\n        } else {\n          throw new Error('Failed to process image');\n        }\n      } catch (error) {\n        console.error('Error processing image:', error);\n        toast({\n          title: \"Image processing failed\",\n          description: \"Please try uploading again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      const userId = 'joshuamdelozier';\n      \n      const response = await fetch(`/api/special-events/${event.id}`, {\n        method: 'DELETE',\n        headers: {\n          'x-user-id': userId,\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete event');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event deleted\",\n        description: \"The special event has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/special-events'] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteConfirm = () => {\n    deleteMutation.mutate();\n    setShowDeleteDialog(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Special Event</DialogTitle>\n          <DialogDescription>\n            Update the information for this special event.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"company\">Company</Label>\n              <Input\n                id=\"company\"\n                value={formData.company}\n                onChange={(e) => handleInputChange('company', e.target.value)}\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"event\">Event Name</Label>\n              <Input\n                id=\"event\"\n                value={formData.event}\n                onChange={(e) => handleInputChange('event', e.target.value)}\n                required\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"details\">Event Details</Label>\n            <Textarea\n              id=\"details\"\n              value={formData.details}\n              onChange={(e) => handleInputChange('details', e.target.value)}\n              rows={4}\n              required\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"date\">Date</Label>\n              <Input\n                id=\"date\"\n                value={formData.date}\n                onChange={(e) => handleInputChange('date', e.target.value)}\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"time\">Time</Label>\n              <Input\n                id=\"time\"\n                value={formData.time}\n                onChange={(e) => handleInputChange('time', e.target.value)}\n                required\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"address\">Address</Label>\n            <Input\n              id=\"address\"\n              value={formData.address}\n              onChange={(e) => handleInputChange('address', e.target.value)}\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"location\">Location (Leave blank if in your taproom)</Label>\n            <Input\n              id=\"location\"\n              value={formData.location}\n              onChange={(e) => handleInputChange('location', e.target.value)}\n              placeholder=\"e.g., Specific venue name\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"logo\">Event Image</Label>\n            <div className=\"space-y-3\">\n              {formData.logo && (\n                <div className=\"w-full\">\n                  <img \n                    src={getImageUrl(formData.logo)} \n                    alt=\"Current event image\"\n                    className=\"w-full h-32 object-cover rounded-md border\"\n                    onError={(e) => {\n                      // If image fails to load, hide it\n                      e.currentTarget.style.display = 'none';\n                    }}\n                  />\n                </div>\n              )}\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10485760}\n                onGetUploadParameters={handleGetUploadParameters}\n                onComplete={handleUploadComplete}\n                buttonClassName=\"w-full bg-[#ff55e1] hover:bg-[#ff55e1]/90 text-white\"\n              >\n                <span>Upload New Image</span>\n              </ObjectUploader>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"rsvpRequired\"\n              checked={formData.rsvpRequired}\n              onCheckedChange={(checked) => handleInputChange('rsvpRequired', checked)}\n            />\n            <Label htmlFor=\"rsvpRequired\">RSVP Required</Label>\n          </div>\n\n          <div>\n            <Label htmlFor=\"ticketLink\">Ticket Link (Optional)</Label>\n            <Input\n              id=\"ticketLink\"\n              value={formData.ticketLink}\n              onChange={(e) => handleInputChange('ticketLink', e.target.value)}\n              placeholder=\"https://example.com/tickets\"\n            />\n          </div>\n\n          <div className=\"flex justify-between pt-4\">\n            <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n              <AlertDialogTrigger asChild>\n                <Button \n                  type=\"button\" \n                  variant=\"destructive\"\n                  disabled={deleteMutation.isPending}\n                >\n                  {deleteMutation.isPending ? \"Deleting...\" : \"Delete Event\"}\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Confirm Delete</AlertDialogTitle>\n                  <AlertDialogDescription className=\"sr-only\">\n                    Confirm deletion of this event\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction onClick={handleDeleteConfirm}>OK</AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n            \n            <div className=\"flex space-x-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateMutation.isPending}\n                className=\"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\"\n              >\n                {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </div>\n          </div>\n        </form>\n      </DialogContent>\n\n      {/* Custom Delete Confirmation Dialog */}\n      \n    </Dialog>\n  );\n}","size_bytes":12791},"client/src/pages/weekly-events-day.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Clock, Plus, Edit } from \"lucide-react\";\nimport { Link, useParams } from \"wouter\";\nimport WeeklyEventCreateModal from \"@/components/weekly-event-create-modal\";\nimport WeeklyEventEditModal from \"@/components/weekly-event-edit-modal\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface WeeklyEvent {\n  id: string;\n  day: string;\n  brewery: string;\n  event: string;\n  title: string;\n  details: string;\n  time: string;\n  logo: string;\n  eventPhoto: string;\n  instagram: string;\n  twitter: string;\n  facebook: string;\n  address: string;\n}\n\ninterface Brewery {\n  id: string;\n  name: string;\n  latitude: string;\n  longitude: string;\n  address: string;\n  city: string;\n  state: string;\n}\n\n// Helper function to convert URLs to accessible format\nfunction getImageUrl(imagePath: string): string {\n  if (!imagePath) return '';\n  \n  console.log('Processing image path:', imagePath);\n  \n  // If it's already a full URL (like Google Drive links), return as is\n  if (imagePath.startsWith('http')) {\n    // For Google Drive links, convert to direct image URLs\n    if (imagePath.includes('drive.google.com')) {\n      // Extract file ID from Google Drive share link\n      const match = imagePath.match(/\\/file\\/d\\/([a-zA-Z0-9_-]+)/);\n      if (match) {\n        return `https://drive.google.com/uc?export=view&id=${match[1]}`;\n      }\n    }\n    return imagePath;\n  }\n  \n  // Convert object storage path to accessible URL\n  if (imagePath.startsWith('/objects/uploads/')) {\n    // Already in correct format, return as-is\n    console.log('Using existing path:', imagePath);\n    return imagePath;\n  }\n  \n  // Handle malformed object paths like \"/objects/uploads/view\"\n  if (imagePath === '/objects/uploads/view' || imagePath.endsWith('/view')) {\n    console.log('Detected malformed path:', imagePath);\n    return ''; // Return empty to hide broken images\n  }\n  \n  // Handle other object storage paths\n  if (imagePath.startsWith('/') && imagePath.includes('uploads/')) {\n    const parts = imagePath.split('/');\n    const objectId = parts[parts.length - 1];\n    const correctedPath = `/objects/uploads/${objectId}`;\n    console.log('Corrected path from', imagePath, 'to', correctedPath);\n    return correctedPath;\n  }\n  \n  console.log('Returning original path:', imagePath);\n  return imagePath;\n}\n\n// Function to calculate distance between two coordinates using Haversine formula\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 3959; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nexport default function WeeklyEventsDay() {\n  const { day } = useParams();\n  const [userLocation, setUserLocation] = useState<{lat: number, lon: number} | null>(null);\n  const [locationError, setLocationError] = useState<string | null>(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<WeeklyEvent | null>(null);\n  const { user: currentUser } = useAuth();\n  \n  const { data: weeklyEvents = [], isLoading } = useQuery<WeeklyEvent[]>({\n    queryKey: [`/api/weekly-events/${day}`],\n  });\n\n  const { data: breweries = [] } = useQuery<Brewery[]>({\n    queryKey: ['/api/breweries'],\n  });\n\n  // Use authenticated user from useAuth hook instead of hardcoded query\n\n  // Get user's current location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          });\n        },\n        (error) => {\n          console.error('Error getting location:', error);\n          setLocationError('Location access denied or unavailable');\n        }\n      );\n    } else {\n      setLocationError('Geolocation not supported');\n    }\n  }, []);\n\n  // Sort events by brewery distance from user's location\n  const sortedEvents = userLocation ? [...weeklyEvents].sort((a, b) => {\n    // Find brewery coordinates for each event\n    const breweryA = breweries.find((brewery) => \n      brewery.name.toUpperCase() === a.brewery.toUpperCase()\n    );\n    const breweryB = breweries.find((brewery) => \n      brewery.name.toUpperCase() === b.brewery.toUpperCase()\n    );\n    \n    if (!breweryA || !breweryB) {\n      // If we can't find brewery data, put events without brewery data at the end\n      if (!breweryA && !breweryB) return 0;\n      if (!breweryA) return 1;\n      if (!breweryB) return -1;\n      return 0;\n    }\n    \n    const distanceA = calculateDistance(\n      userLocation.lat, \n      userLocation.lon, \n      parseFloat(breweryA.latitude), \n      parseFloat(breweryA.longitude)\n    );\n    \n    const distanceB = calculateDistance(\n      userLocation.lat, \n      userLocation.lon, \n      parseFloat(breweryB.latitude), \n      parseFloat(breweryB.longitude)\n    );\n    \n    // Removed debug logging - sorting is working correctly\n    \n    // Sort ascending (closest first)\n    return distanceA - distanceB;\n  }) : weeklyEvents;\n\n  if (isLoading) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"px-6 py-6\">\n          <div className=\"flex items-center mb-6\">\n            <Link href=\"/events\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mr-3\">\n                <ArrowLeft className=\"w-4 h-4 mr-1\" />\n                Back\n              </Button>\n            </Link>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Loading...</h1>\n          </div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-gray-200 rounded-lg h-32\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const dayName = day ? day.charAt(0).toUpperCase() + day.slice(1) : '';\n\n  return (\n    <div className=\"mobile-container\">\n      <div className=\"px-6 py-6 pb-20\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center\">\n            <Link href=\"/events\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mr-3\">\n                <ArrowLeft className=\"w-4 h-4 mr-1\" />\n                Back\n              </Button>\n            </Link>\n            <h1 className=\"text-2xl font-bold text-gray-900\">{dayName}</h1>\n          </div>\n          \n          {/* Admin/Owner Create Button */}\n          {currentUser && ('email' in currentUser) && (currentUser.email === 'joshuamdelozier@gmail.com' || currentUser.role === 'brewery_owner') && (\n            <Button \n              className=\"bg-[#1a5632] hover:bg-[#1a5632]/90 text-white\"\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Event\n            </Button>\n          )}\n        </div>\n\n        {/* Location Status */}\n        {locationError && (\n          <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <p className=\"text-sm text-yellow-800\">\n              {locationError} - Events shown in default order\n            </p>\n          </div>\n        )}\n\n        {/* Events List */}\n        {sortedEvents.length === 0 ? (\n          <div className=\"text-center py-12 text-gray-500\">\n            <Clock className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n            <h3 className=\"text-lg font-medium mb-2\">No events scheduled</h3>\n            <p>Check back later for {dayName} events!</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4 pb-8\">\n            {sortedEvents.filter(event => event.title && event.title.trim() !== '').map((event, index) => {\n              // Calculate distance for display\n              const brewery = breweries.find((b) => b.name === event.brewery);\n              const distance = userLocation && brewery ? \n                calculateDistance(\n                  userLocation.lat, \n                  userLocation.lon, \n                  parseFloat(brewery.latitude), \n                  parseFloat(brewery.longitude)\n                ).toFixed(1) : null;\n\n              return (\n              <Card key={event.id} className=\"overflow-hidden relative\">\n                {/* Event Photo */}\n                {event.eventPhoto && (\n                  <div className=\"w-full h-48 overflow-hidden\">\n                    <img \n                      src={getImageUrl(event.eventPhoto)} \n                      alt={event.title}\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        console.log('Image failed to load:', event.eventPhoto, 'Processed URL:', getImageUrl(event.eventPhoto));\n                        e.currentTarget.style.display = 'none';\n                      }}\n                    />\n                  </div>\n                )}\n                \n                <CardContent className=\"p-4\">\n                  {/* Brewery Logo and Name */}\n                  <div className=\"flex items-center mb-3\">\n                    {event.logo && (\n                      <img \n                        src={getImageUrl(event.logo)} \n                        alt={`${event.brewery} logo`}\n                        className=\"w-8 h-8 rounded-full mr-3 object-cover\"\n                        onError={(e) => {\n                          e.currentTarget.style.display = 'none';\n                        }}\n                      />\n                    )}\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-bold text-lg text-gray-900\">{event.title}</h3>\n                      <p className=\"text-sm text-[#80bc04] font-medium\">{event.brewery}</p>\n                    </div>\n                    \n                    {/* Edit Button - Only visible to admin/brewery owners */}\n                    {currentUser && ('email' in currentUser) && (currentUser.email === 'joshuamdelozier@gmail.com' || currentUser.role === 'brewery_owner') && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setEditingEvent(event);\n                          setIsEditModalOpen(true);\n                        }}\n                        className=\"text-gray-500 hover:text-gray-700\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                  </div>\n\n                  {/* Time */}\n                  <div className=\"mb-3\">\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <Clock className=\"w-4 h-4 mr-2\" />\n                      <span>{event.time}</span>\n                    </div>\n                  </div>\n\n                  {/* Event Details */}\n                  <p className=\"text-sm text-gray-700 leading-relaxed\">\n                    {event.details}\n                  </p>\n                </CardContent>\n              </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Create Modal */}\n        <WeeklyEventCreateModal\n          isOpen={isCreateModalOpen}\n          onClose={() => setIsCreateModalOpen(false)}\n          defaultDay={day}\n        />\n\n        {/* Edit Modal */}\n        {editingEvent && (\n          <WeeklyEventEditModal\n            isOpen={isEditModalOpen}\n            onClose={() => {\n              setIsEditModalOpen(false);\n              setEditingEvent(null);\n            }}\n            event={editingEvent}\n          />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":12231},"client/src/components/weekly-event-create-modal.tsx":{"content":"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { insertWeeklyEventSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\nconst formSchema = insertWeeklyEventSchema.extend({\n  day: z.enum(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']),\n  title: z.string().min(1, 'Event title is required'),\n  details: z.string().min(1, 'Event details are required'),\n}).transform((data) => ({\n  ...data,\n  day: data.day.charAt(0).toUpperCase() + data.day.slice(1), // Capitalize first letter to match existing data\n  event: data.title, // Use title as the event type\n  eventPhoto: data.eventPhoto || undefined,\n}));\n\ninterface WeeklyEventCreateModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  defaultDay?: string;\n}\n\ninterface Brewery {\n  id: string;\n  name: string;\n  address: string;\n}\n\nexport default function WeeklyEventCreateModal({\n  isOpen,\n  onClose,\n  defaultDay,\n}: WeeklyEventCreateModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadedImageUrl, setUploadedImageUrl] = useState<string>('');\n  const [isUploading, setIsUploading] = useState(false);\n\n  const { data: breweries = [] } = useQuery<Brewery[]>({\n    queryKey: ['/api/breweries'],\n  });\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      day: defaultDay as any || 'monday',\n      brewery: '',\n      event: '',\n      title: '',\n      details: '',\n      time: '',\n      eventPhoto: undefined,\n      address: '',\n    },\n  });\n\n  // Auto-populate address when brewery changes\n  const handleBreweryChange = (breweryName: string) => {\n    const selectedBrewery = breweries.find(b => b.name === breweryName);\n    if (selectedBrewery) {\n      form.setValue('address', selectedBrewery.address);\n    }\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Check file size (10MB limit)\n    if (file.size > 10485760) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select a file smaller than 10MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    \n    try {\n      // Get upload URL\n      const uploadResponse = await fetch('/api/objects/upload', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!uploadResponse.ok) {\n        throw new Error('Failed to get upload URL');\n      }\n      \n      const { uploadURL } = await uploadResponse.json();\n\n      // Upload file\n      const fileUploadResponse = await fetch(uploadURL, {\n        method: 'PUT',\n        body: file,\n        headers: {\n          'Content-Type': file.type,\n        },\n      });\n\n      if (!fileUploadResponse.ok) {\n        throw new Error('Failed to upload file');\n      }\n\n      const objectPath = convertUploadUrlToObjectPath(uploadURL);\n      setUploadedImageUrl(objectPath);\n      \n      toast({\n        title: \"Photo Uploaded\",\n        description: \"Event photo uploaded successfully!\",\n      });\n      \n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload photo. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n      // Reset file input\n      event.target.value = '';\n    }\n  };\n\n  const createWeeklyEventMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      // Use uploaded image URL if available\n      const finalData = {\n        ...data,\n        eventPhoto: uploadedImageUrl || data.eventPhoto,\n      };\n\n      const response = await fetch('/api/weekly-events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-user-id': 'joshuamdelozier', // TODO: Make this dynamic based on actual user\n        },\n        body: JSON.stringify(finalData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create weekly event');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Weekly event created successfully!\",\n      });\n      // Reset form and close modal first\n      form.reset();\n      setUploadedImageUrl('');\n      onClose();\n      \n      // Force refresh the data immediately\n      queryClient.invalidateQueries({ queryKey: ['/api/weekly-events'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/weekly-events/${defaultDay}`] });\n      \n      // Force refetch to get the latest data\n      setTimeout(() => {\n        queryClient.refetchQueries({ queryKey: [`/api/weekly-events/${defaultDay}`] });\n      }, 200);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create weekly event. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error('Error creating weekly event:', error);\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    createWeeklyEventMutation.mutate(data);\n  };\n\n  const convertUploadUrlToObjectPath = (uploadUrl: string): string => {\n    try {\n      const url = new URL(uploadUrl);\n      const pathParts = url.pathname.split('/');\n      const objectId = pathParts[pathParts.length - 1];\n      return `/objects/uploads/${objectId}`;\n    } catch (error) {\n      return uploadUrl;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New Weekly Event</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"day\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Day</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select day\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"monday\">Monday</SelectItem>\n                        <SelectItem value=\"tuesday\">Tuesday</SelectItem>\n                        <SelectItem value=\"wednesday\">Wednesday</SelectItem>\n                        <SelectItem value=\"thursday\">Thursday</SelectItem>\n                        <SelectItem value=\"friday\">Friday</SelectItem>\n                        <SelectItem value=\"saturday\">Saturday</SelectItem>\n                        <SelectItem value=\"sunday\">Sunday</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"brewery\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Brewery</FormLabel>\n                    <Select onValueChange={(value) => {\n                      field.onChange(value);\n                      handleBreweryChange(value);\n                    }} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select brewery\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {breweries.map((brewery) => (\n                          <SelectItem key={brewery.id} value={brewery.name}>\n                            {brewery.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Event Title</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter event title\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n\n\n            <FormField\n              control={form.control}\n              name=\"details\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Details</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter event details...\"\n                      className=\"min-h-[100px]\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"time\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Time</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., 7:00 PM\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Auto-populated from brewery\" {...field} disabled />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Event Photo (Optional)</label>\n                <div className=\"mt-2\">\n                  <input\n                    type=\"file\"\n                    id=\"eventPhoto\"\n                    accept=\"image/*\"\n                    className=\"hidden\"\n                    onChange={handleFileUpload}\n                    disabled={isUploading}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"w-full h-12 bg-gray-100 hover:bg-gray-200 text-gray-700 border border-dashed border-gray-300\"\n                    onClick={() => document.getElementById('eventPhoto')?.click()}\n                    disabled={isUploading}\n                  >\n                    {isUploading ? (\n                      <>⏳ Uploading...</>\n                    ) : uploadedImageUrl ? (\n                      <>📷 Change Event Photo</>\n                    ) : (\n                      <>📷 Upload Event Photo</>\n                    )}\n                  </Button>\n                  {uploadedImageUrl && (\n                    <div className=\"mt-3 space-y-2\">\n                      <p className=\"text-sm text-green-700\">✓ Photo uploaded successfully</p>\n                      <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n                        <img \n                          src={uploadedImageUrl} \n                          alt=\"Event photo preview\" \n                          className=\"w-full h-32 object-cover\"\n                          onError={(e) => {\n                            e.currentTarget.style.display = 'none';\n                          }}\n                        />\n                      </div>\n                      <button \n                        type=\"button\"\n                        onClick={() => setUploadedImageUrl('')}\n                        className=\"text-xs text-red-600 hover:text-red-800\"\n                      >\n                        Remove photo\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-4 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"bg-[#1a5632] hover:bg-[#1a5632]/90\"\n                disabled={createWeeklyEventMutation.isPending}\n              >\n                {createWeeklyEventMutation.isPending ? \"Creating...\" : \"Create Event\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14023},"client/src/components/weekly-event-edit-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { insertWeeklyEventSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst formSchema = insertWeeklyEventSchema.extend({\n  day: z.enum(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']),\n  title: z.string().min(1, 'Event title is required'),\n  details: z.string().min(1, 'Event details are required'),\n}).transform((data) => ({\n  ...data,\n  day: data.day.charAt(0).toUpperCase() + data.day.slice(1), // Capitalize first letter to match existing data\n  event: data.title, // Use title as the event type\n  eventPhoto: data.eventPhoto || undefined,\n}));\n\ninterface WeeklyEvent {\n  id: string;\n  day: string;\n  brewery: string;\n  event: string;\n  title: string;\n  details: string;\n  time: string;\n  logo: string;\n  eventPhoto: string;\n  instagram: string;\n  twitter: string;\n  facebook: string;\n  address: string;\n}\n\ninterface WeeklyEventEditModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  event: WeeklyEvent;\n}\n\ninterface Brewery {\n  id: string;\n  name: string;\n  address: string;\n}\n\nexport default function WeeklyEventEditModal({\n  isOpen,\n  onClose,\n  event,\n}: WeeklyEventEditModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadedImageUrl, setUploadedImageUrl] = useState<string>('');\n  const [isUploading, setIsUploading] = useState(false);\n\n  const { data: breweries = [] } = useQuery<Brewery[]>({\n    queryKey: ['/api/breweries'],\n  });\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      day: event.day.toLowerCase() as any,\n      brewery: event.brewery,\n      event: event.event,\n      title: event.title,\n      details: event.details,\n      time: event.time,\n      eventPhoto: event.eventPhoto || undefined,\n      address: event.address,\n    },\n  });\n\n  // Reset form when event changes\n  useEffect(() => {\n    if (event) {\n      form.reset({\n        day: event.day.toLowerCase() as any,\n        brewery: event.brewery,\n        event: event.event,\n        title: event.title,\n        details: event.details,\n        time: event.time,\n        eventPhoto: event.eventPhoto || undefined,\n        address: event.address,\n      });\n      setUploadedImageUrl(event.eventPhoto || '');\n    }\n  }, [event, form]);\n\n  // Auto-populate address when brewery changes\n  const handleBreweryChange = (breweryName: string) => {\n    const selectedBrewery = breweries.find(b => b.name === breweryName);\n    if (selectedBrewery) {\n      form.setValue('address', selectedBrewery.address);\n    }\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Check file size (10MB limit)\n    if (file.size > 10485760) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select a file smaller than 10MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      // Get presigned URL\n      const response = await fetch('/api/objects/upload', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get upload URL');\n      }\n\n      const { uploadURL } = await response.json();\n\n      // Upload file\n      const uploadResponse = await fetch(uploadURL, {\n        method: 'PUT',\n        body: file,\n        headers: {\n          'Content-Type': file.type,\n        },\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error('Failed to upload file');\n      }\n\n      setUploadedImageUrl(uploadURL);\n      form.setValue('eventPhoto', uploadURL);\n\n      toast({\n        title: \"Success\",\n        description: \"Photo uploaded successfully!\",\n      });\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const deleteWeeklyEventMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/weekly-events/${event.id}`, {\n        method: 'DELETE',\n        headers: {\n          'x-user-id': 'joshuamdelozier', // TODO: Make this dynamic based on actual user\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete weekly event');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Weekly event deleted successfully!\",\n      });\n      \n      onClose();\n      \n      // Force refresh the data immediately\n      queryClient.invalidateQueries({ queryKey: ['/api/weekly-events'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/weekly-events/${event.day.toLowerCase()}`] });\n      \n      // Force refetch to get the latest data\n      setTimeout(() => {\n        queryClient.refetchQueries({ queryKey: [`/api/weekly-events/${event.day.toLowerCase()}`] });\n      }, 200);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete weekly event. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error('Error deleting weekly event:', error);\n    },\n  });\n\n  const updateWeeklyEventMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      const finalData = {\n        ...data,\n        eventPhoto: uploadedImageUrl ? convertUploadUrlToObjectPath(uploadedImageUrl) : data.eventPhoto,\n      };\n\n      const response = await fetch(`/api/weekly-events/${event.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-user-id': 'joshuamdelozier', // TODO: Make this dynamic based on actual user\n        },\n        body: JSON.stringify(finalData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update weekly event');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Weekly event updated successfully!\",\n      });\n      \n      onClose();\n      \n      // Force refresh the data immediately\n      queryClient.invalidateQueries({ queryKey: ['/api/weekly-events'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/weekly-events/${event.day.toLowerCase()}`] });\n      \n      // Force refetch to get the latest data\n      setTimeout(() => {\n        queryClient.refetchQueries({ queryKey: [`/api/weekly-events/${event.day.toLowerCase()}`] });\n      }, 200);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update weekly event. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error('Error updating weekly event:', error);\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    updateWeeklyEventMutation.mutate(data);\n  };\n\n  const convertUploadUrlToObjectPath = (uploadUrl: string): string => {\n    try {\n      const url = new URL(uploadUrl);\n      const pathParts = url.pathname.split('/');\n      const objectId = pathParts[pathParts.length - 1];\n      return `/objects/uploads/${objectId}`;\n    } catch (error) {\n      return uploadUrl;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Weekly Event</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"day\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Day</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select day\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"monday\">Monday</SelectItem>\n                        <SelectItem value=\"tuesday\">Tuesday</SelectItem>\n                        <SelectItem value=\"wednesday\">Wednesday</SelectItem>\n                        <SelectItem value=\"thursday\">Thursday</SelectItem>\n                        <SelectItem value=\"friday\">Friday</SelectItem>\n                        <SelectItem value=\"saturday\">Saturday</SelectItem>\n                        <SelectItem value=\"sunday\">Sunday</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"brewery\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Brewery</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        handleBreweryChange(value);\n                      }} \n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select brewery\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {breweries.map((brewery) => (\n                          <SelectItem key={brewery.id} value={brewery.name}>\n                            {brewery.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Event Title</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter event title\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"details\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Details</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter event details...\"\n                      className=\"min-h-[100px]\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"time\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Time</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., 7:00 PM\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Auto-populated from brewery\" {...field} disabled />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Event Photo (Optional)</label>\n                <div className=\"mt-2\">\n                  <input\n                    type=\"file\"\n                    id=\"eventPhoto\"\n                    accept=\"image/*\"\n                    className=\"hidden\"\n                    onChange={handleFileUpload}\n                    disabled={isUploading}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"w-full h-12 bg-gray-100 hover:bg-gray-200 text-gray-700 border border-dashed border-gray-300\"\n                    onClick={() => document.getElementById('eventPhoto')?.click()}\n                    disabled={isUploading}\n                  >\n                    {isUploading ? (\n                      <>⏳ Uploading...</>\n                    ) : uploadedImageUrl ? (\n                      <>📷 Change Event Photo</>\n                    ) : (\n                      <>📷 Upload Event Photo</>\n                    )}\n                  </Button>\n                  {uploadedImageUrl && (\n                    <div className=\"mt-3 space-y-2\">\n                      <p className=\"text-sm text-green-700\">✓ Photo uploaded successfully</p>\n                      <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n                        <img \n                          src={uploadedImageUrl} \n                          alt=\"Event photo preview\" \n                          className=\"w-full h-32 object-cover\"\n                          onError={(e) => {\n                            e.currentTarget.style.display = 'none';\n                          }}\n                        />\n                      </div>\n                      <button \n                        type=\"button\"\n                        onClick={() => setUploadedImageUrl('')}\n                        className=\"text-xs text-red-600 hover:text-red-800\"\n                      >\n                        Remove photo\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-between pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"destructive\" \n                onClick={() => deleteWeeklyEventMutation.mutate()}\n                disabled={deleteWeeklyEventMutation.isPending}\n              >\n                {deleteWeeklyEventMutation.isPending ? \"Deleting...\" : \"Delete Event\"}\n              </Button>\n              \n              <div className=\"flex space-x-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"bg-[#1a5632] hover:bg-[#1a5632]/90\"\n                  disabled={updateWeeklyEventMutation.isPending}\n                >\n                  {updateWeeklyEventMutation.isPending ? \"Updating...\" : \"Update Event\"}\n                </Button>\n              </div>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16370},"scripts/update-brewery-logos.ts":{"content":"import { readFileSync } from 'fs';\nimport { parse } from 'csv-parse/sync';\nimport { db } from '../server/db';\nimport { breweries } from '../shared/schema';\nimport { eq, ilike } from 'drizzle-orm';\n\n// Read and parse the brewery logos CSV file\nconst csvContent = readFileSync('../attached_assets/Breweries (2)_1754260704812.csv', 'utf-8');\nconst records = parse(csvContent, {\n  columns: true,\n  skip_empty_lines: true,\n});\n\ninterface BreweryLogo {\n  Name: string;\n  Logo: string;\n}\n\nasync function updateBreweryLogos() {\n  console.log(`Processing ${records.length} brewery logo entries...`);\n  \n  let updatedCount = 0;\n  let notFoundCount = 0;\n  \n  for (const record of records as BreweryLogo[]) {\n    const breweryName = record.Name.trim();\n    const logoUrl = record.Logo.trim();\n    \n    try {\n      // Find the brewery by name (case-insensitive search)\n      const existingBreweries = await db\n        .select()\n        .from(breweries)\n        .where(eq(breweries.name, breweryName));\n      \n      if (existingBreweries.length > 0) {\n        // Update the brewery with the logo URL\n        await db\n          .update(breweries)\n          .set({ logo: logoUrl })\n          .where(eq(breweries.name, breweryName));\n        \n        console.log(`✓ Updated logo for: ${breweryName}`);\n        updatedCount++;\n      } else {\n        // Try to find similar names (in case of slight variations)\n        const allBreweries = await db.select().from(breweries);\n        const similarBrewery = allBreweries.find(b => \n          b.name.toLowerCase().includes(breweryName.toLowerCase()) ||\n          breweryName.toLowerCase().includes(b.name.toLowerCase())\n        );\n        \n        if (similarBrewery) {\n          await db\n            .update(breweries)\n            .set({ logo: logoUrl })\n            .where(eq(breweries.id, similarBrewery.id));\n          \n          console.log(`✓ Updated logo for similar match: ${breweryName} -> ${similarBrewery.name}`);\n          updatedCount++;\n        } else {\n          console.log(`✗ Brewery not found: ${breweryName}`);\n          notFoundCount++;\n        }\n      }\n    } catch (error) {\n      console.error(`Error updating ${breweryName}:`, error);\n    }\n  }\n  \n  console.log(`\\nSummary:`);\n  console.log(`- Updated: ${updatedCount} breweries`);\n  console.log(`- Not found: ${notFoundCount} breweries`);\n  console.log(`- Total processed: ${records.length} entries`);\n}\n\n// Run the update script\nupdateBreweryLogos()\n  .then(() => {\n    console.log('Brewery logo update completed!');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('Error updating brewery logos:', error);\n    process.exit(1);\n  });","size_bytes":2660},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for stored user data\n    const storedUser = localStorage.getItem(\"beer-hop-user\");\n    if (storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        setUser(userData);\n      } catch (error) {\n        console.error(\"Error parsing stored user data:\", error);\n        localStorage.removeItem(\"beer-hop-user\");\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const logout = () => {\n    localStorage.removeItem(\"beer-hop-user\");\n    setUser(null);\n    // Force page refresh to ensure proper state reset\n    window.location.href = \"/\";\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    logout,\n  };\n}","size_bytes":907},"client/src/pages/welcome.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowRight, Upload, User } from \"lucide-react\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport beerHopLogo from \"@assets/Beer Hop Logo_1754263599088.png\";\n\nexport default function Welcome() {\n  const [, setLocation] = useLocation();\n  const [email, setEmail] = useState(\"\");\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const [step, setStep] = useState<\"email\" | \"verification\" | \"profile\">(\"email\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const { toast } = useToast();\n\n  // Profile fields for new users\n  const [username, setUsername] = useState(\"\");\n  const [profileImageUrl, setProfileImageUrl] = useState(\"\");\n\n  const sendCodeMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await apiRequest(\"/api/auth/send-code\", \"POST\", { email });\n      return await response.json();\n    },\n    onSuccess: () => {\n      setUserEmail(email);\n      setStep(\"verification\");\n      toast({\n        title: \"Verification code sent\",\n        description: \"Check your email for a 6-digit verification code\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send code\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyCodeMutation = useMutation({\n    mutationFn: async ({ email, code }: { email: string; code: string }) => {\n      const response = await apiRequest(\"/api/auth/verify-code\", \"POST\", { email, code });\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      if (data.isNewUser) {\n        setStep(\"profile\");\n      } else {\n        // Store user data in localStorage for session management\n        localStorage.setItem(\"beer-hop-user\", JSON.stringify(data.user));\n        toast({\n          title: \"Welcome back!\",\n          description: `Good to see you again, ${data.user.name}`,\n        });\n        // Add a small delay to ensure the toast shows, then redirect\n        setTimeout(() => {\n          setLocation(\"/\");\n          // Force a page refresh to ensure proper state update\n          window.location.reload();\n        }, 1500);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Invalid code\",\n        description: error.message || \"Please check your code and try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const completeProfileMutation = useMutation({\n    mutationFn: async (profileData: { email: string; username: string; profileImageUrl: string | null }) => {\n      // First complete the profile\n      const response = await apiRequest(\"/api/auth/complete-profile\", \"POST\", profileData);\n      const result = await response.json();\n      \n      // If there's a profile image, set its ACL policy\n      if (profileData.profileImageUrl && result.user) {\n        try {\n          await apiRequest(\"/api/profile-images\", \"PUT\", {\n            profileImageURL: profileData.profileImageUrl,\n            userId: result.user.id,\n          });\n        } catch (error) {\n          console.error(\"Failed to set profile image ACL:\", error);\n          // Don't fail the entire profile creation for this\n        }\n      }\n      \n      return result;\n    },\n    onSuccess: (data: any) => {\n      // Store user data in localStorage for session management\n      localStorage.setItem(\"beer-hop-user\", JSON.stringify(data.user));\n      toast({\n        title: \"Welcome to Beer Hop!\",\n        description: \"Your account has been created successfully\",\n      });\n      // Add a small delay to ensure the toast shows, then redirect\n      setTimeout(() => {\n        setLocation(\"/\");\n        // Force a page refresh to ensure proper state update\n        window.location.reload();\n      }, 1500);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create account\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendCode = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email || !email.includes('@')) {\n      toast({\n        title: \"Invalid email\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendCodeMutation.mutate(email);\n  };\n\n  const handleVerifyCode = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!verificationCode || verificationCode.length !== 6) {\n      toast({\n        title: \"Invalid code\",\n        description: \"Please enter the 6-digit verification code\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    verifyCodeMutation.mutate({ email: userEmail, code: verificationCode });\n  };\n\n  const handleCompleteProfile = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username) {\n      toast({\n        title: \"Missing information\",\n        description: \"Username is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (!profileImageUrl) {\n      toast({\n        title: \"Missing information\",\n        description: \"Profile photo is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    completeProfileMutation.mutate({\n      email: userEmail,\n      username,\n      profileImageUrl,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\" style={{ backgroundColor: '#80bc04' }}>\n      <div className=\"w-full max-w-md\">\n        {/* Logo and Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <img \n              src={beerHopLogo} \n              alt=\"Beer Hop\" \n              className=\"h-24 w-auto\"\n            />\n          </div>\n          <p className=\"text-white\">Discover breweries and connect with other craft beer lovers</p>\n        </div>\n\n        {/* Email Step */}\n        {step === \"email\" && (\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle>\n                Welcome\n              </CardTitle>\n              <CardDescription className=\"text-center\">\n                Enter your email to receive a verification code.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSendCode} className=\"space-y-4\">\n                <Input\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  disabled={sendCodeMutation.isPending}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full text-white hover:opacity-90\"\n                  style={{ backgroundColor: '#80bc04' }}\n                  disabled={sendCodeMutation.isPending}\n                >\n                  {sendCodeMutation.isPending ? \"Sending...\" : \"Send Verification Code\"}\n                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Verification Step */}\n        {step === \"verification\" && (\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle>Enter Verification Code</CardTitle>\n              <CardDescription>\n                We sent a 6-digit code to {userEmail}. Check your email and enter it below.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleVerifyCode} className=\"space-y-4\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"123456\"\n                  value={verificationCode}\n                  onChange={(e) => setVerificationCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                  disabled={verifyCodeMutation.isPending}\n                  maxLength={6}\n                  className=\"text-center text-2xl tracking-widest\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full text-white hover:opacity-90\"\n                  style={{ backgroundColor: '#80bc04' }}\n                  disabled={verifyCodeMutation.isPending}\n                >\n                  {verifyCodeMutation.isPending ? \"Verifying...\" : \"Verify Code\"}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"ghost\" \n                  onClick={() => setStep(\"email\")}\n                  className=\"w-full\"\n                >\n                  Back to Email\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Profile Completion Step */}\n        {step === \"profile\" && (\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle>Complete Your Profile</CardTitle>\n              <CardDescription>\n                Just a few more details to get you started on Beer Hop.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleCompleteProfile} className=\"space-y-4\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value.toLowerCase().replace(/\\s/g, ''))}\n                  disabled={completeProfileMutation.isPending}\n                  required\n                />\n\n                {/* Profile Photo Upload */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700\">Profile Photo</label>\n                  <div className=\"flex items-center space-x-3\">\n                    {profileImageUrl ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-12 h-12 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden\">\n                          <img src={profileImageUrl} alt=\"Profile\" className=\"w-full h-full object-cover\" />\n                        </div>\n                        <span className=\"text-sm text-green-600\">Photo uploaded!</span>\n                      </div>\n                    ) : (\n                      <div className=\"w-12 h-12 rounded-full bg-gray-200 flex items-center justify-center\">\n                        <User className=\"w-6 h-6 text-gray-400\" />\n                      </div>\n                    )}\n                    <ObjectUploader\n                      maxNumberOfFiles={1}\n                      maxFileSize={5242880}\n                      onGetUploadParameters={async () => {\n                        const response = await apiRequest(\"/api/objects/upload\", \"POST\", {});\n                        const data = await response.json();\n                        return {\n                          method: \"PUT\" as const,\n                          url: data.uploadURL,\n                        };\n                      }}\n                      onComplete={(result) => {\n                        if (result.successful && result.successful[0]) {\n                          const uploadURL = result.successful[0].uploadURL;\n                          // Convert the upload URL to the object path for profile display\n                          const objectId = uploadURL.split('/').pop()?.split('?')[0];\n                          if (objectId) {\n                            setProfileImageUrl(`/objects/uploads/${objectId}`);\n                          }\n                          toast({\n                            title: \"Photo uploaded\",\n                            description: \"Your profile photo has been uploaded successfully\",\n                          });\n                        }\n                      }}\n                      buttonClassName=\"text-sm bg-pink-500 hover:bg-pink-600 text-white\"\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      {profileImageUrl ? \"Change Photo\" : \"Upload Photo\"}\n                    </ObjectUploader>\n                  </div>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full text-white hover:opacity-90\"\n                  style={{ backgroundColor: '#80bc04' }}\n                  disabled={completeProfileMutation.isPending}\n                >\n                  {completeProfileMutation.isPending ? \"Creating Account...\" : \"Complete Profile\"}\n                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Footer */}\n        <div className=\"text-center mt-6 text-sm text-white opacity-80\">\n          <p>\n            By continuing, you agree to our{\" \"}\n            <a href=\"/terms\" className=\"underline hover:opacity-80\">Terms of Service</a>\n            {\" \"}and{\" \"}\n            <a href=\"/privacy\" className=\"underline hover:opacity-80\">Privacy Policy</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13459},"server/emailService.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY environment variable must be set\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(process.env.SENDGRID_API_KEY);\n\ninterface EmailParams {\n  to: string;\n  from?: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    console.log('Attempting to send email to:', params.to);\n    const fromAddress = params.from || 'jdelozier@beerhopok.com';\n    await mailService.send({\n      to: params.to,\n      from: {\n        email: fromAddress,\n        name: 'Beer Hop'\n      },\n      subject: params.subject,\n      text: params.text || '',\n      html: params.html || '',\n    });\n    console.log('Email sent successfully to:', params.to);\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    if (error && typeof error === 'object' && 'response' in error) {\n      const response = (error as any).response;\n      console.error('SendGrid response status:', response?.status);\n      console.error('SendGrid response body:', JSON.stringify(response?.body, null, 2));\n      \n      if (response?.body?.errors) {\n        response.body.errors.forEach((err: any, index: number) => {\n          console.error(`SendGrid Error ${index + 1}:`, err.message);\n          if (err.field) console.error(`Field: ${err.field}`);\n        });\n      }\n    }\n    return false;\n  }\n}\n\nexport function generateVerificationCode(): string {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}\n\nexport async function sendVerificationCode(email: string, code: string): Promise<boolean> {\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n      <div style=\"text-align: center; margin-bottom: 30px;\">\n        <h1 style=\"color: #80bc04; font-size: 28px; margin: 0;\">Beer Hop</h1>\n        <p style=\"color: #6B7280; font-size: 16px; margin: 10px 0 0 0;\">Brewery Discovery & Check-ins</p>\n      </div>\n      \n      <div style=\"background: #F9FAFB; border-radius: 8px; padding: 30px; margin: 20px 0;\">\n        <h2 style=\"color: #111827; font-size: 24px; margin: 0 0 20px 0; text-align: center;\">Verification Code</h2>\n        <p style=\"color: #374151; font-size: 16px; line-height: 1.5; margin: 0 0 20px 0; text-align: center;\">\n          Please use the following 6-digit code to verify your account:\n        </p>\n        \n        <div style=\"text-align: center; margin: 30px 0;\">\n          <div style=\"background: #FFFFFF; border: 2px solid #80bc04; border-radius: 8px; display: inline-block; padding: 20px 30px;\">\n            <span style=\"font-size: 32px; font-weight: bold; color: #80bc04; letter-spacing: 8px;\">${code}</span>\n          </div>\n        </div>\n        \n        <p style=\"color: #6B7280; font-size: 14px; line-height: 1.5; margin: 20px 0 0 0; text-align: center;\">\n          This code will expire in 10 minutes. Don't share this code with anyone.\n        </p>\n      </div>\n      \n      <div style=\"text-align: center; margin-top: 30px;\">\n        <p style=\"color: #9CA3AF; font-size: 12px; margin: 0;\">\n          If you didn't request this code, you can safely ignore this email.\n        </p>\n      </div>\n    </div>\n  `;\n\n  const text = `\n    Beer Hop - Verification Code\n    \n    Please use the following 6-digit code to verify your account: ${code}\n    \n    This code will expire in 10 minutes. Don't share this code with anyone.\n    \n    If you didn't request this code, you can safely ignore this email.\n  `;\n\n  return await sendEmail({\n    to: email,\n    from: 'jdelozier@beerhopok.com', // Verified sender email in SendGrid\n    subject: 'Beer Hop - Verification Code',\n    text,\n    html\n  });\n}","size_bytes":3815},"client/src/components/LocationPermissionDialog.tsx":{"content":"import { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { MapPin, AlertCircle, CheckCircle } from 'lucide-react';\nimport { useLocationPermission } from '@/hooks/useLocationPermission';\n\ninterface LocationPermissionDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onPermissionGranted?: () => void;\n}\n\nexport function LocationPermissionDialog({ \n  open, \n  onOpenChange, \n  onPermissionGranted \n}: LocationPermissionDialogProps) {\n  const { permission, requestPermission, error, hasUserPermanentlyDenied } = useLocationPermission();\n  const [isRequesting, setIsRequesting] = useState(false);\n\n  // Don't show dialog if user has permanently denied\n  if (hasUserPermanentlyDenied()) {\n    return null;\n  }\n\n  const handleRequestPermission = async () => {\n    setIsRequesting(true);\n    const granted = await requestPermission();\n    setIsRequesting(false);\n    \n    if (granted) {\n      onPermissionGranted?.();\n      onOpenChange(false);\n    }\n  };\n\n  const getIcon = () => {\n    switch (permission) {\n      case 'granted':\n        return <CheckCircle className=\"w-12 h-12 text-green-500\" />;\n      case 'denied':\n        return <AlertCircle className=\"w-12 h-12 text-red-500\" />;\n      default:\n        return <MapPin className=\"w-12 h-12 text-[#80bc04]\" />;\n    }\n  };\n\n  const getTitle = () => {\n    switch (permission) {\n      case 'granted':\n        return 'Location Access Granted';\n      case 'denied':\n        return 'Location Access Denied';\n      default:\n        return 'Enable Location Access';\n    }\n  };\n\n  const getDescription = () => {\n    switch (permission) {\n      case 'granted':\n        return 'Great! You can now check in at breweries when you visit them.';\n      case 'denied':\n        return 'To check in at breweries, please enable location access in your browser settings and refresh the page.';\n      default:\n        return 'Beer Hop would like to use your current location. This app will use your precise location because Beer Hop currently has access to your precise location.';\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            {getIcon()}\n          </div>\n          <DialogTitle className=\"text-xl font-bold\">\n            {getTitle()}\n          </DialogTitle>\n          <DialogDescription className=\"text-base text-gray-600 leading-relaxed\">\n            {getDescription()}\n          </DialogDescription>\n        </DialogHeader>\n\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 text-sm text-red-700\">\n            {error}\n          </div>\n        )}\n\n        <div className=\"flex flex-col gap-3 mt-6\">\n          {permission === 'granted' ? (\n            <Button \n              onClick={() => onOpenChange(false)}\n              className=\"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\"\n            >\n              Continue\n            </Button>\n          ) : permission === 'denied' ? (\n            <div className=\"space-y-3\">\n              <Button \n                onClick={() => window.location.reload()}\n                className=\"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\"\n              >\n                Refresh Page\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n              >\n                Continue Without Location\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              <Button \n                onClick={handleRequestPermission}\n                disabled={isRequesting}\n                className=\"bg-[#80bc04] hover:bg-[#80bc04]/90 text-white\"\n              >\n                {isRequesting ? 'Requesting Access...' : 'Allow Location Access'}\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n              >\n                Maybe Later\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"text-xs text-gray-500 text-center mt-4\">\n          <p className=\"flex items-center gap-1 justify-center\">\n            <MapPin className=\"w-3 h-3\" />\n            Your location is only used for check-in verification\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4596},"client/src/hooks/useLocationPermission.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport interface LocationPermissionState {\n  permission: 'granted' | 'denied' | 'prompt' | 'unknown';\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport function useLocationPermission() {\n  const [state, setState] = useState<LocationPermissionState>({\n    permission: 'unknown',\n    isLoading: true,\n    error: null\n  });\n\n  // Check if user has previously denied permission permanently\n  const hasUserPermanentlyDenied = () => {\n    return localStorage.getItem('location-permission-denied') === 'true';\n  };\n\n  const checkPermission = async () => {\n    try {\n      if (!navigator.geolocation) {\n        setState({\n          permission: 'denied',\n          isLoading: false,\n          error: 'Geolocation is not supported by this browser'\n        });\n        return;\n      }\n\n      // Check if permissions API is available\n      if ('permissions' in navigator) {\n        const permission = await navigator.permissions.query({ name: 'geolocation' });\n        setState({\n          permission: permission.state,\n          isLoading: false,\n          error: null\n        });\n\n        // Listen for permission changes\n        permission.addEventListener('change', () => {\n          setState(prev => ({\n            ...prev,\n            permission: permission.state\n          }));\n        });\n      } else {\n        // Fallback for browsers without permissions API\n        setState({\n          permission: 'prompt',\n          isLoading: false,\n          error: null\n        });\n      }\n    } catch (error) {\n      setState({\n        permission: 'unknown',\n        isLoading: false,\n        error: 'Failed to check location permission'\n      });\n    }\n  };\n\n  const requestPermission = async (): Promise<boolean> => {\n    return new Promise((resolve) => {\n      if (!navigator.geolocation) {\n        setState(prev => ({\n          ...prev,\n          permission: 'denied',\n          error: 'Geolocation is not supported'\n        }));\n        resolve(false);\n        return;\n      }\n\n      // Request location to trigger permission prompt\n      navigator.geolocation.getCurrentPosition(\n        () => {\n          setState(prev => ({\n            ...prev,\n            permission: 'granted',\n            error: null\n          }));\n          // Clear any previous denial since user has now granted permission\n          localStorage.removeItem('location-permission-denied');\n          resolve(true);\n        },\n        (error) => {\n          let errorMessage = 'Location access denied';\n          let permission: 'denied' | 'unknown' = 'denied';\n\n          switch (error.code) {\n            case error.PERMISSION_DENIED:\n              errorMessage = 'Location access denied by user';\n              permission = 'denied';\n              // Store permanent denial in localStorage\n              localStorage.setItem('location-permission-denied', 'true');\n              break;\n            case error.POSITION_UNAVAILABLE:\n              errorMessage = 'Location information unavailable';\n              permission = 'unknown';\n              break;\n            case error.TIMEOUT:\n              errorMessage = 'Location request timed out';\n              permission = 'unknown';\n              break;\n          }\n\n          setState(prev => ({\n            ...prev,\n            permission,\n            error: errorMessage\n          }));\n          resolve(false);\n        },\n        {\n          timeout: 10000,\n          enableHighAccuracy: false\n        }\n      );\n    });\n  };\n\n  useEffect(() => {\n    checkPermission();\n  }, []);\n\n  return {\n    ...state,\n    requestPermission,\n    checkPermission,\n    hasUserPermanentlyDenied\n  };\n}","size_bytes":3661},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  return false;\n}","size_bytes":1817},"client/src/lib/imageUtils.ts":{"content":"/**\n * Converts a Google Drive sharing link to a direct image URL\n * @param url - The Google Drive sharing URL or null\n * @returns The direct image URL or the original URL if not a Google Drive link\n */\nexport function convertGoogleDriveImageUrl(url: string | null | undefined): string {\n  if (!url) return \"\";\n  \n  // Check if it's a Google Drive sharing link (handles both share_link and drive_link formats)\n  const driveMatch = url.match(/https:\\/\\/drive\\.google\\.com\\/file\\/d\\/([a-zA-Z0-9_-]+)/);\n  \n  if (driveMatch && driveMatch[1]) {\n    // Convert to direct access URL using the thumbnail format which works better for images\n    return `https://drive.google.com/thumbnail?id=${driveMatch[1]}&sz=w200-h200`;\n  }\n  \n  // Return original URL if not a Google Drive link\n  return url;\n}","size_bytes":790},"client/src/pages/privacy.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Privacy() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back\n            </Button>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Privacy Policy</CardTitle>\n            <p className=\"text-sm text-gray-600\">Last updated: {new Date().toLocaleDateString()}</p>\n          </CardHeader>\n          <CardContent className=\"prose max-w-none\">\n            <div className=\"space-y-6\">\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">1. Information We Collect</h3>\n                \n                <h4 className=\"font-semibold mb-2\">Personal Information</h4>\n                <p className=\"text-gray-700 leading-relaxed mb-3\">\n                  When you create an account, we collect your email address, name, username, and optional location information. \n                  This information is necessary to provide you with personalized service and to enable social features.\n                </p>\n\n                <h4 className=\"font-semibold mb-2\">Location Information</h4>\n                <p className=\"text-gray-700 leading-relaxed mb-3\">\n                  When you use the check-in feature, we collect your precise location to verify that you are within the specified \n                  radius of a brewery. This location data is used solely for check-in verification and is not stored permanently.\n                </p>\n\n                <h4 className=\"font-semibold mb-2\">Usage Information</h4>\n                <p className=\"text-gray-700 leading-relaxed mb-3\">\n                  We automatically collect information about how you use Beer Hop, including check-ins, favorite breweries, \n                  and interaction with podcast content. This helps us improve the service and provide personalized recommendations.\n                </p>\n\n                <h4 className=\"font-semibold mb-2\">Device and Notification Information</h4>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  To send push notifications, we collect device tokens and notification preferences. We may also collect \n                  information about your device type, operating system, and app version to ensure notifications are \n                  delivered properly and formatted correctly for your device.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">2. How We Use Your Information</h3>\n                <p className=\"text-gray-700 leading-relaxed mb-2\">We use the information we collect to:</p>\n                <ul className=\"list-disc pl-6 text-gray-700 space-y-1\">\n                  <li>Provide and maintain the Beer Hop service</li>\n                  <li>Verify brewery check-ins using location data</li>\n                  <li>Create and maintain leaderboards and user statistics</li>\n                  <li>Send you verification codes and important service notifications</li>\n                  <li>Deliver push notifications about breweries, events, podcasts, and social activities based on your preferences</li>\n                  <li>Improve our service and develop new features</li>\n                  <li>Prevent fraud and ensure the security of our platform</li>\n                  <li>Comply with legal obligations</li>\n                </ul>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">3. Information Sharing and Disclosure</h3>\n                \n                <h4 className=\"font-semibold mb-2\">Public Information</h4>\n                <p className=\"text-gray-700 leading-relaxed mb-3\">\n                  Your username, check-in count, and leaderboard position are visible to other users as part of the social \n                  features of Beer Hop. Your email address and precise location data are never shared publicly.\n                </p>\n\n                <h4 className=\"font-semibold mb-2\">Service Providers</h4>\n                <p className=\"text-gray-700 leading-relaxed mb-3\">\n                  We use third-party service providers to help us operate Beer Hop, including email delivery services \n                  (SendGrid), push notification providers, and database hosting. These providers have access to your \n                  personal information only to perform specific tasks on our behalf and are obligated to keep it confidential.\n                </p>\n\n                <h4 className=\"font-semibold mb-2\">Legal Requirements</h4>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  We may disclose your information if required to do so by law or in response to valid requests by \n                  public authorities (e.g., a court or government agency).\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">4. Data Security</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  We implement appropriate technical and organizational security measures to protect your personal information \n                  against unauthorized access, alteration, disclosure, or destruction. However, no method of transmission over \n                  the internet or electronic storage is 100% secure, and we cannot guarantee absolute security.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">5. Data Retention</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  We retain your personal information for as long as your account is active or as needed to provide you services. \n                  We will retain and use your information as necessary to comply with our legal obligations, resolve disputes, \n                  and enforce our agreements. Check-in location data is not permanently stored after verification.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">6. Your Rights and Choices</h3>\n                <p className=\"text-gray-700 leading-relaxed mb-2\">You have the right to:</p>\n                <ul className=\"list-disc pl-6 text-gray-700 space-y-1\">\n                  <li>Access and update your personal information through your account settings</li>\n                  <li>Delete your account and associated data</li>\n                  <li>Opt out of location services (though this will disable check-in functionality)</li>\n                  <li>Control push notification preferences through your device settings or app settings</li>\n                  <li>Request a copy of your personal data</li>\n                  <li>Request correction of inaccurate personal data</li>\n                </ul>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">7. Children's Privacy</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  Beer Hop is intended for users who are at least 21 years old, consistent with legal drinking age requirements. \n                  We do not knowingly collect personal information from children under 21. If you are a parent or guardian and \n                  believe your child has provided us with personal information, please contact us.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">8. International Data Transfers</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  Your information may be transferred to and processed in countries other than your own. We ensure that \n                  such transfers are made in accordance with applicable privacy laws and with appropriate safeguards in place.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">9. Changes to This Privacy Policy</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  We may update this Privacy Policy from time to time. We will notify you of any changes by posting the \n                  new Privacy Policy on this page and updating the \"Last updated\" date. You are advised to review this \n                  Privacy Policy periodically for any changes.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">10. Contact Us</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  If you have any questions about this Privacy Policy or our privacy practices, please contact us through \n                  the app or via email. We will respond to your inquiries within a reasonable timeframe.\n                </p>\n              </section>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9415},"client/src/pages/terms.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Terms() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back\n            </Button>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Terms of Service</CardTitle>\n            <p className=\"text-sm text-gray-600\">Last updated: {new Date().toLocaleDateString()}</p>\n          </CardHeader>\n          <CardContent className=\"prose max-w-none\">\n            <div className=\"space-y-6\">\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">1. Acceptance of Terms</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  By accessing and using Beer Hop (\"the Service\"), you accept and agree to be bound by the terms and provision of this agreement. \n                  If you do not agree to abide by the above, please do not use this service.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">2. Description of Service</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  Beer Hop is a mobile-first web application that allows users to discover breweries, check into locations, \n                  track visits, listen to brewery-focused podcast episodes, and connect with other craft beer enthusiasts. \n                  The service includes features such as brewery discovery, social check-ins, leaderboards, and community engagement.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">3. User Accounts and Registration</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  To use certain features of the Service, you must register for an account using a valid email address. \n                  You are responsible for maintaining the security of your account and password. You agree to accept \n                  responsibility for all activities that occur under your account.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">4. User Conduct</h3>\n                <p className=\"text-gray-700 leading-relaxed mb-2\">You agree not to use the Service to:</p>\n                <ul className=\"list-disc pl-6 text-gray-700 space-y-1\">\n                  <li>Upload, post, or transmit any content that is unlawful, harmful, threatening, abusive, or otherwise objectionable</li>\n                  <li>Impersonate any person or entity or falsely state or misrepresent your affiliation with a person or entity</li>\n                  <li>Interfere with or disrupt the Service or servers connected to the Service</li>\n                  <li>Attempt to gain unauthorized access to any portion of the Service</li>\n                  <li>Use the Service for any commercial purposes without our express written consent</li>\n                </ul>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">5. Check-ins and Location Data</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  Beer Hop uses location services to verify brewery check-ins within a specified radius. By using the check-in feature, \n                  you consent to the collection and use of your location data for this purpose. Check-ins are subject to a 24-hour \n                  cooldown period per brewery per user.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">6. Push Notifications</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  Beer Hop may send you push notifications to enhance your experience, including but not limited to:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 space-y-1 mb-3\">\n                  <li>Notifications about new breweries in your area</li>\n                  <li>Reminders about brewery events and special offers</li>\n                  <li>Updates about new podcast episodes</li>\n                  <li>Social notifications about friends' activities and achievements</li>\n                  <li>Leaderboard updates and badge achievements</li>\n                  <li>Important service announcements and updates</li>\n                </ul>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  You can control your notification preferences through your device settings or within the app. \n                  Disabling notifications may limit certain features of the Service.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">7. Content and Intellectual Property</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  All content on Beer Hop, including but not limited to text, graphics, logos, images, and software, is the property \n                  of Beer Hop or its content suppliers and is protected by copyright and other intellectual property laws. \n                  You may not reproduce, distribute, or create derivative works from any content without express written permission.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">8. Privacy</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  Your privacy is important to us. Please review our Privacy Policy, which also governs your use of the Service, \n                  to understand our practices regarding the collection and use of your personal information.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">9. Disclaimers</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  The Service is provided \"as is\" and \"as available\" without any warranties of any kind. We do not warrant that \n                  the Service will be uninterrupted, error-free, or completely secure. Beer Hop is not responsible for the accuracy \n                  of brewery information or the availability of third-party services.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">10. Limitation of Liability</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  In no event shall Beer Hop be liable for any indirect, incidental, special, consequential, or punitive damages, \n                  including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from \n                  your use of the Service.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">11. Termination</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  We may terminate or suspend your account and bar access to the Service immediately, without prior notice or liability, \n                  under our sole discretion, for any reason whatsoever, including without limitation if you breach the Terms.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">12. Changes to Terms</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  We reserve the right to modify or replace these Terms at any time. If a revision is material, we will provide \n                  at least 30 days notice prior to any new terms taking effect.\n                </p>\n              </section>\n\n              <section>\n                <h3 className=\"text-lg font-semibold mb-3\">13. Contact Information</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  If you have any questions about these Terms of Service, please contact us through the app or via email.\n                </p>\n              </section>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8651},"client/src/lib/linkHandler.ts":{"content":"/**\n * Smart link handler that attempts to open links in their native apps\n * Falls back to opening in a new browser tab if native app is not available\n */\n\ninterface NativeAppMapping {\n  domain: string;\n  appScheme: string;\n  webFallback?: boolean;\n}\n\n// Common native app mappings\nconst NATIVE_APP_MAPPINGS: NativeAppMapping[] = [\n  { domain: 'instagram.com', appScheme: 'instagram://user?username=' },\n  { domain: 'www.instagram.com', appScheme: 'instagram://user?username=' },\n  { domain: 'facebook.com', appScheme: 'fb://profile/' },\n  { domain: 'www.facebook.com', appScheme: 'fb://profile/' },\n  { domain: 'twitter.com', appScheme: 'twitter://user?screen_name=' },\n  { domain: 'x.com', appScheme: 'twitter://user?screen_name=' },\n  { domain: 'tiktok.com', appScheme: 'tiktok://user/' },\n  { domain: 'www.tiktok.com', appScheme: 'tiktok://user/' },\n  { domain: 'youtube.com', appScheme: 'youtube://' },\n  { domain: 'www.youtube.com', appScheme: 'youtube://' },\n  { domain: 'youtu.be', appScheme: 'youtube://' },\n  { domain: 'linkedin.com', appScheme: 'linkedin://' },\n  { domain: 'www.linkedin.com', appScheme: 'linkedin://' },\n  { domain: 'spotify.com', appScheme: 'spotify:' },\n  { domain: 'open.spotify.com', appScheme: 'spotify:' },\n  { domain: 'apple.com', appScheme: 'https://' }, // Apple Music/App Store links work best with https\n  { domain: 'apps.apple.com', appScheme: 'https://' },\n  { domain: 'music.apple.com', appScheme: 'music://' },\n];\n\n/**\n * Attempts to extract username/handle from social media URLs\n */\nfunction extractSocialHandle(url: string, domain: string): string {\n  try {\n    const urlObj = new URL(url);\n    const pathname = urlObj.pathname;\n    \n    // Remove leading slash and split by /\n    const parts = pathname.substring(1).split('/');\n    \n    if (parts.length > 0 && parts[0]) {\n      // For most social platforms, the username is the first part of the path\n      return parts[0];\n    }\n    \n    return '';\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Converts web URLs to native app URLs when possible\n */\nfunction buildNativeUrl(webUrl: string, mapping: NativeAppMapping): string {\n  try {\n    const urlObj = new URL(webUrl);\n    \n    // Special handling for different platforms\n    if (mapping.domain.includes('instagram.com')) {\n      const handle = extractSocialHandle(webUrl, mapping.domain);\n      return handle ? `instagram://user?username=${handle}` : `instagram://`;\n    }\n    \n    if (mapping.domain.includes('facebook.com')) {\n      const handle = extractSocialHandle(webUrl, mapping.domain);\n      return handle ? `fb://profile/${handle}` : `fb://`;\n    }\n    \n    if (mapping.domain.includes('twitter.com') || mapping.domain.includes('x.com')) {\n      const handle = extractSocialHandle(webUrl, mapping.domain);\n      return handle ? `twitter://user?screen_name=${handle}` : `twitter://`;\n    }\n    \n    if (mapping.domain.includes('tiktok.com')) {\n      const handle = extractSocialHandle(webUrl, mapping.domain);\n      return handle ? `tiktok://user/${handle}` : `tiktok://`;\n    }\n    \n    if (mapping.domain.includes('youtube.com') || mapping.domain.includes('youtu.be')) {\n      // YouTube URLs can be complex, try to preserve the path\n      const pathname = urlObj.pathname;\n      const search = urlObj.search;\n      return `youtube://${pathname}${search}`;\n    }\n    \n    if (mapping.domain.includes('spotify.com')) {\n      // Convert Spotify web URLs to app URLs\n      const pathname = urlObj.pathname;\n      return `spotify:${pathname.replace(/\\//g, ':')}`;\n    }\n    \n    if (mapping.domain.includes('linkedin.com')) {\n      // LinkedIn app URLs are complex, keep as web URL\n      return webUrl;\n    }\n    \n    if (mapping.domain.includes('apple.com')) {\n      // Apple links work best as HTTPS\n      return webUrl;\n    }\n    \n    // Default: try to preserve the path\n    return `${mapping.appScheme}${urlObj.pathname}${urlObj.search}`;\n    \n  } catch {\n    // If URL parsing fails, return the original\n    return webUrl;\n  }\n}\n\n/**\n * Smart link opener that tries native app first, falls back to web\n */\nexport function openSmartLink(url: string): void {\n  if (!url) {\n    console.log('openSmartLink called with empty URL');\n    return;\n  }\n  \n  console.log('openSmartLink called with URL:', url);\n  \n  try {\n    const urlObj = new URL(url);\n    const domain = urlObj.hostname.toLowerCase();\n    \n    // Special handling for Instagram URLs\n    if (domain.includes('instagram.com')) {\n      const pathname = urlObj.pathname;\n      const handle = pathname.split('/').filter(part => part.length > 0)[0];\n      \n      if (handle) {\n        const instagramAppUrl = `instagram://user?username=${handle}`;\n        console.log('Attempting to open Instagram app with:', instagramAppUrl);\n        \n        // Mark that we're navigating externally\n        sessionStorage.setItem('external-nav', 'true');\n        \n        // Try multiple approaches for better compatibility\n        let appOpened = false;\n        \n        // Use a more reliable method to try opening the app\n        try {\n          // Create a hidden iframe to attempt app opening\n          const iframe = document.createElement('iframe');\n          iframe.style.display = 'none';\n          iframe.src = instagramAppUrl;\n          document.body.appendChild(iframe);\n          \n          // Clean up iframe after a short delay\n          setTimeout(() => {\n            if (document.body.contains(iframe)) {\n              document.body.removeChild(iframe);\n            }\n          }, 100);\n          \n          console.log('Attempted Instagram app opening via iframe');\n        } catch (e) {\n          console.log('Instagram app opening failed:', e);\n        }\n        \n        // Set up fallback to web version\n        const fallbackTimer = setTimeout(() => {\n          console.log('Instagram app timeout - opening web version');\n          window.open(url, '_blank', 'noopener,noreferrer');\n        }, 2000);\n        \n        // Listen for visibility change (user switched to app)\n        const handleVisibilityChange = () => {\n          if (document.hidden) {\n            console.log('Page hidden - Instagram app likely opened');\n            clearTimeout(fallbackTimer);\n            document.removeEventListener('visibilitychange', handleVisibilityChange);\n          }\n        };\n        \n        document.addEventListener('visibilitychange', handleVisibilityChange);\n        \n        // Also clear timer if user comes back to page quickly (app didn't open)\n        setTimeout(() => {\n          document.removeEventListener('visibilitychange', handleVisibilityChange);\n        }, 3000);\n        \n        // Clean up listener\n        setTimeout(() => {\n          document.removeEventListener('visibilitychange', handleVisibilityChange);\n        }, 2000);\n        \n        return;\n      }\n    }\n    \n    // Special handling for Facebook (mobile-optimized)\n    if (domain.includes('facebook.com') || domain.includes('fb.com')) {\n      // Mark that we're navigating externally\n      sessionStorage.setItem('external-nav', 'true');\n      \n      const pathname = urlObj.pathname;\n      console.log('Mobile Facebook URL pathname:', pathname);\n      \n      // Extract handle from various Facebook URL formats\n      let handle = '';\n      if (pathname.includes('/profile.php')) {\n        // Handle format: facebook.com/profile.php?id=123456\n        const urlParams = new URLSearchParams(urlObj.search);\n        handle = urlParams.get('id') || '';\n      } else {\n        // Handle format: facebook.com/username\n        const pathParts = pathname.split('/').filter(part => part.length > 0);\n        handle = pathParts[0] || '';\n      }\n      \n      if (handle) {\n        // Mobile Facebook app URL scheme\n        const fbAppUrl = handle.match(/^\\d+$/) ? `fb://profile/${handle}` : `fb://page/${handle}`;\n        console.log('Attempting mobile Facebook app with:', fbAppUrl);\n        \n        try {\n          // For mobile, direct window.location.href works best\n          window.location.href = fbAppUrl;\n          console.log('Mobile Facebook app opening triggered');\n        } catch (e) {\n          console.log('Mobile Facebook app opening failed:', e);\n        }\n        \n        return;\n      } else {\n        console.log('Could not extract Facebook handle from mobile URL');\n        return;\n      }\n    }\n    \n    // Special handling for Spotify\n    if (domain.includes('spotify.com')) {\n      console.log('Opening Spotify URL in window:', url);\n      \n      // Mark that we're navigating externally\n      sessionStorage.setItem('external-nav', 'true');\n      \n      // Open Spotify URL directly in the current window\n      window.location.href = url;\n      \n      return;\n    }\n    \n    // For all other URLs, just open in new tab\n    console.log('Opening in new tab:', url);\n    // Mark that we're navigating externally for non-app links too\n    sessionStorage.setItem('external-nav', 'true');\n    window.open(url, '_blank', 'noopener,noreferrer');\n    \n  } catch (error) {\n    console.error('Error opening smart link:', error);\n    // Fallback to basic window.open\n    window.open(url, '_blank', 'noopener,noreferrer');\n  }\n}\n\n/**\n * Simple wrapper for backward compatibility\n */\nexport function openLink(url: string): void {\n  openSmartLink(url);\n}","size_bytes":9264},"client/src/components/BackButton.tsx":{"content":"import { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\n\ninterface BackButtonProps {\n  className?: string;\n}\n\nexport function BackButton({ className = \"\" }: BackButtonProps) {\n  const [, setLocation] = useLocation();\n  const [showBackButton, setShowBackButton] = useState(false);\n\n  useEffect(() => {\n    // Check if we should show the Facebook-style back button\n    const checkBackButtonVisibility = () => {\n      // Show if we're on an external site (not our Beer Hop app)\n      const currentDomain = window.location.hostname;\n      const isExternalSite = !currentDomain.includes('replit.app') && \n                            !currentDomain.includes('localhost') && \n                            currentDomain !== '127.0.0.1' &&\n                            !currentDomain.includes('replit.dev');\n      \n      // Also check if we have the external navigation flag (for when returning to app)\n      const wasExternalNavigation = sessionStorage.getItem('external-nav');\n      \n      if (isExternalSite || wasExternalNavigation) {\n        setShowBackButton(true);\n        \n        // Only auto-hide if we're back in the app (not on external site)\n        if (!isExternalSite && wasExternalNavigation) {\n          setTimeout(() => {\n            setShowBackButton(false);\n            sessionStorage.removeItem('external-nav');\n            sessionStorage.removeItem('return-url');\n          }, 15000);\n        }\n      }\n    };\n\n    // Check immediately when component mounts\n    checkBackButtonVisibility();\n\n    // Check when user returns from external navigation\n    const handleVisibilityChange = () => {\n      if (!document.hidden) {\n        checkBackButtonVisibility();\n      }\n    };\n\n    // Check when page loads (for external sites)\n    const handlePageLoad = () => {\n      checkBackButtonVisibility();\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    window.addEventListener('load', handlePageLoad);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('load', handlePageLoad);\n    };\n  }, []);\n\n  const handleBack = () => {\n    // Clear the external navigation flag\n    sessionStorage.removeItem('external-nav');\n    setShowBackButton(false);\n    \n    // Check if we have a return URL saved\n    const returnUrl = sessionStorage.getItem('return-url');\n    if (returnUrl) {\n      sessionStorage.removeItem('return-url');\n      window.location.href = returnUrl;\n    } else {\n      // Try to go back in browser history first\n      if (window.history.length > 1) {\n        window.history.back();\n      } else {\n        // Navigate back to the main app screen as fallback\n        const origin = window.location.origin;\n        window.location.href = origin;\n      }\n    }\n  };\n\n  if (!showBackButton) return null;\n\n  return (\n    <div className={`fixed top-4 left-4 z-50 ${className}`}>\n      <button\n        onClick={handleBack}\n        className=\"flex items-center space-x-2 bg-black/80 hover:bg-black rounded-full px-3 py-2 text-white shadow-lg backdrop-blur-sm transition-colors\"\n        aria-label=\"Back to Beer Hop\"\n      >\n        <ArrowLeft className=\"w-4 h-4\" />\n        <span className=\"text-sm font-medium\">Beer Hop OK</span>\n      </button>\n    </div>\n  );\n}","size_bytes":3408},"client/public/external-back-button.js":{"content":"// External Back Button Script for Beer Hop\n// This creates a Facebook-style back button that appears on external websites\n\n(function() {\n  'use strict';\n  \n  function injectExternalBackButton() {\n    // Only inject if we have the navigation flag\n    const returnUrl = sessionStorage.getItem('return-url');\n    if (!returnUrl) return;\n    \n    // Don't inject if already exists\n    if (document.getElementById('beer-hop-back-button')) return;\n    \n    // Create the back button\n    const backButton = document.createElement('div');\n    backButton.id = 'beer-hop-back-button';\n    backButton.style.cssText = `\n      position: fixed;\n      top: 16px;\n      left: 16px;\n      z-index: 999999;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    `;\n    \n    const button = document.createElement('button');\n    button.style.cssText = `\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      border: none;\n      border-radius: 20px;\n      padding: 8px 12px;\n      font-size: 14px;\n      font-weight: 500;\n      cursor: pointer;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n      backdrop-filter: blur(8px);\n      transition: background-color 0.2s;\n    `;\n    \n    button.innerHTML = `\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <path d=\"m12 19-7-7 7-7\"/>\n        <path d=\"M19 12H5\"/>\n      </svg>\n      Beer Hop OK\n    `;\n    \n    button.addEventListener('mouseover', function() {\n      button.style.backgroundColor = 'rgba(0, 0, 0, 0.9)';\n    });\n    \n    button.addEventListener('mouseout', function() {\n      button.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n    });\n    \n    button.addEventListener('click', function() {\n      const returnUrl = sessionStorage.getItem('return-url');\n      sessionStorage.removeItem('return-url');\n      sessionStorage.removeItem('external-nav');\n      \n      if (returnUrl) {\n        window.location.href = returnUrl;\n      } else {\n        window.history.back();\n      }\n    });\n    \n    backButton.appendChild(button);\n    document.body.appendChild(backButton);\n  }\n  \n  // Auto-inject when script loads\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', injectExternalBackButton);\n  } else {\n    injectExternalBackButton();\n  }\n})();","size_bytes":2446},"client/src/lib/externalBackButton.ts":{"content":"// External Back Button Script\n// This creates a Facebook-style back button that appears on external websites\n\nexport function injectExternalBackButton() {\n  // Only inject if we're on an external site and have the navigation flag\n  const currentDomain = window.location.hostname;\n  const isExternalSite = !currentDomain.includes('replit.app') && \n                        !currentDomain.includes('localhost') && \n                        currentDomain !== '127.0.0.1' &&\n                        !currentDomain.includes('replit.dev');\n  \n  if (!isExternalSite) return;\n  \n  // Check if we came from Beer Hop\n  const returnUrl = sessionStorage.getItem('return-url');\n  if (!returnUrl) return;\n  \n  // Don't inject if already exists\n  if (document.getElementById('beer-hop-back-button')) return;\n  \n  // Create the back button\n  const backButton = document.createElement('div');\n  backButton.id = 'beer-hop-back-button';\n  backButton.style.cssText = `\n    position: fixed;\n    top: 16px;\n    left: 16px;\n    z-index: 999999;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  `;\n  \n  const button = document.createElement('button');\n  button.style.cssText = `\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    background: rgba(0, 0, 0, 0.8);\n    color: white;\n    border: none;\n    border-radius: 20px;\n    padding: 8px 12px;\n    font-size: 14px;\n    font-weight: 500;\n    cursor: pointer;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n    backdrop-filter: blur(8px);\n    transition: background-color 0.2s;\n  `;\n  \n  button.innerHTML = `\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n      <path d=\"m12 19-7-7 7-7\"/>\n      <path d=\"M19 12H5\"/>\n    </svg>\n    Beer Hop OK\n  `;\n  \n  button.addEventListener('mouseover', () => {\n    button.style.backgroundColor = 'rgba(0, 0, 0, 0.9)';\n  });\n  \n  button.addEventListener('mouseout', () => {\n    button.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n  });\n  \n  button.addEventListener('click', () => {\n    const returnUrl = sessionStorage.getItem('return-url');\n    sessionStorage.removeItem('return-url');\n    sessionStorage.removeItem('external-nav');\n    \n    if (returnUrl) {\n      window.location.href = returnUrl;\n    } else {\n      window.history.back();\n    }\n  });\n  \n  backButton.appendChild(button);\n  document.body.appendChild(backButton);\n}\n\n// Auto-inject when script loads\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', injectExternalBackButton);\n} else {\n  injectExternalBackButton();\n}","size_bytes":2638},"client/src/lib/simpleLinkHandler.ts":{"content":"/**\n * Simple link handler for debugging\n */\nexport function openSimpleLink(url: string): void {\n  console.log('openSimpleLink called with:', url);\n  if (!url) {\n    console.log('No URL provided');\n    return;\n  }\n  \n  try {\n    window.open(url, '_blank', 'noopener,noreferrer');\n    console.log('Successfully opened URL in new tab');\n  } catch (error) {\n    console.error('Error opening URL:', error);\n  }\n}","size_bytes":408}}}